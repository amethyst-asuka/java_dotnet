Imports System

'
' * Copyright (c) 1999, 2007, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 

Namespace java.math

	''' <summary>
	''' A simple bit sieve used for finding prime number candidates. Allows setting
	''' and clearing of bits in a storage array. The size of the sieve is assumed to
	''' be constant to reduce overhead. All the bits of a new bitSieve are zero, and
	''' bits are removed from it by setting them.
	''' 
	''' To reduce storage space and increase efficiency, no even numbers are
	''' represented in the sieve (each bit in the sieve represents an odd number).
	''' The relationship between the index of a bit and the number it represents is
	''' given by
	''' N = offset + (2*index + 1);
	''' Where N is the integer represented by a bit in the sieve, offset is some
	''' even integer offset indicating where the sieve begins, and index is the
	''' index of a bit in the sieve array.
	''' </summary>
	''' <seealso cref=     BigInteger
	''' @author  Michael McCloskey
	''' @since   1.3 </seealso>
	Friend Class BitSieve
		''' <summary>
		''' Stores the bits in this bitSieve.
		''' </summary>
		Private bits As Long()

		''' <summary>
		''' Length is how many bits this sieve holds.
		''' </summary>
		Private length As Integer

		''' <summary>
		''' A small sieve used to filter out multiples of small primes in a search
		''' sieve.
		''' </summary>
		Private Shared smallSieve As New BitSieve

		''' <summary>
		''' Construct a "small sieve" with a base of 0.  This constructor is
		''' used internally to generate the set of "small primes" whose multiples
		''' are excluded from sieves generated by the main (package private)
		''' constructor, BitSieve(BigInteger base, int searchLen).  The length
		''' of the sieve generated by this constructor was chosen for performance;
		''' it controls a tradeoff between how much time is spent constructing
		''' other sieves, and how much time is wasted testing composite candidates
		''' for primality.  The length was chosen experimentally to yield good
		''' performance.
		''' </summary>
		Private Sub New()
			length = 150 * 64
			bits = New Long((unitIndex(length - 1) + 1) - 1){}

			' Mark 1 as composite
			[set](0)
			Dim nextIndex As Integer = 1
			Dim nextPrime As Integer = 3

			' Find primes and remove their multiples from sieve
			Do
				sieveSingle(length, nextIndex + nextPrime, nextPrime)
				nextIndex = sieveSearch(length, nextIndex + 1)
				nextPrime = 2*nextIndex + 1
			Loop While (nextIndex > 0) AndAlso (nextPrime < length)
		End Sub

		''' <summary>
		''' Construct a bit sieve of searchLen bits used for finding prime number
		''' candidates. The new sieve begins at the specified base, which must
		''' be even.
		''' </summary>
		Friend Sub New(ByVal base As BigInteger, ByVal searchLen As Integer)
	'        
	'         * Candidates are indicated by clear bits in the sieve. As a candidates
	'         * nonprimality is calculated, a bit is set in the sieve to eliminate
	'         * it. To reduce storage space and increase efficiency, no even numbers
	'         * are represented in the sieve (each bit in the sieve represents an
	'         * odd number).
	'         
			bits = New Long((unitIndex(searchLen-1) + 1) - 1){}
			length = searchLen
			Dim start As Integer = 0

			Dim [step] As Integer = smallSieve.sieveSearch(smallSieve.length, start)
			Dim convertedStep As Integer = ([step] *2) + 1

			' Construct the large sieve at an even offset specified by base
			Dim b As New MutableBigInteger(base)
			Dim q As New MutableBigInteger
			Do
				' Calculate base mod convertedStep
				start = b.divideOneWord(convertedStep, q)

				' Take each multiple of step out of sieve
				start = convertedStep - start
				If start Mod 2 = 0 Then start += convertedStep
				sieveSingle(searchLen, (start-1)\2, convertedStep)

				' Find next prime from small sieve
				[step] = smallSieve.sieveSearch(smallSieve.length, [step]+1)
				convertedStep = ([step] *2) + 1
			Loop While [step] > 0
		End Sub

		''' <summary>
		''' Given a bit index return unit index containing it.
		''' </summary>
		Private Shared Function unitIndex(ByVal bitIndex As Integer) As Integer
			Return CInt(CUInt(bitIndex) >> 6)
		End Function

		''' <summary>
		''' Return a unit that masks the specified bit in its unit.
		''' </summary>
		Private Shared Function bit(ByVal bitIndex As Integer) As Long
			Return 1L << (bitIndex And ((1<<6) - 1))
		End Function

		''' <summary>
		''' Get the value of the bit at the specified index.
		''' </summary>
		Private Function [get](ByVal bitIndex As Integer) As Boolean
			Dim unitIndex As Integer = unitIndex(bitIndex)
			Return ((bits(unitIndex) And bit(bitIndex)) <> 0)
		End Function

		''' <summary>
		''' Set the bit at the specified index.
		''' </summary>
		Private Sub [set](ByVal bitIndex As Integer)
			Dim unitIndex As Integer = unitIndex(bitIndex)
			bits(unitIndex) = bits(unitIndex) Or bit(bitIndex)
		End Sub

		''' <summary>
		''' This method returns the index of the first clear bit in the search
		''' array that occurs at or after start. It will not search past the
		''' specified limit. It returns -1 if there is no such clear bit.
		''' </summary>
		Private Function sieveSearch(ByVal limit As Integer, ByVal start As Integer) As Integer
			If start >= limit Then Return -1

			Dim index As Integer = start
			Do
				If Not [get](index) Then Return index
				index += 1
			Loop While index < limit-1
			Return -1
		End Function

		''' <summary>
		''' Sieve a single set of multiples out of the sieve. Begin to remove
		''' multiples of the specified step starting at the specified start index,
		''' up to the specified limit.
		''' </summary>
		Private Sub sieveSingle(ByVal limit As Integer, ByVal start As Integer, ByVal [step] As Integer)
			Do While start < limit
				[set](start)
				start += [step]
			Loop
		End Sub

		''' <summary>
		''' Test probable primes in the sieve and return successful candidates.
		''' </summary>
		Friend Overridable Function retrieve(ByVal initValue As BigInteger, ByVal certainty As Integer, ByVal random As Random) As BigInteger
			' Examine the sieve one long at a time to find possible primes
			Dim offset As Integer = 1
			For i As Integer = 0 To bits.Length - 1
				Dim nextLong As Long = Not bits(i)
				For j As Integer = 0 To 63
					If (nextLong And 1) = 1 Then
						Dim candidate As BigInteger = initValue.add(Big java.lang.[Integer].valueOf(offset))
						If candidate.primeToCertainty(certainty, random) Then Return candidate
					End If
					nextLong >>>= 1
					offset+=2
				Next j
			Next i
			Return Nothing
		End Function
	End Class

End Namespace