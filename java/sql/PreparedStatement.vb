Imports System

'
' * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 

Namespace java.sql


	''' <summary>
	''' An object that represents a precompiled SQL statement.
	''' <P>A SQL statement is precompiled and stored in a
	''' <code>PreparedStatement</code> object. This object can then be used to
	''' efficiently execute this statement multiple times.
	''' 
	''' <P><B>Note:</B> The setter methods (<code>setShort</code>, <code>setString</code>,
	''' and so on) for setting IN parameter values
	''' must specify types that are compatible with the defined SQL type of
	''' the input parameter. For instance, if the IN parameter has SQL type
	''' <code>INTEGER</code>, then the method <code>setInt</code> should be used.
	''' 
	''' <p>If arbitrary parameter type conversions are required, the method
	''' <code>setObject</code> should be used with a target SQL type.
	''' <P>
	''' In the following example of setting a parameter, <code>con</code> represents
	''' an active connection:
	''' <PRE>
	'''   PreparedStatement pstmt = con.prepareStatement("UPDATE EMPLOYEES
	'''                                     SET SALARY = ? WHERE ID = ?");
	'''   pstmt.setBigDecimal(1, 153833.00)
	'''   pstmt.setInt(2, 110592)
	''' </PRE>
	''' </summary>
	''' <seealso cref= Connection#prepareStatement </seealso>
	''' <seealso cref= ResultSet </seealso>

	Public Interface PreparedStatement
		Inherits Statement

		''' <summary>
		''' Executes the SQL query in this <code>PreparedStatement</code> object
		''' and returns the <code>ResultSet</code> object generated by the query.
		''' </summary>
		''' <returns> a <code>ResultSet</code> object that contains the data produced by the
		'''         query; never <code>null</code> </returns>
		''' <exception cref="SQLException"> if a database access error occurs;
		''' this method is called on a closed  <code>PreparedStatement</code> or the SQL
		'''            statement does not return a <code>ResultSet</code> object </exception>
		''' <exception cref="SQLTimeoutException"> when the driver has determined that the
		''' timeout value that was specified by the {@code setQueryTimeout}
		''' method has been exceeded and has at least attempted to cancel
		''' the currently running {@code Statement} </exception>
		Function executeQuery() As ResultSet

		''' <summary>
		''' Executes the SQL statement in this <code>PreparedStatement</code> object,
		''' which must be an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
		''' <code>DELETE</code>; or an SQL statement that returns nothing,
		''' such as a DDL statement.
		''' </summary>
		''' <returns> either (1) the row count for SQL Data Manipulation Language (DML) statements
		'''         or (2) 0 for SQL statements that return nothing </returns>
		''' <exception cref="SQLException"> if a database access error occurs;
		''' this method is called on a closed  <code>PreparedStatement</code>
		''' or the SQL statement returns a <code>ResultSet</code> object </exception>
		''' <exception cref="SQLTimeoutException"> when the driver has determined that the
		''' timeout value that was specified by the {@code setQueryTimeout}
		''' method has been exceeded and has at least attempted to cancel
		''' the currently running {@code Statement} </exception>
		Function executeUpdate() As Integer

		''' <summary>
		''' Sets the designated parameter to SQL <code>NULL</code>.
		''' 
		''' <P><B>Note:</B> You must specify the parameter's SQL type.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="sqlType"> the SQL type code defined in <code>java.sql.Types</code> </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException"> if <code>sqlType</code> is
		''' a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
		''' <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
		''' <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
		'''  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
		''' or  <code>STRUCT</code> data type and the JDBC driver does not support
		''' this data type </exception>
		Sub setNull(ByVal parameterIndex As Integer, ByVal sqlType As Integer)

		''' <summary>
		''' Sets the designated parameter to the given Java <code>boolean</code> value.
		''' The driver converts this
		''' to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement;
		''' if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setBoolean(ByVal parameterIndex As Integer, ByVal x As Boolean)

		''' <summary>
		''' Sets the designated parameter to the given Java <code>byte</code> value.
		''' The driver converts this
		''' to an SQL <code>TINYINT</code> value when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setByte(ByVal parameterIndex As Integer, ByVal x As SByte)

		''' <summary>
		''' Sets the designated parameter to the given Java <code>short</code> value.
		''' The driver converts this
		''' to an SQL <code>SMALLINT</code> value when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setShort(ByVal parameterIndex As Integer, ByVal x As Short)

		''' <summary>
		''' Sets the designated parameter to the given Java <code>int</code> value.
		''' The driver converts this
		''' to an SQL <code>INTEGER</code> value when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setInt(ByVal parameterIndex As Integer, ByVal x As Integer)

		''' <summary>
		''' Sets the designated parameter to the given Java <code>long</code> value.
		''' The driver converts this
		''' to an SQL <code>BIGINT</code> value when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setLong(ByVal parameterIndex As Integer, ByVal x As Long)

		''' <summary>
		''' Sets the designated parameter to the given Java <code>float</code> value.
		''' The driver converts this
		''' to an SQL <code>REAL</code> value when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setFloat(ByVal parameterIndex As Integer, ByVal x As Single)

		''' <summary>
		''' Sets the designated parameter to the given Java <code>double</code> value.
		''' The driver converts this
		''' to an SQL <code>DOUBLE</code> value when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setDouble(ByVal parameterIndex As Integer, ByVal x As Double)

		''' <summary>
		''' Sets the designated parameter to the given <code>java.math.BigDecimal</code> value.
		''' The driver converts this to an SQL <code>NUMERIC</code> value when
		''' it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setBigDecimal(ByVal parameterIndex As Integer, ByVal x As Decimal)

		''' <summary>
		''' Sets the designated parameter to the given Java <code>String</code> value.
		''' The driver converts this
		''' to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
		''' (depending on the argument's
		''' size relative to the driver's limits on <code>VARCHAR</code> values)
		''' when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setString(ByVal parameterIndex As Integer, ByVal x As String)

		''' <summary>
		''' Sets the designated parameter to the given Java array of bytes.  The driver converts
		''' this to an SQL <code>VARBINARY</code> or <code>LONGVARBINARY</code>
		''' (depending on the argument's size relative to the driver's limits on
		''' <code>VARBINARY</code> values) when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setBytes(ByVal parameterIndex As Integer, ByVal x As SByte())

		''' <summary>
		''' Sets the designated parameter to the given <code>java.sql.Date</code> value
		''' using the default time zone of the virtual machine that is running
		''' the application.
		''' The driver converts this
		''' to an SQL <code>DATE</code> value when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setDate(ByVal parameterIndex As Integer, ByVal x As java.sql.Date)

		''' <summary>
		''' Sets the designated parameter to the given <code>java.sql.Time</code> value.
		''' The driver converts this
		''' to an SQL <code>TIME</code> value when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setTime(ByVal parameterIndex As Integer, ByVal x As java.sql.Time)

		''' <summary>
		''' Sets the designated parameter to the given <code>java.sql.Timestamp</code> value.
		''' The driver
		''' converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the
		''' database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code>      </exception>
		Sub setTimestamp(ByVal parameterIndex As Integer, ByVal x As java.sql.Timestamp)

		''' <summary>
		''' Sets the designated parameter to the given input stream, which will have
		''' the specified number of bytes.
		''' When a very large ASCII value is input to a <code>LONGVARCHAR</code>
		''' parameter, it may be more practical to send it via a
		''' <code>java.io.InputStream</code>. Data will be read from the stream
		''' as needed until end-of-file is reached.  The JDBC driver will
		''' do any necessary conversion from ASCII to the database char format.
		''' 
		''' <P><B>Note:</B> This stream object can either be a standard
		''' Java stream object or your own subclass that implements the
		''' standard interface.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the Java input stream that contains the ASCII parameter value </param>
		''' <param name="length"> the number of bytes in the stream </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setAsciiStream(ByVal parameterIndex As Integer, ByVal x As java.io.InputStream, ByVal length As Integer)

		''' <summary>
		''' Sets the designated parameter to the given input stream, which
		''' will have the specified number of bytes.
		''' 
		''' When a very large Unicode value is input to a <code>LONGVARCHAR</code>
		''' parameter, it may be more practical to send it via a
		''' <code>java.io.InputStream</code> object. The data will be read from the
		''' stream as needed until end-of-file is reached.  The JDBC driver will
		''' do any necessary conversion from Unicode to the database char format.
		''' 
		''' The byte format of the Unicode stream must be a Java UTF-8, as defined in the
		''' Java Virtual Machine Specification.
		''' 
		''' <P><B>Note:</B> This stream object can either be a standard
		''' Java stream object or your own subclass that implements the
		''' standard interface.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> a <code>java.io.InputStream</code> object that contains the
		'''        Unicode parameter value </param>
		''' <param name="length"> the number of bytes in the stream </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException"> if the JDBC driver does not support
		''' this method </exception>
		''' @deprecated Use {@code setCharacterStream} 
		<Obsolete("Use {@code setCharacterStream}")> _
		Sub setUnicodeStream(ByVal parameterIndex As Integer, ByVal x As java.io.InputStream, ByVal length As Integer)

		''' <summary>
		''' Sets the designated parameter to the given input stream, which will have
		''' the specified number of bytes.
		''' When a very large binary value is input to a <code>LONGVARBINARY</code>
		''' parameter, it may be more practical to send it via a
		''' <code>java.io.InputStream</code> object. The data will be read from the
		''' stream as needed until end-of-file is reached.
		''' 
		''' <P><B>Note:</B> This stream object can either be a standard
		''' Java stream object or your own subclass that implements the
		''' standard interface.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the java input stream which contains the binary parameter value </param>
		''' <param name="length"> the number of bytes in the stream </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub setBinaryStream(ByVal parameterIndex As Integer, ByVal x As java.io.InputStream, ByVal length As Integer)

		''' <summary>
		''' Clears the current parameter values immediately.
		''' <P>In general, parameter values remain in force for repeated use of a
		''' statement. Setting a parameter value automatically clears its
		''' previous value.  However, in some cases it is useful to immediately
		''' release the resources used by the current parameter values; this can
		''' be done by calling the method <code>clearParameters</code>.
		''' </summary>
		''' <exception cref="SQLException"> if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		Sub clearParameters()

		'----------------------------------------------------------------------
		' Advanced features:

	   ''' <summary>
	   ''' Sets the value of the designated parameter with the given object.
	   ''' 
	   ''' This method is similar to {@link #setObject(int parameterIndex,
	   ''' Object x, int targetSqlType, int scaleOrLength)},
	   ''' except that it assumes a scale of zero.
	   ''' </summary>
	   ''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
	   ''' <param name="x"> the object containing the input parameter value </param>
	   ''' <param name="targetSqlType"> the SQL type (as defined in java.sql.Types) to be
	   '''                      sent to the database </param>
	   ''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
	   ''' marker in the SQL statement; if a database access error occurs or this
	   ''' method is called on a closed PreparedStatement </exception>
	   ''' <exception cref="SQLFeatureNotSupportedException"> if
	   ''' the JDBC driver does not support the specified targetSqlType </exception>
	   ''' <seealso cref= Types </seealso>
		Sub setObject(ByVal parameterIndex As Integer, ByVal x As Object, ByVal targetSqlType As Integer)

		''' <summary>
		''' <p>Sets the value of the designated parameter using the given object.
		''' 
		''' <p>The JDBC specification specifies a standard mapping from
		''' Java <code>Object</code> types to SQL types.  The given argument
		''' will be converted to the corresponding SQL type before being
		''' sent to the database.
		''' 
		''' <p>Note that this method may be used to pass datatabase-
		''' specific abstract data types, by using a driver-specific Java
		''' type.
		''' 
		''' If the object is of a class implementing the interface <code>SQLData</code>,
		''' the JDBC driver should call the method <code>SQLData.writeSQL</code>
		''' to write it to the SQL data stream.
		''' If, on the other hand, the object is of a class implementing
		''' <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
		'''  <code>Struct</code>, <code>java.net.URL</code>, <code>RowId</code>, <code>SQLXML</code>
		''' or <code>Array</code>, the driver should pass it to the database as a
		''' value of the corresponding SQL type.
		''' <P>
		''' <b>Note:</b> Not all databases allow for a non-typed Null to be sent to
		''' the backend. For maximum portability, the <code>setNull</code> or the
		''' <code>setObject(int parameterIndex, Object x, int sqlType)</code>
		''' method should be used
		''' instead of <code>setObject(int parameterIndex, Object x)</code>.
		''' <p>
		''' <b>Note:</b> This method throws an exception if there is an ambiguity, for example, if the
		''' object is of a class implementing more than one of the interfaces named above.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the object containing the input parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs;
		'''  this method is called on a closed <code>PreparedStatement</code>
		''' or the type of the given object is ambiguous </exception>
		Sub setObject(ByVal parameterIndex As Integer, ByVal x As Object)

		''' <summary>
		''' Executes the SQL statement in this <code>PreparedStatement</code> object,
		''' which may be any kind of SQL statement.
		''' Some prepared statements return multiple results; the <code>execute</code>
		''' method handles these complex statements as well as the simpler
		''' form of statements handled by the methods <code>executeQuery</code>
		''' and <code>executeUpdate</code>.
		''' <P>
		''' The <code>execute</code> method returns a <code>boolean</code> to
		''' indicate the form of the first result.  You must call either the method
		''' <code>getResultSet</code> or <code>getUpdateCount</code>
		''' to retrieve the result; you must call <code>getMoreResults</code> to
		''' move to any subsequent result(s).
		''' </summary>
		''' <returns> <code>true</code> if the first result is a <code>ResultSet</code>
		'''         object; <code>false</code> if the first result is an update
		'''         count or there is no result </returns>
		''' <exception cref="SQLException"> if a database access error occurs;
		''' this method is called on a closed <code>PreparedStatement</code>
		''' or an argument is supplied to this method </exception>
		''' <exception cref="SQLTimeoutException"> when the driver has determined that the
		''' timeout value that was specified by the {@code setQueryTimeout}
		''' method has been exceeded and has at least attempted to cancel
		''' the currently running {@code Statement} </exception>
		''' <seealso cref= Statement#execute </seealso>
		''' <seealso cref= Statement#getResultSet </seealso>
		''' <seealso cref= Statement#getUpdateCount </seealso>
		''' <seealso cref= Statement#getMoreResults
		'''  </seealso>
		Function execute() As Boolean

		'--------------------------JDBC 2.0-----------------------------

		''' <summary>
		''' Adds a set of parameters to this <code>PreparedStatement</code>
		''' object's batch of commands.
		''' </summary>
		''' <exception cref="SQLException"> if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <seealso cref= Statement#addBatch
		''' @since 1.2 </seealso>
		Sub addBatch()

		''' <summary>
		''' Sets the designated parameter to the given <code>Reader</code>
		''' object, which is the given number of characters java.lang.[Long].
		''' When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
		''' parameter, it may be more practical to send it via a
		''' <code>java.io.Reader</code> object. The data will be read from the stream
		''' as needed until end-of-file is reached.  The JDBC driver will
		''' do any necessary conversion from UNICODE to the database char format.
		''' 
		''' <P><B>Note:</B> This stream object can either be a standard
		''' Java stream object or your own subclass that implements the
		''' standard interface.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="reader"> the <code>java.io.Reader</code> object that contains the
		'''        Unicode data </param>
		''' <param name="length"> the number of characters in the stream </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code>
		''' @since 1.2 </exception>
		Sub setCharacterStream(ByVal parameterIndex As Integer, ByVal reader As java.io.Reader, ByVal length As Integer)

		''' <summary>
		''' Sets the designated parameter to the given
		'''  <code>REF(&lt;structured-type&gt;)</code> value.
		''' The driver converts this to an SQL <code>REF</code> value when it
		''' sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> an SQL <code>REF</code> value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' @since 1.2 </exception>
		Sub setRef(ByVal parameterIndex As Integer, ByVal x As Ref)

		''' <summary>
		''' Sets the designated parameter to the given <code>java.sql.Blob</code> object.
		''' The driver converts this to an SQL <code>BLOB</code> value when it
		''' sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> a <code>Blob</code> object that maps an SQL <code>BLOB</code> value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' @since 1.2 </exception>
		Sub setBlob(ByVal parameterIndex As Integer, ByVal x As Blob)

		''' <summary>
		''' Sets the designated parameter to the given <code>java.sql.Clob</code> object.
		''' The driver converts this to an SQL <code>CLOB</code> value when it
		''' sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> a <code>Clob</code> object that maps an SQL <code>CLOB</code> value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' @since 1.2 </exception>
		Sub setClob(ByVal parameterIndex As Integer, ByVal x As Clob)

		''' <summary>
		''' Sets the designated parameter to the given <code>java.sql.Array</code> object.
		''' The driver converts this to an SQL <code>ARRAY</code> value when it
		''' sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> an <code>Array</code> object that maps an SQL <code>ARRAY</code> value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' @since 1.2 </exception>
		Sub setArray(ByVal parameterIndex As Integer, ByVal x As Array)

		''' <summary>
		''' Retrieves a <code>ResultSetMetaData</code> object that contains
		''' information about the columns of the <code>ResultSet</code> object
		''' that will be returned when this <code>PreparedStatement</code> object
		''' is executed.
		''' <P>
		''' Because a <code>PreparedStatement</code> object is precompiled, it is
		''' possible to know about the <code>ResultSet</code> object that it will
		''' return without having to execute it.  Consequently, it is possible
		''' to invoke the method <code>getMetaData</code> on a
		''' <code>PreparedStatement</code> object rather than waiting to execute
		''' it and then invoking the <code>ResultSet.getMetaData</code> method
		''' on the <code>ResultSet</code> object that is returned.
		''' <P>
		''' <B>NOTE:</B> Using this method may be expensive for some drivers due
		''' to the lack of underlying DBMS support.
		''' </summary>
		''' <returns> the description of a <code>ResultSet</code> object's columns or
		'''         <code>null</code> if the driver cannot return a
		'''         <code>ResultSetMetaData</code> object </returns>
		''' <exception cref="SQLException"> if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException"> if the JDBC driver does not support
		''' this method
		''' @since 1.2 </exception>
		ReadOnly Property metaData As ResultSetMetaData

		''' <summary>
		''' Sets the designated parameter to the given <code>java.sql.Date</code> value,
		''' using the given <code>Calendar</code> object.  The driver uses
		''' the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,
		''' which the driver then sends to the database.  With
		''' a <code>Calendar</code> object, the driver can calculate the date
		''' taking into account a custom timezone.  If no
		''' <code>Calendar</code> object is specified, the driver uses the default
		''' timezone, which is that of the virtual machine running the application.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <param name="cal"> the <code>Calendar</code> object the driver will use
		'''            to construct the date </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code>
		''' @since 1.2 </exception>
		Sub setDate(ByVal parameterIndex As Integer, ByVal x As java.sql.Date, ByVal cal As DateTime?)

		''' <summary>
		''' Sets the designated parameter to the given <code>java.sql.Time</code> value,
		''' using the given <code>Calendar</code> object.  The driver uses
		''' the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,
		''' which the driver then sends to the database.  With
		''' a <code>Calendar</code> object, the driver can calculate the time
		''' taking into account a custom timezone.  If no
		''' <code>Calendar</code> object is specified, the driver uses the default
		''' timezone, which is that of the virtual machine running the application.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <param name="cal"> the <code>Calendar</code> object the driver will use
		'''            to construct the time </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code>
		''' @since 1.2 </exception>
		Sub setTime(ByVal parameterIndex As Integer, ByVal x As java.sql.Time, ByVal cal As DateTime?)

		''' <summary>
		''' Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,
		''' using the given <code>Calendar</code> object.  The driver uses
		''' the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,
		''' which the driver then sends to the database.  With a
		'''  <code>Calendar</code> object, the driver can calculate the timestamp
		''' taking into account a custom timezone.  If no
		''' <code>Calendar</code> object is specified, the driver uses the default
		''' timezone, which is that of the virtual machine running the application.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <param name="cal"> the <code>Calendar</code> object the driver will use
		'''            to construct the timestamp </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code>
		''' @since 1.2 </exception>
		Sub setTimestamp(ByVal parameterIndex As Integer, ByVal x As java.sql.Timestamp, ByVal cal As DateTime?)

		''' <summary>
		''' Sets the designated parameter to SQL <code>NULL</code>.
		''' This version of the method <code>setNull</code> should
		''' be used for user-defined types and REF type parameters.  Examples
		''' of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
		''' named array types.
		''' 
		''' <P><B>Note:</B> To be portable, applications must give the
		''' SQL type code and the fully-qualified SQL type name when specifying
		''' a NULL user-defined or REF parameter.  In the case of a user-defined type
		''' the name is the type name of the parameter itself.  For a REF
		''' parameter, the name is the type name of the referenced type.  If
		''' a JDBC driver does not need the type code or type name information,
		''' it may ignore it.
		''' 
		''' Although it is intended for user-defined and Ref parameters,
		''' this method may be used to set a null parameter of any JDBC type.
		''' If the parameter does not have a user-defined or REF type, the given
		''' typeName is ignored.
		''' 
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="sqlType"> a value from <code>java.sql.Types</code> </param>
		''' <param name="typeName"> the fully-qualified name of an SQL user-defined type;
		'''  ignored if the parameter is not a user-defined type or REF </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException"> if <code>sqlType</code> is
		''' a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
		''' <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
		''' <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
		'''  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
		''' or  <code>STRUCT</code> data type and the JDBC driver does not support
		''' this data type or if the JDBC driver does not support this method
		''' @since 1.2 </exception>
	  Sub setNull(ByVal parameterIndex As Integer, ByVal sqlType As Integer, ByVal typeName As String)

		'------------------------- JDBC 3.0 -----------------------------------

		''' <summary>
		''' Sets the designated parameter to the given <code>java.net.URL</code> value.
		''' The driver converts this to an SQL <code>DATALINK</code> value
		''' when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the <code>java.net.URL</code> object to be set </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' @since 1.4 </exception>
		Sub setURL(ByVal parameterIndex As Integer, ByVal x As java.net.URL)

		''' <summary>
		''' Retrieves the number, types and properties of this
		''' <code>PreparedStatement</code> object's parameters.
		''' </summary>
		''' <returns> a <code>ParameterMetaData</code> object that contains information
		'''         about the number, types and properties for each
		'''  parameter marker of this <code>PreparedStatement</code> object </returns>
		''' <exception cref="SQLException"> if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <seealso cref= ParameterMetaData
		''' @since 1.4 </seealso>
		ReadOnly Property parameterMetaData As ParameterMetaData

		'------------------------- JDBC 4.0 -----------------------------------

		''' <summary>
		''' Sets the designated parameter to the given <code>java.sql.RowId</code> object. The
		''' driver converts this to a SQL <code>ROWID</code> value when it sends it
		''' to the database
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' 
		''' @since 1.6 </exception>
		Sub setRowId(ByVal parameterIndex As Integer, ByVal x As RowId)


		''' <summary>
		''' Sets the designated parameter to the given <code>String</code> object.
		''' The driver converts this to a SQL <code>NCHAR</code> or
		''' <code>NVARCHAR</code> or <code>LONGNVARCHAR</code> value
		''' (depending on the argument's
		''' size relative to the driver's limits on <code>NVARCHAR</code> values)
		''' when it sends it to the database.
		''' </summary>
		''' <param name="parameterIndex"> of the first parameter is 1, the second is 2, ... </param>
		''' <param name="value"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if the driver does not support national
		'''         character sets;  if the driver can detect that a data conversion
		'''  error could occur; if a database access error occurs; or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' @since 1.6 </exception>
		 Sub setNString(ByVal parameterIndex As Integer, ByVal value As String)

		''' <summary>
		''' Sets the designated parameter to a <code>Reader</code> object. The
		''' <code>Reader</code> reads the data till end-of-file is reached. The
		''' driver does the necessary conversion from Java character format to
		''' the national character set in the database. </summary>
		''' <param name="parameterIndex"> of the first parameter is 1, the second is 2, ... </param>
		''' <param name="value"> the parameter value </param>
		''' <param name="length"> the number of characters in the parameter data. </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if the driver does not support national
		'''         character sets;  if the driver can detect that a data conversion
		'''  error could occur; if a database access error occurs; or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' @since 1.6 </exception>
		 Sub setNCharacterStream(ByVal parameterIndex As Integer, ByVal value As java.io.Reader, ByVal length As Long)

		''' <summary>
		''' Sets the designated parameter to a <code>java.sql.NClob</code> object. The driver converts this to a
		''' SQL <code>NCLOB</code> value when it sends it to the database. </summary>
		''' <param name="parameterIndex"> of the first parameter is 1, the second is 2, ... </param>
		''' <param name="value"> the parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if the driver does not support national
		'''         character sets;  if the driver can detect that a data conversion
		'''  error could occur; if a database access error occurs; or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' @since 1.6 </exception>
		 Sub setNClob(ByVal parameterIndex As Integer, ByVal value As NClob)

		''' <summary>
		''' Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number
		''' of characters specified by length otherwise a <code>SQLException</code> will be
		''' generated when the <code>PreparedStatement</code> is executed.
		''' This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
		''' because it informs the driver that the parameter value should be sent to
		''' the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
		''' driver may have to do extra work to determine whether the parameter
		''' data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code> </summary>
		''' <param name="parameterIndex"> index of the first parameter is 1, the second is 2, ... </param>
		''' <param name="reader"> An object that contains the data to set the parameter value to. </param>
		''' <param name="length"> the number of characters in the parameter data. </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs; this method is called on
		''' a closed <code>PreparedStatement</code> or if the length specified is less than zero.
		''' </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' @since 1.6 </exception>
		 Sub setClob(ByVal parameterIndex As Integer, ByVal reader As java.io.Reader, ByVal length As Long)

		''' <summary>
		''' Sets the designated parameter to a <code>InputStream</code> object.  The inputstream must contain  the number
		''' of characters specified by length otherwise a <code>SQLException</code> will be
		''' generated when the <code>PreparedStatement</code> is executed.
		''' This method differs from the <code>setBinaryStream (int, InputStream, int)</code>
		''' method because it informs the driver that the parameter value should be
		''' sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
		''' the driver may have to do extra work to determine whether the parameter
		''' data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code> </summary>
		''' <param name="parameterIndex"> index of the first parameter is 1,
		''' the second is 2, ... </param>
		''' <param name="inputStream"> An object that contains the data to set the parameter
		''' value to. </param>
		''' <param name="length"> the number of bytes in the parameter data. </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs;
		''' this method is called on a closed <code>PreparedStatement</code>;
		'''  if the length specified
		''' is less than zero or if the number of bytes in the inputstream does not match
		''' the specified length. </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' 
		''' @since 1.6 </exception>
		 Sub setBlob(ByVal parameterIndex As Integer, ByVal inputStream As java.io.InputStream, ByVal length As Long)
		''' <summary>
		''' Sets the designated parameter to a <code>Reader</code> object.  The reader must contain  the number
		''' of characters specified by length otherwise a <code>SQLException</code> will be
		''' generated when the <code>PreparedStatement</code> is executed.
		''' This method differs from the <code>setCharacterStream (int, Reader, int)</code> method
		''' because it informs the driver that the parameter value should be sent to
		''' the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
		''' driver may have to do extra work to determine whether the parameter
		''' data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code> </summary>
		''' <param name="parameterIndex"> index of the first parameter is 1, the second is 2, ... </param>
		''' <param name="reader"> An object that contains the data to set the parameter value to. </param>
		''' <param name="length"> the number of characters in the parameter data. </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if the length specified is less than zero;
		''' if the driver does not support national character sets;
		''' if the driver can detect that a data conversion
		'''  error could occur;  if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' 
		''' @since 1.6 </exception>
		 Sub setNClob(ByVal parameterIndex As Integer, ByVal reader As java.io.Reader, ByVal length As Long)

		 ''' <summary>
		 ''' Sets the designated parameter to the given <code>java.sql.SQLXML</code> object.
		 ''' The driver converts this to an
		 ''' SQL <code>XML</code> value when it sends it to the database.
		 ''' <p>
		 ''' </summary>
		 ''' <param name="parameterIndex"> index of the first parameter is 1, the second is 2, ... </param>
		 ''' <param name="xmlObject"> a <code>SQLXML</code> object that maps an SQL <code>XML</code> value </param>
		 ''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		 ''' marker in the SQL statement; if a database access error occurs;
		 '''  this method is called on a closed <code>PreparedStatement</code>
		 ''' or the <code>java.xml.transform.Result</code>,
		 '''  <code>Writer</code> or <code>OutputStream</code> has not been closed for
		 ''' the <code>SQLXML</code> object </exception>
		 ''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		 ''' 
		 ''' @since 1.6 </exception>
		 Sub setSQLXML(ByVal parameterIndex As Integer, ByVal xmlObject As SQLXML)

		''' <summary>
		''' <p>Sets the value of the designated parameter with the given object.
		''' 
		''' If the second argument is an <code>InputStream</code> then the stream must contain
		''' the number of bytes specified by scaleOrLength.  If the second argument is a
		''' <code>Reader</code> then the reader must contain the number of characters specified
		''' by scaleOrLength. If these conditions are not true the driver will generate a
		''' <code>SQLException</code> when the prepared statement is executed.
		''' 
		''' <p>The given Java object will be converted to the given targetSqlType
		''' before being sent to the database.
		''' 
		''' If the object has a custom mapping (is of a class implementing the
		''' interface <code>SQLData</code>),
		''' the JDBC driver should call the method <code>SQLData.writeSQL</code> to
		''' write it to the SQL data stream.
		''' If, on the other hand, the object is of a class implementing
		''' <code>Ref</code>, <code>Blob</code>, <code>Clob</code>,  <code>NClob</code>,
		'''  <code>Struct</code>, <code>java.net.URL</code>,
		''' or <code>Array</code>, the driver should pass it to the database as a
		''' value of the corresponding SQL type.
		''' 
		''' <p>Note that this method may be used to pass database-specific
		''' abstract data types.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the object containing the input parameter value </param>
		''' <param name="targetSqlType"> the SQL type (as defined in java.sql.Types) to be
		''' sent to the database. The scale argument may further qualify this type. </param>
		''' <param name="scaleOrLength"> for <code>java.sql.Types.DECIMAL</code>
		'''          or <code>java.sql.Types.NUMERIC types</code>,
		'''          this is the number of digits after the decimal point. For
		'''          Java Object types <code>InputStream</code> and <code>Reader</code>,
		'''          this is the length
		'''          of the data in the stream or reader.  For all other types,
		'''          this value will be ignored. </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs;
		''' this method is called on a closed <code>PreparedStatement</code> or
		'''            if the Java Object specified by x is an InputStream
		'''            or Reader object and the value of the scale parameter is less
		'''            than zero </exception>
		''' <exception cref="SQLFeatureNotSupportedException"> if
		''' the JDBC driver does not support the specified targetSqlType </exception>
		''' <seealso cref= Types
		'''  </seealso>
		Sub setObject(ByVal parameterIndex As Integer, ByVal x As Object, ByVal targetSqlType As Integer, ByVal scaleOrLength As Integer)
	   ''' <summary>
	   ''' Sets the designated parameter to the given input stream, which will have
	   ''' the specified number of bytes.
	   ''' When a very large ASCII value is input to a <code>LONGVARCHAR</code>
	   ''' parameter, it may be more practical to send it via a
	   ''' <code>java.io.InputStream</code>. Data will be read from the stream
	   ''' as needed until end-of-file is reached.  The JDBC driver will
	   ''' do any necessary conversion from ASCII to the database char format.
	   '''  
	   ''' <P><B>Note:</B> This stream object can either be a standard
	   ''' Java stream object or your own subclass that implements the
	   ''' standard interface.
	   ''' </summary>
	   ''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
	   ''' <param name="x"> the Java input stream that contains the ASCII parameter value </param>
	   ''' <param name="length"> the number of bytes in the stream </param>
	   ''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
	   ''' marker in the SQL statement; if a database access error occurs or
	   ''' this method is called on a closed <code>PreparedStatement</code>
	   ''' @since 1.6 </exception>
		Sub setAsciiStream(ByVal parameterIndex As Integer, ByVal x As java.io.InputStream, ByVal length As Long)
		''' <summary>
		''' Sets the designated parameter to the given input stream, which will have
		''' the specified number of bytes.
		''' When a very large binary value is input to a <code>LONGVARBINARY</code>
		''' parameter, it may be more practical to send it via a
		''' <code>java.io.InputStream</code> object. The data will be read from the
		''' stream as needed until end-of-file is reached.
		''' 
		''' <P><B>Note:</B> This stream object can either be a standard
		''' Java stream object or your own subclass that implements the
		''' standard interface.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the java input stream which contains the binary parameter value </param>
		''' <param name="length"> the number of bytes in the stream </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code>
		''' @since 1.6 </exception>
		Sub setBinaryStream(ByVal parameterIndex As Integer, ByVal x As java.io.InputStream, ByVal length As Long)
			''' <summary>
			''' Sets the designated parameter to the given <code>Reader</code>
			''' object, which is the given number of characters java.lang.[Long].
			''' When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
			''' parameter, it may be more practical to send it via a
			''' <code>java.io.Reader</code> object. The data will be read from the stream
			''' as needed until end-of-file is reached.  The JDBC driver will
			''' do any necessary conversion from UNICODE to the database char format.
			''' 
			''' <P><B>Note:</B> This stream object can either be a standard
			''' Java stream object or your own subclass that implements the
			''' standard interface.
			''' </summary>
			''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
			''' <param name="reader"> the <code>java.io.Reader</code> object that contains the
			'''        Unicode data </param>
			''' <param name="length"> the number of characters in the stream </param>
			''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
			''' marker in the SQL statement; if a database access error occurs or
			''' this method is called on a closed <code>PreparedStatement</code>
			''' @since 1.6 </exception>
		Sub setCharacterStream(ByVal parameterIndex As Integer, ByVal reader As java.io.Reader, ByVal length As Long)
		'-----
		''' <summary>
		''' Sets the designated parameter to the given input stream.
		''' When a very large ASCII value is input to a <code>LONGVARCHAR</code>
		''' parameter, it may be more practical to send it via a
		''' <code>java.io.InputStream</code>. Data will be read from the stream
		''' as needed until end-of-file is reached.  The JDBC driver will
		''' do any necessary conversion from ASCII to the database char format.
		''' 
		''' <P><B>Note:</B> This stream object can either be a standard
		''' Java stream object or your own subclass that implements the
		''' standard interface.
		''' <P><B>Note:</B> Consult your JDBC driver documentation to determine if
		''' it might be more efficient to use a version of
		''' <code>setAsciiStream</code> which takes a length parameter.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the Java input stream that contains the ASCII parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' @since 1.6 </exception>
		Sub setAsciiStream(ByVal parameterIndex As Integer, ByVal x As java.io.InputStream)
		''' <summary>
		''' Sets the designated parameter to the given input stream.
		''' When a very large binary value is input to a <code>LONGVARBINARY</code>
		''' parameter, it may be more practical to send it via a
		''' <code>java.io.InputStream</code> object. The data will be read from the
		''' stream as needed until end-of-file is reached.
		''' 
		''' <P><B>Note:</B> This stream object can either be a standard
		''' Java stream object or your own subclass that implements the
		''' standard interface.
		''' <P><B>Note:</B> Consult your JDBC driver documentation to determine if
		''' it might be more efficient to use a version of
		''' <code>setBinaryStream</code> which takes a length parameter.
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the java input stream which contains the binary parameter value </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' @since 1.6 </exception>
		Sub setBinaryStream(ByVal parameterIndex As Integer, ByVal x As java.io.InputStream)
			''' <summary>
			''' Sets the designated parameter to the given <code>Reader</code>
			''' object.
			''' When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
			''' parameter, it may be more practical to send it via a
			''' <code>java.io.Reader</code> object. The data will be read from the stream
			''' as needed until end-of-file is reached.  The JDBC driver will
			''' do any necessary conversion from UNICODE to the database char format.
			''' 
			''' <P><B>Note:</B> This stream object can either be a standard
			''' Java stream object or your own subclass that implements the
			''' standard interface.
			''' <P><B>Note:</B> Consult your JDBC driver documentation to determine if
			''' it might be more efficient to use a version of
			''' <code>setCharacterStream</code> which takes a length parameter.
			''' </summary>
			''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
			''' <param name="reader"> the <code>java.io.Reader</code> object that contains the
			'''        Unicode data </param>
			''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
			''' marker in the SQL statement; if a database access error occurs or
			''' this method is called on a closed <code>PreparedStatement</code> </exception>
			''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
			''' @since 1.6 </exception>
		Sub setCharacterStream(ByVal parameterIndex As Integer, ByVal reader As java.io.Reader)
	  ''' <summary>
	  ''' Sets the designated parameter to a <code>Reader</code> object. The
	  ''' <code>Reader</code> reads the data till end-of-file is reached. The
	  ''' driver does the necessary conversion from Java character format to
	  ''' the national character set in the database.
	  ''' 
	  ''' <P><B>Note:</B> This stream object can either be a standard
	  ''' Java stream object or your own subclass that implements the
	  ''' standard interface.
	  ''' <P><B>Note:</B> Consult your JDBC driver documentation to determine if
	  ''' it might be more efficient to use a version of
	  ''' <code>setNCharacterStream</code> which takes a length parameter.
	  ''' </summary>
	  ''' <param name="parameterIndex"> of the first parameter is 1, the second is 2, ... </param>
	  ''' <param name="value"> the parameter value </param>
	  ''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
	  ''' marker in the SQL statement; if the driver does not support national
	  '''         character sets;  if the driver can detect that a data conversion
	  '''  error could occur; if a database access error occurs; or
	  ''' this method is called on a closed <code>PreparedStatement</code> </exception>
	  ''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
	  ''' @since 1.6 </exception>
		 Sub setNCharacterStream(ByVal parameterIndex As Integer, ByVal value As java.io.Reader)

		''' <summary>
		''' Sets the designated parameter to a <code>Reader</code> object.
		''' This method differs from the <code>setCharacterStream (int, Reader)</code> method
		''' because it informs the driver that the parameter value should be sent to
		''' the server as a <code>CLOB</code>.  When the <code>setCharacterStream</code> method is used, the
		''' driver may have to do extra work to determine whether the parameter
		''' data should be sent to the server as a <code>LONGVARCHAR</code> or a <code>CLOB</code>
		''' 
		''' <P><B>Note:</B> Consult your JDBC driver documentation to determine if
		''' it might be more efficient to use a version of
		''' <code>setClob</code> which takes a length parameter.
		''' </summary>
		''' <param name="parameterIndex"> index of the first parameter is 1, the second is 2, ... </param>
		''' <param name="reader"> An object that contains the data to set the parameter value to. </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs; this method is called on
		''' a closed <code>PreparedStatement</code>or if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement
		''' </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' @since 1.6 </exception>
		 Sub setClob(ByVal parameterIndex As Integer, ByVal reader As java.io.Reader)

		''' <summary>
		''' Sets the designated parameter to a <code>InputStream</code> object.
		''' This method differs from the <code>setBinaryStream (int, InputStream)</code>
		''' method because it informs the driver that the parameter value should be
		''' sent to the server as a <code>BLOB</code>.  When the <code>setBinaryStream</code> method is used,
		''' the driver may have to do extra work to determine whether the parameter
		''' data should be sent to the server as a <code>LONGVARBINARY</code> or a <code>BLOB</code>
		''' 
		''' <P><B>Note:</B> Consult your JDBC driver documentation to determine if
		''' it might be more efficient to use a version of
		''' <code>setBlob</code> which takes a length parameter.
		''' </summary>
		''' <param name="parameterIndex"> index of the first parameter is 1,
		''' the second is 2, ... </param>
		''' <param name="inputStream"> An object that contains the data to set the parameter
		''' value to. </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement; if a database access error occurs;
		''' this method is called on a closed <code>PreparedStatement</code> or
		''' if parameterIndex does not correspond
		''' to a parameter marker in the SQL statement, </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' 
		''' @since 1.6 </exception>
		 Sub setBlob(ByVal parameterIndex As Integer, ByVal inputStream As java.io.InputStream)
		''' <summary>
		''' Sets the designated parameter to a <code>Reader</code> object.
		''' This method differs from the <code>setCharacterStream (int, Reader)</code> method
		''' because it informs the driver that the parameter value should be sent to
		''' the server as a <code>NCLOB</code>.  When the <code>setCharacterStream</code> method is used, the
		''' driver may have to do extra work to determine whether the parameter
		''' data should be sent to the server as a <code>LONGNVARCHAR</code> or a <code>NCLOB</code>
		''' <P><B>Note:</B> Consult your JDBC driver documentation to determine if
		''' it might be more efficient to use a version of
		''' <code>setNClob</code> which takes a length parameter.
		''' </summary>
		''' <param name="parameterIndex"> index of the first parameter is 1, the second is 2, ... </param>
		''' <param name="reader"> An object that contains the data to set the parameter value to. </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a parameter
		''' marker in the SQL statement;
		''' if the driver does not support national character sets;
		''' if the driver can detect that a data conversion
		'''  error could occur;  if a database access error occurs or
		''' this method is called on a closed <code>PreparedStatement</code> </exception>
		''' <exception cref="SQLFeatureNotSupportedException">  if the JDBC driver does not support this method
		''' 
		''' @since 1.6 </exception>
		 Sub setNClob(ByVal parameterIndex As Integer, ByVal reader As java.io.Reader)

		'------------------------- JDBC 4.2 -----------------------------------

		''' <summary>
		''' <p>Sets the value of the designated parameter with the given object.
		''' 
		''' If the second argument is an {@code InputStream} then the stream
		''' must contain the number of bytes specified by scaleOrLength.
		''' If the second argument is a {@code Reader} then the reader must
		''' contain the number of characters specified by scaleOrLength. If these
		''' conditions are not true the driver will generate a
		''' {@code SQLException} when the prepared statement is executed.
		''' 
		''' <p>The given Java object will be converted to the given targetSqlType
		''' before being sent to the database.
		''' 
		''' If the object has a custom mapping (is of a class implementing the
		''' interface {@code SQLData}),
		''' the JDBC driver should call the method {@code SQLData.writeSQL} to
		''' write it to the SQL data stream.
		''' If, on the other hand, the object is of a class implementing
		''' {@code Ref}, {@code Blob}, {@code Clob},  {@code NClob},
		'''  {@code Struct}, {@code java.net.URL},
		''' or {@code Array}, the driver should pass it to the database as a
		''' value of the corresponding SQL type.
		''' 
		''' <p>Note that this method may be used to pass database-specific
		''' abstract data types.
		''' <P>
		''' The default implementation will throw {@code SQLFeatureNotSupportedException}
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the object containing the input parameter value </param>
		''' <param name="targetSqlType"> the SQL type to be sent to the database. The
		''' scale argument may further qualify this type. </param>
		''' <param name="scaleOrLength"> for {@code java.sql.JDBCType.DECIMAL}
		'''          or {@code java.sql.JDBCType.NUMERIC types},
		'''          this is the number of digits after the decimal point. For
		'''          Java Object types {@code InputStream} and {@code Reader},
		'''          this is the length
		'''          of the data in the stream or reader.  For all other types,
		'''          this value will be ignored. </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a
		''' parameter marker in the SQL statement; if a database access error occurs
		''' or this method is called on a closed {@code PreparedStatement}  or
		'''            if the Java Object specified by x is an InputStream
		'''            or Reader object and the value of the scale parameter is less
		'''            than zero </exception>
		''' <exception cref="SQLFeatureNotSupportedException"> if
		''' the JDBC driver does not support the specified targetSqlType </exception>
		''' <seealso cref= JDBCType </seealso>
		''' <seealso cref= SQLType
		''' @since 1.8 </seealso>
		default Sub setObject(ByVal parameterIndex As Integer, ByVal x As Object, ByVal targetSqlType As SQLType, ByVal scaleOrLength As Integer)
			throw Function SQLFeatureNotSupportedException("setObject not implemented" ByVal  As ) As New

		''' <summary>
		''' Sets the value of the designated parameter with the given object.
		''' 
		''' This method is similar to {@link #setObject(int parameterIndex,
		''' Object x, SQLType targetSqlType, int scaleOrLength)},
		''' except that it assumes a scale of zero.
		''' <P>
		''' The default implementation will throw {@code SQLFeatureNotSupportedException}
		''' </summary>
		''' <param name="parameterIndex"> the first parameter is 1, the second is 2, ... </param>
		''' <param name="x"> the object containing the input parameter value </param>
		''' <param name="targetSqlType"> the SQL type to be sent to the database </param>
		''' <exception cref="SQLException"> if parameterIndex does not correspond to a
		''' parameter marker in the SQL statement; if a database access error occurs
		''' or this method is called on a closed {@code PreparedStatement} </exception>
		''' <exception cref="SQLFeatureNotSupportedException"> if
		''' the JDBC driver does not support the specified targetSqlType </exception>
		''' <seealso cref= JDBCType </seealso>
		''' <seealso cref= SQLType
		''' @since 1.8 </seealso>
		default Sub setObject(ByVal parameterIndex As Integer, ByVal x As Object, ByVal targetSqlType As SQLType)
			throw Function SQLFeatureNotSupportedException("setObject not implemented" ByVal  As ) As New

		''' <summary>
		''' Executes the SQL statement in this <code>PreparedStatement</code> object,
		''' which must be an SQL Data Manipulation Language (DML) statement,
		''' such as <code>INSERT</code>, <code>UPDATE</code> or
		''' <code>DELETE</code>; or an SQL statement that returns nothing,
		''' such as a DDL statement.
		''' <p>
		''' This method should be used when the returned row count may exceed
		''' <seealso cref="Integer#MAX_VALUE"/>.
		''' <p>
		''' The default implementation will throw {@code UnsupportedOperationException}
		''' </summary>
		''' <returns> either (1) the row count for SQL Data Manipulation Language
		''' (DML) statements or (2) 0 for SQL statements that return nothing </returns>
		''' <exception cref="SQLException"> if a database access error occurs;
		''' this method is called on a closed  <code>PreparedStatement</code>
		''' or the SQL statement returns a <code>ResultSet</code> object </exception>
		''' <exception cref="SQLTimeoutException"> when the driver has determined that the
		''' timeout value that was specified by the {@code setQueryTimeout}
		''' method has been exceeded and has at least attempted to cancel
		''' the currently running {@code Statement}
		''' @since 1.8 </exception>
		default Function executeLargeUpdate() As Long
			throw Function UnsupportedOperationException("executeLargeUpdate not implemented" ByVal  As ) As New
	End Interface

End Namespace