Imports System

'
' * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 

Namespace java.awt.event


	''' <summary>
	''' A low-level event which indicates that a Component has gained or lost the
	''' input focus. This low-level event is generated by a Component (such as a
	''' TextField). The event is passed to every <code>FocusListener</code> or
	''' <code>FocusAdapter</code> object which registered to receive such events
	''' using the Component's <code>addFocusListener</code> method. (<code>
	''' FocusAdapter</code> objects implement the <code>FocusListener</code>
	''' interface.) Each such listener object gets this <code>FocusEvent</code> when
	''' the event occurs.
	''' <p>
	''' There are two levels of focus events: permanent and temporary. Permanent
	''' focus change events occur when focus is directly moved from one Component to
	''' another, such as through a call to requestFocus() or as the user uses the
	''' TAB key to traverse Components. Temporary focus change events occur when
	''' focus is temporarily lost for a Component as the indirect result of another
	''' operation, such as Window deactivation or a Scrollbar drag. In this case,
	''' the original focus state will automatically be restored once that operation
	''' is finished, or, for the case of Window deactivation, when the Window is
	''' reactivated. Both permanent and temporary focus events are delivered using
	''' the FOCUS_GAINED and FOCUS_LOST event ids; the level may be distinguished in
	''' the event using the isTemporary() method.
	''' <p>
	''' An unspecified behavior will be caused if the {@code id} parameter
	''' of any particular {@code FocusEvent} instance is not
	''' in the range from {@code FOCUS_FIRST} to {@code FOCUS_LAST}.
	''' </summary>
	''' <seealso cref= FocusAdapter </seealso>
	''' <seealso cref= FocusListener </seealso>
	''' <seealso cref= <a href="https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html">Tutorial: Writing a Focus Listener</a>
	''' 
	''' @author Carl Quinn
	''' @author Amy Fowler
	''' @since 1.1 </seealso>
	Public Class FocusEvent
		Inherits ComponentEvent

		''' <summary>
		''' The first number in the range of ids used for focus events.
		''' </summary>
		Public Const FOCUS_FIRST As Integer = 1004

		''' <summary>
		''' The last number in the range of ids used for focus events.
		''' </summary>
		Public Const FOCUS_LAST As Integer = 1005

		''' <summary>
		''' This event indicates that the Component is now the focus owner.
		''' </summary>
		Public Const FOCUS_GAINED As Integer = FOCUS_FIRST 'Event.GOT_FOCUS

		''' <summary>
		''' This event indicates that the Component is no longer the focus owner.
		''' </summary>
		Public Shared ReadOnly FOCUS_LOST As Integer = 1 + FOCUS_FIRST 'Event.LOST_FOCUS

		''' <summary>
		''' A focus event can have two different levels, permanent and temporary.
		''' It will be set to true if some operation takes away the focus
		''' temporarily and intends on getting it back once the event is completed.
		''' Otherwise it will be set to false.
		''' 
		''' @serial </summary>
		''' <seealso cref= #isTemporary </seealso>
		Friend temporary As Boolean

		''' <summary>
		''' The other Component involved in this focus change. For a FOCUS_GAINED
		''' event, this is the Component that lost focus. For a FOCUS_LOST event,
		''' this is the Component that gained focus. If this focus change occurs
		''' with a native application, a Java application in a different VM, or with
		''' no other Component, then the opposite Component is null.
		''' </summary>
		''' <seealso cref= #getOppositeComponent
		''' @since 1.4 </seealso>
		<NonSerialized> _
		Friend opposite As java.awt.Component

	'    
	'     * JDK 1.1 serialVersionUID
	'     
		Private Const serialVersionUID As Long = 523753786457416396L

		''' <summary>
		''' Constructs a <code>FocusEvent</code> object with the
		''' specified temporary state and opposite <code>Component</code>.
		''' The opposite <code>Component</code> is the other
		''' <code>Component</code> involved in this focus change.
		''' For a <code>FOCUS_GAINED</code> event, this is the
		''' <code>Component</code> that lost focus. For a
		''' <code>FOCUS_LOST</code> event, this is the <code>Component</code>
		''' that gained focus. If this focus change occurs with a native
		''' application, with a Java application in a different VM,
		''' or with no other <code>Component</code>, then the opposite
		''' <code>Component</code> is <code>null</code>.
		''' <p> This method throws an
		''' <code>IllegalArgumentException</code> if <code>source</code>
		''' is <code>null</code>.
		''' </summary>
		''' <param name="source">     The <code>Component</code> that originated the event </param>
		''' <param name="id">         An integer indicating the type of event.
		'''                     For information on allowable values, see
		'''                     the class description for <seealso cref="FocusEvent"/> </param>
		''' <param name="temporary">  Equals <code>true</code> if the focus change is temporary;
		'''                   <code>false</code> otherwise </param>
		''' <param name="opposite">   The other Component involved in the focus change,
		'''                   or <code>null</code> </param>
		''' <exception cref="IllegalArgumentException"> if <code>source</code> equals {@code null} </exception>
		''' <seealso cref= #getSource() </seealso>
		''' <seealso cref= #getID() </seealso>
		''' <seealso cref= #isTemporary() </seealso>
		''' <seealso cref= #getOppositeComponent()
		''' @since 1.4 </seealso>
		Public Sub New(ByVal source As java.awt.Component, ByVal id As Integer, ByVal temporary As Boolean, ByVal opposite As java.awt.Component)
			MyBase.New(source, id)
			Me.temporary = temporary
			Me.opposite = opposite
		End Sub

		''' <summary>
		''' Constructs a <code>FocusEvent</code> object and identifies
		''' whether or not the change is temporary.
		''' <p> This method throws an
		''' <code>IllegalArgumentException</code> if <code>source</code>
		''' is <code>null</code>.
		''' </summary>
		''' <param name="source">    The <code>Component</code> that originated the event </param>
		''' <param name="id">        An integer indicating the type of event.
		'''                     For information on allowable values, see
		'''                     the class description for <seealso cref="FocusEvent"/> </param>
		''' <param name="temporary"> Equals <code>true</code> if the focus change is temporary;
		'''                  <code>false</code> otherwise </param>
		''' <exception cref="IllegalArgumentException"> if <code>source</code> equals {@code null} </exception>
		''' <seealso cref= #getSource() </seealso>
		''' <seealso cref= #getID() </seealso>
		''' <seealso cref= #isTemporary() </seealso>
		Public Sub New(ByVal source As java.awt.Component, ByVal id As Integer, ByVal temporary As Boolean)
			Me.New(source, id, temporary, Nothing)
		End Sub

		''' <summary>
		''' Constructs a <code>FocusEvent</code> object and identifies it
		''' as a permanent change in focus.
		''' <p> This method throws an
		''' <code>IllegalArgumentException</code> if <code>source</code>
		''' is <code>null</code>.
		''' </summary>
		''' <param name="source">    The <code>Component</code> that originated the event </param>
		''' <param name="id">        An integer indicating the type of event.
		'''                     For information on allowable values, see
		'''                     the class description for <seealso cref="FocusEvent"/> </param>
		''' <exception cref="IllegalArgumentException"> if <code>source</code> equals {@code null} </exception>
		''' <seealso cref= #getSource() </seealso>
		''' <seealso cref= #getID() </seealso>
		Public Sub New(ByVal source As java.awt.Component, ByVal id As Integer)
			Me.New(source, id, False)
		End Sub

		''' <summary>
		''' Identifies the focus change event as temporary or permanent.
		''' </summary>
		''' <returns> <code>true</code> if the focus change is temporary;
		'''         <code>false</code> otherwise </returns>
		Public Overridable Property temporary As Boolean
			Get
				Return temporary
			End Get
		End Property

		''' <summary>
		''' Returns the other Component involved in this focus change. For a
		''' FOCUS_GAINED event, this is the Component that lost focus. For a
		''' FOCUS_LOST event, this is the Component that gained focus. If this
		''' focus change occurs with a native application, with a Java application
		''' in a different VM or context, or with no other Component, then null is
		''' returned.
		''' </summary>
		''' <returns> the other Component involved in the focus change, or null
		''' @since 1.4 </returns>
		Public Overridable Property oppositeComponent As java.awt.Component
			Get
				If opposite Is Nothing Then Return Nothing
    
				Return If(sun.awt.SunToolkit.targetToAppContext(opposite) = sun.awt.AppContext.appContext, opposite, Nothing)
			End Get
		End Property

		''' <summary>
		''' Returns a parameter string identifying this event.
		''' This method is useful for event-logging and for debugging.
		''' </summary>
		''' <returns> a string identifying the event and its attributes </returns>
		Public Overrides Function paramString() As String
			Dim typeStr As String
			Select Case id
			  Case FOCUS_GAINED
				  typeStr = "FOCUS_GAINED"
			  Case FOCUS_LOST
				  typeStr = "FOCUS_LOST"
			  Case Else
				  typeStr = "unknown type"
			End Select
			Return typeStr + (If(temporary, ",temporary", ",permanent")) & ",opposite=" & oppositeComponent
		End Function

	End Class

End Namespace