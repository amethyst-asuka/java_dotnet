Imports System
Imports System.Runtime.CompilerServices
Imports System.Runtime.InteropServices

'
' * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 

Namespace java.awt.event


	''' <summary>
	''' An event which indicates that a mouse action occurred in a component.
	''' A mouse action is considered to occur in a particular component if and only
	''' if the mouse cursor is over the unobscured part of the component's bounds
	''' when the action happens.
	''' For lightweight components, such as Swing's components, mouse events
	''' are only dispatched to the component if the mouse event type has been
	''' enabled on the component. A mouse event type is enabled by adding the
	''' appropriate mouse-based {@code EventListener} to the component
	''' (<seealso cref="MouseListener"/> or <seealso cref="MouseMotionListener"/>), or by invoking
	''' <seealso cref="Component#enableEvents(long)"/> with the appropriate mask parameter
	''' ({@code AWTEvent.MOUSE_EVENT_MASK} or {@code AWTEvent.MOUSE_MOTION_EVENT_MASK}).
	''' If the mouse event type has not been enabled on the component, the
	''' corresponding mouse events are dispatched to the first ancestor that
	''' has enabled the mouse event type.
	''' <p>
	''' For example, if a {@code MouseListener} has been added to a component, or
	''' {@code enableEvents(AWTEvent.MOUSE_EVENT_MASK)} has been invoked, then all
	''' the events defined by {@code MouseListener} are dispatched to the component.
	''' On the other hand, if a {@code MouseMotionListener} has not been added and
	''' {@code enableEvents} has not been invoked with
	''' {@code AWTEvent.MOUSE_MOTION_EVENT_MASK}, then mouse motion events are not
	''' dispatched to the component. Instead the mouse motion events are
	''' dispatched to the first ancestors that has enabled mouse motion
	''' events.
	''' <P>
	''' This low-level event is generated by a component object for:
	''' <ul>
	''' <li>Mouse Events
	'''     <ul>
	'''     <li>a mouse button is pressed
	'''     <li>a mouse button is released
	'''     <li>a mouse button is clicked (pressed and released)
	'''     <li>the mouse cursor enters the unobscured part of component's geometry
	'''     <li>the mouse cursor exits the unobscured part of component's geometry
	'''     </ul>
	''' <li> Mouse Motion Events
	'''     <ul>
	'''     <li>the mouse is moved
	'''     <li>the mouse is dragged
	'''     </ul>
	''' </ul>
	''' <P>
	''' A <code>MouseEvent</code> object is passed to every
	''' <code>MouseListener</code>
	''' or <code>MouseAdapter</code> object which is registered to receive
	''' the "interesting" mouse events using the component's
	''' <code>addMouseListener</code> method.
	''' (<code>MouseAdapter</code> objects implement the
	''' <code>MouseListener</code> interface.) Each such listener object
	''' gets a <code>MouseEvent</code> containing the mouse event.
	''' <P>
	''' A <code>MouseEvent</code> object is also passed to every
	''' <code>MouseMotionListener</code> or
	''' <code>MouseMotionAdapter</code> object which is registered to receive
	''' mouse motion events using the component's
	''' <code>addMouseMotionListener</code>
	''' method. (<code>MouseMotionAdapter</code> objects implement the
	''' <code>MouseMotionListener</code> interface.) Each such listener object
	''' gets a <code>MouseEvent</code> containing the mouse motion event.
	''' <P>
	''' When a mouse button is clicked, events are generated and sent to the
	''' registered <code>MouseListener</code>s.
	''' The state of modal keys can be retrieved using <seealso cref="InputEvent#getModifiers"/>
	''' and <seealso cref="InputEvent#getModifiersEx"/>.
	''' The button mask returned by <seealso cref="InputEvent#getModifiers"/> reflects
	''' only the button that changed state, not the current state of all buttons.
	''' (Note: Due to overlap in the values of ALT_MASK/BUTTON2_MASK and
	''' META_MASK/BUTTON3_MASK, this is not always true for mouse events involving
	''' modifier keys).
	''' To get the state of all buttons and modifier keys, use
	''' <seealso cref="InputEvent#getModifiersEx"/>.
	''' The button which has changed state is returned by <seealso cref="MouseEvent#getButton"/>
	''' <P>
	''' For example, if the first mouse button is pressed, events are sent in the
	''' following order:
	''' <PRE>
	'''    <b   >id           </b   >   <b   >modifiers   </b   > <b   >button </b   >
	'''    <code>MOUSE_PRESSED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
	'''    <code>MOUSE_RELEASED</code>: <code>BUTTON1_MASK</code> <code>BUTTON1</code>
	'''    <code>MOUSE_CLICKED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
	''' </PRE>
	''' When multiple mouse buttons are pressed, each press, release, and click
	''' results in a separate event.
	''' <P>
	''' For example, if the user presses <b>button 1</b> followed by
	''' <b>button 2</b>, and then releases them in the same order,
	''' the following sequence of events is generated:
	''' <PRE>
	'''    <b   >id           </b   >   <b   >modifiers   </b   > <b   >button </b   >
	'''    <code>MOUSE_PRESSED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
	'''    <code>MOUSE_PRESSED</code>:  <code>BUTTON2_MASK</code> <code>BUTTON2</code>
	'''    <code>MOUSE_RELEASED</code>: <code>BUTTON1_MASK</code> <code>BUTTON1</code>
	'''    <code>MOUSE_CLICKED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>
	'''    <code>MOUSE_RELEASED</code>: <code>BUTTON2_MASK</code> <code>BUTTON2</code>
	'''    <code>MOUSE_CLICKED</code>:  <code>BUTTON2_MASK</code> <code>BUTTON2</code>
	''' </PRE>
	''' If <b>button 2</b> is released first, the
	''' <code>MOUSE_RELEASED</code>/<code>MOUSE_CLICKED</code> pair
	''' for <code>BUTTON2_MASK</code> arrives first,
	''' followed by the pair for <code>BUTTON1_MASK</code>.
	''' <p>
	''' Some extra mouse buttons are added to extend the standard set of buttons
	''' represented by the following constants:{@code BUTTON1}, {@code BUTTON2}, and {@code BUTTON3}.
	''' Extra buttons have no assigned {@code BUTTONx}
	''' constants as well as their button masks have no assigned {@code BUTTONx_DOWN_MASK}
	''' constants. Nevertheless, ordinal numbers starting from 4 may be
	''' used as button numbers (button ids). Values obtained by the
	''' <seealso cref="InputEvent#getMaskForButton(int) getMaskForButton(button)"/> method may be used
	''' as button masks.
	''' <p>
	''' {@code MOUSE_DRAGGED} events are delivered to the {@code Component}
	''' in which the mouse button was pressed until the mouse button is released
	''' (regardless of whether the mouse position is within the bounds of the
	''' {@code Component}).  Due to platform-dependent Drag&amp;Drop implementations,
	''' {@code MOUSE_DRAGGED} events may not be delivered during a native
	''' Drag&amp;Drop operation.
	''' 
	''' In a multi-screen environment mouse drag events are delivered to the
	''' <code>Component</code> even if the mouse position is outside the bounds of the
	''' <code>GraphicsConfiguration</code> associated with that
	''' <code>Component</code>. However, the reported position for mouse drag events
	''' in this case may differ from the actual mouse position:
	''' <ul>
	''' <li>In a multi-screen environment without a virtual device:
	''' <br>
	''' The reported coordinates for mouse drag events are clipped to fit within the
	''' bounds of the <code>GraphicsConfiguration</code> associated with
	''' the <code>Component</code>.
	''' <li>In a multi-screen environment with a virtual device:
	''' <br>
	''' The reported coordinates for mouse drag events are clipped to fit within the
	''' bounds of the virtual device associated with the <code>Component</code>.
	''' </ul>
	''' <p>
	''' An unspecified behavior will be caused if the {@code id} parameter
	''' of any particular {@code MouseEvent} instance is not
	''' in the range from {@code MOUSE_FIRST} to {@code MOUSE_LAST}-1
	''' ({@code MOUSE_WHEEL} is not acceptable).
	''' 
	''' @author Carl Quinn
	''' </summary>
	''' <seealso cref= MouseAdapter </seealso>
	''' <seealso cref= MouseListener </seealso>
	''' <seealso cref= MouseMotionAdapter </seealso>
	''' <seealso cref= MouseMotionListener </seealso>
	''' <seealso cref= MouseWheelListener </seealso>
	''' <seealso cref= <a href="https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html">Tutorial: Writing a Mouse Listener</a> </seealso>
	''' <seealso cref= <a href="https://docs.oracle.com/javase/tutorial/uiswing/events/mousemotionlistener.html">Tutorial: Writing a Mouse Motion Listener</a>
	''' 
	''' @since 1.1 </seealso>
	Public Class MouseEvent
		Inherits InputEvent

		''' <summary>
		''' The first number in the range of ids used for mouse events.
		''' </summary>
		Public Const MOUSE_FIRST As Integer = 500

		''' <summary>
		''' The last number in the range of ids used for mouse events.
		''' </summary>
		Public Const MOUSE_LAST As Integer = 507

		''' <summary>
		''' The "mouse clicked" event. This <code>MouseEvent</code>
		''' occurs when a mouse button is pressed and released.
		''' </summary>
		Public Const MOUSE_CLICKED As Integer = MOUSE_FIRST

		''' <summary>
		''' The "mouse pressed" event. This <code>MouseEvent</code>
		''' occurs when a mouse button is pushed down.
		''' </summary>
		Public Shared ReadOnly MOUSE_PRESSED As Integer = 1 + MOUSE_FIRST 'Event.MOUSE_DOWN

		''' <summary>
		''' The "mouse released" event. This <code>MouseEvent</code>
		''' occurs when a mouse button is let up.
		''' </summary>
		Public Shared ReadOnly MOUSE_RELEASED As Integer = 2 + MOUSE_FIRST 'Event.MOUSE_UP

		''' <summary>
		''' The "mouse moved" event. This <code>MouseEvent</code>
		''' occurs when the mouse position changes.
		''' </summary>
		Public Shared ReadOnly MOUSE_MOVED As Integer = 3 + MOUSE_FIRST 'Event.MOUSE_MOVE

		''' <summary>
		''' The "mouse entered" event. This <code>MouseEvent</code>
		''' occurs when the mouse cursor enters the unobscured part of component's
		''' geometry.
		''' </summary>
		Public Shared ReadOnly MOUSE_ENTERED As Integer = 4 + MOUSE_FIRST 'Event.MOUSE_ENTER

		''' <summary>
		''' The "mouse exited" event. This <code>MouseEvent</code>
		''' occurs when the mouse cursor exits the unobscured part of component's
		''' geometry.
		''' </summary>
		Public Shared ReadOnly MOUSE_EXITED As Integer = 5 + MOUSE_FIRST 'Event.MOUSE_EXIT

		''' <summary>
		''' The "mouse dragged" event. This <code>MouseEvent</code>
		''' occurs when the mouse position changes while a mouse button is pressed.
		''' </summary>
		Public Shared ReadOnly MOUSE_DRAGGED As Integer = 6 + MOUSE_FIRST 'Event.MOUSE_DRAG

		''' <summary>
		''' The "mouse wheel" event.  This is the only <code>MouseWheelEvent</code>.
		''' It occurs when a mouse equipped with a wheel has its wheel rotated.
		''' @since 1.4
		''' </summary>
		Public Shared ReadOnly MOUSE_WHEEL As Integer = 7 + MOUSE_FIRST

		''' <summary>
		''' Indicates no mouse buttons; used by <seealso cref="#getButton"/>.
		''' @since 1.4
		''' </summary>
		Public Const NOBUTTON As Integer = 0

		''' <summary>
		''' Indicates mouse button #1; used by <seealso cref="#getButton"/>.
		''' @since 1.4
		''' </summary>
		Public Const BUTTON1 As Integer = 1

		''' <summary>
		''' Indicates mouse button #2; used by <seealso cref="#getButton"/>.
		''' @since 1.4
		''' </summary>
		Public Const BUTTON2 As Integer = 2

		''' <summary>
		''' Indicates mouse button #3; used by <seealso cref="#getButton"/>.
		''' @since 1.4
		''' </summary>
		Public Const BUTTON3 As Integer = 3

		''' <summary>
		''' The mouse event's x coordinate.
		''' The x value is relative to the component that fired the event.
		''' 
		''' @serial </summary>
		''' <seealso cref= #getX() </seealso>
		Friend x As Integer

		''' <summary>
		''' The mouse event's y coordinate.
		''' The y value is relative to the component that fired the event.
		''' 
		''' @serial </summary>
		''' <seealso cref= #getY() </seealso>
		Friend y As Integer

		''' <summary>
		''' The mouse event's x absolute coordinate.
		''' In a virtual device multi-screen environment in which the
		''' desktop area could span multiple physical screen devices,
		''' this coordinate is relative to the virtual coordinate system.
		''' Otherwise, this coordinate is relative to the coordinate system
		''' associated with the Component's GraphicsConfiguration.
		''' 
		''' @serial
		''' </summary>
		Private xAbs As Integer

		''' <summary>
		''' The mouse event's y absolute coordinate.
		''' In a virtual device multi-screen environment in which the
		''' desktop area could span multiple physical screen devices,
		''' this coordinate is relative to the virtual coordinate system.
		''' Otherwise, this coordinate is relative to the coordinate system
		''' associated with the Component's GraphicsConfiguration.
		''' 
		''' @serial
		''' </summary>
		Private yAbs As Integer

		''' <summary>
		''' Indicates the number of quick consecutive clicks of
		''' a mouse button.
		''' clickCount will be valid for only three mouse events :<BR>
		''' <code>MOUSE_CLICKED</code>,
		''' <code>MOUSE_PRESSED</code> and
		''' <code>MOUSE_RELEASED</code>.
		''' For the above, the <code>clickCount</code> will be at least 1.
		''' For all other events the count will be 0.
		''' 
		''' @serial </summary>
		''' <seealso cref= #getClickCount() </seealso>
		Friend clickCount As Integer

		''' <summary>
		''' Indicates which, if any, of the mouse buttons has changed state.
		''' 
		''' The valid values are ranged from 0 to the value returned by the
		''' <seealso cref="java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()"/> method.
		''' This range already includes constants {@code NOBUTTON}, {@code BUTTON1},
		''' {@code BUTTON2}, and {@code BUTTON3}
		''' if these buttons are present. So it is allowed to use these constants too.
		''' For example, for a mouse with two buttons this field may contain the following values:
		''' <ul>
		''' <li> 0 ({@code NOBUTTON})
		''' <li> 1 ({@code BUTTON1})
		''' <li> 2 ({@code BUTTON2})
		''' </ul>
		''' If a mouse has 5 buttons, this field may contain the following values:
		''' <ul>
		''' <li> 0 ({@code NOBUTTON})
		''' <li> 1 ({@code BUTTON1})
		''' <li> 2 ({@code BUTTON2})
		''' <li> 3 ({@code BUTTON3})
		''' <li> 4
		''' <li> 5
		''' </ul>
		''' If support for extended mouse buttons is <seealso cref="Toolkit#areExtraMouseButtonsEnabled()"/> disabled by Java
		''' then the field may not contain the value larger than {@code BUTTON3}.
		''' @serial </summary>
		''' <seealso cref= #getButton() </seealso>
		''' <seealso cref= java.awt.Toolkit#areExtraMouseButtonsEnabled() </seealso>
		Friend button_Renamed As Integer

		''' <summary>
		''' A property used to indicate whether a Popup Menu
		''' should appear  with a certain gestures.
		''' If <code>popupTrigger</code> = <code>false</code>,
		''' no popup menu should appear.  If it is <code>true</code>
		''' then a popup menu should appear.
		''' 
		''' @serial </summary>
		''' <seealso cref= java.awt.PopupMenu </seealso>
		''' <seealso cref= #isPopupTrigger() </seealso>
		Friend popupTrigger As Boolean = False

	'    
	'     * JDK 1.1 serialVersionUID
	'     
		Private Shadows Const serialVersionUID As Long = -991214153494842848L

		''' <summary>
		''' A number of buttons available on the mouse at the {@code Toolkit} machinery startup.
		''' </summary>
		Private Shared cachedNumberOfButtons As Integer

		Shared Sub New()
			' ensure that the necessary native libraries are loaded 
			NativeLibLoader.loadLibraries()
			If Not java.awt.GraphicsEnvironment.headless Then initIDs()
			Dim tk As java.awt.Toolkit = java.awt.Toolkit.defaultToolkit
			If TypeOf tk Is sun.awt.SunToolkit Then
				cachedNumberOfButtons = CType(tk, sun.awt.SunToolkit).numberOfButtons
			Else
				'It's expected that some toolkits (Headless,
				'whatever besides SunToolkit) could also operate.
				cachedNumberOfButtons = 3
			End If
		End Sub

		''' <summary>
		''' Initialize JNI field and method IDs for fields that may be
		'''  accessed from C.
		''' </summary>
'JAVA TO VB CONVERTER TODO TASK: Replace 'unknown' with the appropriate dll name:
		<DllImport("unknown")> _
		Private Shared Sub initIDs()
		End Sub

		''' <summary>
		''' Returns the absolute x, y position of the event.
		''' In a virtual device multi-screen environment in which the
		''' desktop area could span multiple physical screen devices,
		''' these coordinates are relative to the virtual coordinate system.
		''' Otherwise, these coordinates are relative to the coordinate system
		''' associated with the Component's GraphicsConfiguration.
		''' </summary>
		''' <returns> a <code>Point</code> object containing the absolute  x
		'''  and y coordinates.
		''' </returns>
		''' <seealso cref= java.awt.GraphicsConfiguration
		''' @since 1.6 </seealso>
		Public Overridable Property locationOnScreen As java.awt.Point
			Get
			  Return New java.awt.Point(xAbs, yAbs)
			End Get
		End Property

		''' <summary>
		''' Returns the absolute horizontal x position of the event.
		''' In a virtual device multi-screen environment in which the
		''' desktop area could span multiple physical screen devices,
		''' this coordinate is relative to the virtual coordinate system.
		''' Otherwise, this coordinate is relative to the coordinate system
		''' associated with the Component's GraphicsConfiguration.
		''' </summary>
		''' <returns> x  an integer indicating absolute horizontal position.
		''' </returns>
		''' <seealso cref= java.awt.GraphicsConfiguration
		''' @since 1.6 </seealso>
		Public Overridable Property xOnScreen As Integer
			Get
				Return xAbs
			End Get
		End Property

		''' <summary>
		''' Returns the absolute vertical y position of the event.
		''' In a virtual device multi-screen environment in which the
		''' desktop area could span multiple physical screen devices,
		''' this coordinate is relative to the virtual coordinate system.
		''' Otherwise, this coordinate is relative to the coordinate system
		''' associated with the Component's GraphicsConfiguration.
		''' </summary>
		''' <returns> y  an integer indicating absolute vertical position.
		''' </returns>
		''' <seealso cref= java.awt.GraphicsConfiguration
		''' @since 1.6 </seealso>
		Public Overridable Property yOnScreen As Integer
			Get
				Return yAbs
			End Get
		End Property

		''' <summary>
		''' Constructs a <code>MouseEvent</code> object with the
		''' specified source component,
		''' type, time, modifiers, coordinates, click count, popupTrigger flag,
		''' and button number.
		''' <p>
		''' Creating an invalid event (such
		''' as by using more than one of the old _MASKs, or modifier/button
		''' values which don't match) results in unspecified behavior.
		''' An invocation of the form
		''' <tt>MouseEvent(source, id, when, modifiers, x, y, clickCount, popupTrigger, button)</tt>
		''' behaves in exactly the same way as the invocation
		''' <tt> {@link #MouseEvent(Component, int, long, int, int, int,
		''' int, int, int, boolean, int) MouseEvent}(source, id, when, modifiers,
		''' x, y, xAbs, yAbs, clickCount, popupTrigger, button)</tt>
		''' where xAbs and yAbs defines as source's location on screen plus
		''' relative coordinates x and y.
		''' xAbs and yAbs are set to zero if the source is not showing.
		''' This method throws an
		''' <code>IllegalArgumentException</code> if <code>source</code>
		''' is <code>null</code>.
		''' </summary>
		''' <param name="source">       The <code>Component</code> that originated the event </param>
		''' <param name="id">              An integer indicating the type of event.
		'''                     For information on allowable values, see
		'''                     the class description for <seealso cref="MouseEvent"/> </param>
		''' <param name="when">         A long integer that gives the time the event occurred.
		'''                     Passing negative or zero value
		'''                     is not recommended </param>
		''' <param name="modifiers">    a modifier mask describing the modifier keys and mouse
		'''                     buttons (for example, shift, ctrl, alt, and meta) that
		'''                     are down during the event.
		'''                     Only extended modifiers are allowed to be used as a
		'''                     value for this parameter (see the <seealso cref="InputEvent#getModifiersEx"/>
		'''                     class for the description of extended modifiers).
		'''                     Passing negative parameter
		'''                     is not recommended.
		'''                     Zero value means that no modifiers were passed </param>
		''' <param name="x">            The horizontal x coordinate for the mouse location.
		'''                       It is allowed to pass negative values </param>
		''' <param name="y">            The vertical y coordinate for the mouse location.
		'''                       It is allowed to pass negative values </param>
		''' <param name="clickCount">   The number of mouse clicks associated with event.
		'''                       Passing negative value
		'''                       is not recommended </param>
		''' <param name="popupTrigger"> A boolean that equals {@code true} if this event
		'''                     is a trigger for a popup menu </param>
		''' <param name="button">       An integer that indicates, which of the mouse buttons has
		'''                     changed its state.
		''' The following rules are applied to this parameter:
		''' <ul>
		''' <li>If support for the extended mouse buttons is
		''' <seealso cref="Toolkit#areExtraMouseButtonsEnabled() disabled"/> by Java
		''' then it is allowed to create {@code MouseEvent} objects only with the standard buttons:
		''' {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, and
		''' {@code BUTTON3}.
		''' <li> If support for the extended mouse buttons is
		''' <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/> by Java
		''' then it is allowed to create {@code MouseEvent} objects with
		''' the standard buttons.
		''' In case the support for extended mouse buttons is
		''' <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/> by Java, then
		''' in addition to the standard buttons, {@code MouseEvent} objects can be created
		''' using buttons from the range starting from 4 to
		''' <seealso cref="java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()"/>
		''' if the mouse has more than three buttons.
		''' </ul> </param>
		''' <exception cref="IllegalArgumentException"> if {@code button} is less then zero </exception>
		''' <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		''' <exception cref="IllegalArgumentException"> if {@code button} is greater then BUTTON3 and the support for extended mouse buttons is
		'''                                  <seealso cref="Toolkit#areExtraMouseButtonsEnabled() disabled"/> by Java </exception>
		''' <exception cref="IllegalArgumentException"> if {@code button} is greater then the
		'''                                  <seealso cref="java.awt.MouseInfo#getNumberOfButtons() current number of buttons"/> and the support
		'''                                  for extended mouse buttons is <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/>
		'''                                  by Java </exception>
		''' <exception cref="IllegalArgumentException"> if an invalid <code>button</code>
		'''            value is passed in </exception>
		''' <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		''' <seealso cref= #getSource() </seealso>
		''' <seealso cref= #getID() </seealso>
		''' <seealso cref= #getWhen() </seealso>
		''' <seealso cref= #getModifiers() </seealso>
		''' <seealso cref= #getX() </seealso>
		''' <seealso cref= #getY() </seealso>
		''' <seealso cref= #getClickCount() </seealso>
		''' <seealso cref= #isPopupTrigger() </seealso>
		''' <seealso cref= #getButton()
		''' @since 1.4 </seealso>
		Public Sub New(ByVal source As java.awt.Component, ByVal id As Integer, ByVal [when] As Long, ByVal modifiers As Integer, ByVal x As Integer, ByVal y As Integer, ByVal clickCount As Integer, ByVal popupTrigger As Boolean, ByVal button_Renamed As Integer)
			Me.New(source, id, [when], modifiers, x, y, 0, 0, clickCount, popupTrigger, button_Renamed)
			Dim eventLocationOnScreen As New java.awt.Point(0, 0)
			Try
			  eventLocationOnScreen = source.locationOnScreen
			  Me.xAbs = eventLocationOnScreen.x + x
			  Me.yAbs = eventLocationOnScreen.y + y
			Catch e As java.awt.IllegalComponentStateException
			  Me.xAbs = 0
			  Me.yAbs = 0
			End Try
		End Sub

		''' <summary>
		''' Constructs a <code>MouseEvent</code> object with the
		''' specified source component,
		''' type, modifiers, coordinates, click count, and popupTrigger flag.
		''' An invocation of the form
		''' <tt>MouseEvent(source, id, when, modifiers, x, y, clickCount, popupTrigger)</tt>
		''' behaves in exactly the same way as the invocation
		''' <tt> {@link #MouseEvent(Component, int, long, int, int, int,
		''' int, int, int, boolean, int) MouseEvent}(source, id, when, modifiers,
		''' x, y, xAbs, yAbs, clickCount, popupTrigger, MouseEvent.NOBUTTON)</tt>
		''' where xAbs and yAbs defines as source's location on screen plus
		''' relative coordinates x and y.
		''' xAbs and yAbs are set to zero if the source is not showing.
		''' This method throws an <code>IllegalArgumentException</code>
		''' if <code>source</code> is <code>null</code>.
		''' </summary>
		''' <param name="source">       The <code>Component</code> that originated the event </param>
		''' <param name="id">              An integer indicating the type of event.
		'''                     For information on allowable values, see
		'''                     the class description for <seealso cref="MouseEvent"/> </param>
		''' <param name="when">         A long integer that gives the time the event occurred.
		'''                     Passing negative or zero value
		'''                     is not recommended </param>
		''' <param name="modifiers">    a modifier mask describing the modifier keys and mouse
		'''                     buttons (for example, shift, ctrl, alt, and meta) that
		'''                     are down during the event.
		'''                     Only extended modifiers are allowed to be used as a
		'''                     value for this parameter (see the <seealso cref="InputEvent#getModifiersEx"/>
		'''                     class for the description of extended modifiers).
		'''                     Passing negative parameter
		'''                     is not recommended.
		'''                     Zero value means that no modifiers were passed </param>
		''' <param name="x">            The horizontal x coordinate for the mouse location.
		'''                       It is allowed to pass negative values </param>
		''' <param name="y">            The vertical y coordinate for the mouse location.
		'''                       It is allowed to pass negative values </param>
		''' <param name="clickCount">   The number of mouse clicks associated with event.
		'''                       Passing negative value
		'''                       is not recommended </param>
		''' <param name="popupTrigger"> A boolean that equals {@code true} if this event
		'''                     is a trigger for a popup menu </param>
		''' <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		''' <seealso cref= #getSource() </seealso>
		''' <seealso cref= #getID() </seealso>
		''' <seealso cref= #getWhen() </seealso>
		''' <seealso cref= #getModifiers() </seealso>
		''' <seealso cref= #getX() </seealso>
		''' <seealso cref= #getY() </seealso>
		''' <seealso cref= #getClickCount() </seealso>
		''' <seealso cref= #isPopupTrigger() </seealso>
		 Public Sub New(ByVal source As java.awt.Component, ByVal id As Integer, ByVal [when] As Long, ByVal modifiers As Integer, ByVal x As Integer, ByVal y As Integer, ByVal clickCount As Integer, ByVal popupTrigger As Boolean)
			Me.New(source, id, [when], modifiers, x, y, clickCount, popupTrigger, NOBUTTON)
		 End Sub


	'     if the button is an extra button and it is released or clicked then in Xsystem its state
	'       is not modified. Exclude this button number from ExtModifiers mask.
		<NonSerialized> _
		Private shouldExcludeButtonFromExtModifiers As Boolean = False

		''' <summary>
		''' {@inheritDoc}
		''' </summary>
		Public Property Overrides modifiersEx As Integer
			Get
				Dim tmpModifiers As Integer = modifiers
				If shouldExcludeButtonFromExtModifiers Then tmpModifiers = tmpModifiers And Not(InputEvent.getMaskForButton(button))
				Return tmpModifiers And Not JDK_1_3_MODIFIERS
			End Get
		End Property

		''' <summary>
		''' Constructs a <code>MouseEvent</code> object with the
		''' specified source component,
		''' type, time, modifiers, coordinates, absolute coordinates, click count, popupTrigger flag,
		''' and button number.
		''' <p>
		''' Creating an invalid event (such
		''' as by using more than one of the old _MASKs, or modifier/button
		''' values which don't match) results in unspecified behavior.
		''' Even if inconsistent values for relative and absolute coordinates are
		''' passed to the constructor, the mouse event instance is still
		''' created and no exception is thrown.
		''' This method throws an
		''' <code>IllegalArgumentException</code> if <code>source</code>
		''' is <code>null</code>.
		''' </summary>
		''' <param name="source">       The <code>Component</code> that originated the event </param>
		''' <param name="id">              An integer indicating the type of event.
		'''                     For information on allowable values, see
		'''                     the class description for <seealso cref="MouseEvent"/> </param>
		''' <param name="when">         A long integer that gives the time the event occurred.
		'''                     Passing negative or zero value
		'''                     is not recommended </param>
		''' <param name="modifiers">    a modifier mask describing the modifier keys and mouse
		'''                     buttons (for example, shift, ctrl, alt, and meta) that
		'''                     are down during the event.
		'''                     Only extended modifiers are allowed to be used as a
		'''                     value for this parameter (see the <seealso cref="InputEvent#getModifiersEx"/>
		'''                     class for the description of extended modifiers).
		'''                     Passing negative parameter
		'''                     is not recommended.
		'''                     Zero value means that no modifiers were passed </param>
		''' <param name="x">            The horizontal x coordinate for the mouse location.
		'''                       It is allowed to pass negative values </param>
		''' <param name="y">            The vertical y coordinate for the mouse location.
		'''                       It is allowed to pass negative values </param>
		''' <param name="xAbs">           The absolute horizontal x coordinate for the mouse location
		'''                       It is allowed to pass negative values </param>
		''' <param name="yAbs">           The absolute vertical y coordinate for the mouse location
		'''                       It is allowed to pass negative values </param>
		''' <param name="clickCount">   The number of mouse clicks associated with event.
		'''                       Passing negative value
		'''                       is not recommended </param>
		''' <param name="popupTrigger"> A boolean that equals {@code true} if this event
		'''                     is a trigger for a popup menu </param>
		''' <param name="button">       An integer that indicates, which of the mouse buttons has
		'''                     changed its state.
		''' The following rules are applied to this parameter:
		''' <ul>
		''' <li>If support for the extended mouse buttons is
		''' <seealso cref="Toolkit#areExtraMouseButtonsEnabled() disabled"/> by Java
		''' then it is allowed to create {@code MouseEvent} objects only with the standard buttons:
		''' {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, and
		''' {@code BUTTON3}.
		''' <li> If support for the extended mouse buttons is
		''' <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/> by Java
		''' then it is allowed to create {@code MouseEvent} objects with
		''' the standard buttons.
		''' In case the support for extended mouse buttons is
		''' <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/> by Java, then
		''' in addition to the standard buttons, {@code MouseEvent} objects can be created
		''' using buttons from the range starting from 4 to
		''' <seealso cref="java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()"/>
		''' if the mouse has more than three buttons.
		''' </ul> </param>
		''' <exception cref="IllegalArgumentException"> if {@code button} is less then zero </exception>
		''' <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		''' <exception cref="IllegalArgumentException"> if {@code button} is greater then BUTTON3 and the support for extended mouse buttons is
		'''                                  <seealso cref="Toolkit#areExtraMouseButtonsEnabled() disabled"/> by Java </exception>
		''' <exception cref="IllegalArgumentException"> if {@code button} is greater then the
		'''                                  <seealso cref="java.awt.MouseInfo#getNumberOfButtons() current number of buttons"/> and the support
		'''                                  for extended mouse buttons is <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/>
		'''                                  by Java </exception>
		''' <exception cref="IllegalArgumentException"> if an invalid <code>button</code>
		'''            value is passed in </exception>
		''' <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		''' <seealso cref= #getSource() </seealso>
		''' <seealso cref= #getID() </seealso>
		''' <seealso cref= #getWhen() </seealso>
		''' <seealso cref= #getModifiers() </seealso>
		''' <seealso cref= #getX() </seealso>
		''' <seealso cref= #getY() </seealso>
		''' <seealso cref= #getXOnScreen() </seealso>
		''' <seealso cref= #getYOnScreen() </seealso>
		''' <seealso cref= #getClickCount() </seealso>
		''' <seealso cref= #isPopupTrigger() </seealso>
		''' <seealso cref= #getButton() </seealso>
		''' <seealso cref= #button </seealso>
		''' <seealso cref= Toolkit#areExtraMouseButtonsEnabled() </seealso>
		''' <seealso cref= java.awt.MouseInfo#getNumberOfButtons() </seealso>
		''' <seealso cref= InputEvent#getMaskForButton(int)
		''' @since 1.6 </seealso>
		Public Sub New(ByVal source As java.awt.Component, ByVal id As Integer, ByVal [when] As Long, ByVal modifiers As Integer, ByVal x As Integer, ByVal y As Integer, ByVal xAbs As Integer, ByVal yAbs As Integer, ByVal clickCount As Integer, ByVal popupTrigger As Boolean, ByVal button_Renamed As Integer)
			MyBase.New(source, id, [when], modifiers)
			Me.x = x
			Me.y = y
			Me.xAbs = xAbs
			Me.yAbs = yAbs
			Me.clickCount = clickCount
			Me.popupTrigger = popupTrigger
			If button_Renamed < NOBUTTON Then Throw New IllegalArgumentException("Invalid button value :" & button_Renamed)
			If button_Renamed > BUTTON3 Then
				If Not java.awt.Toolkit.defaultToolkit.areExtraMouseButtonsEnabled() Then
					Throw New IllegalArgumentException("Extra mouse events are disabled " & button_Renamed)
				Else
					If button_Renamed > cachedNumberOfButtons Then Throw New IllegalArgumentException("Nonexistent button " & button_Renamed)
				End If
				' XToolkit: extra buttons are not reporting about their state correctly.
				' Being pressed they report the state=0 both on the press and on the release.
				' For 1-3 buttons the state value equals zero on press and non-zero on release.
				' Other modifiers like Shift, ALT etc seem report well with extra buttons.
				' The problem reveals as follows: one button is pressed and then another button is pressed and released.
				' So, the getModifiersEx() would not be zero due to a first button and we will skip this modifier.
				' This may have to be moved into the peer code instead if possible.

				If modifiersEx <> 0 Then 'There is at least one more button in a pressed state.
					If id = MouseEvent.MOUSE_RELEASED OrElse id = MouseEvent.MOUSE_CLICKED Then shouldExcludeButtonFromExtModifiers = True
				End If
			End If

			Me.button_Renamed = button_Renamed

			If (modifiers <> 0) AndAlso (modifiersEx = 0) Then
				newModifiersers()
			ElseIf (modifiers = 0) AndAlso (modifiersEx <> 0 OrElse button_Renamed <> NOBUTTON) AndAlso (button_Renamed <= BUTTON3) Then
				oldModifiersers()
			End If
		End Sub

		''' <summary>
		''' Returns the horizontal x position of the event relative to the
		''' source component.
		''' </summary>
		''' <returns> x  an integer indicating horizontal position relative to
		'''            the component </returns>
		Public Overridable Property x As Integer
			Get
				Return x
			End Get
		End Property

		''' <summary>
		''' Returns the vertical y position of the event relative to the
		''' source component.
		''' </summary>
		''' <returns> y  an integer indicating vertical position relative to
		'''            the component </returns>
		Public Overridable Property y As Integer
			Get
				Return y
			End Get
		End Property

		''' <summary>
		''' Returns the x,y position of the event relative to the source component.
		''' </summary>
		''' <returns> a <code>Point</code> object containing the x and y coordinates
		'''         relative to the source component
		'''  </returns>
		Public Overridable Property point As java.awt.Point
			Get
				Dim x_Renamed As Integer
				Dim y_Renamed As Integer
				SyncLock Me
					x_Renamed = Me.x
					y_Renamed = Me.y
				End SyncLock
				Return New java.awt.Point(x_Renamed, y_Renamed)
			End Get
		End Property

		''' <summary>
		''' Translates the event's coordinates to a new position
		''' by adding specified <code>x</code> (horizontal) and <code>y</code>
		''' (vertical) offsets.
		''' </summary>
		''' <param name="x"> the horizontal x value to add to the current x
		'''          coordinate position </param>
		''' <param name="y"> the vertical y value to add to the current y
		'''            coordinate position </param>
		<MethodImpl(MethodImplOptions.Synchronized)> _
		Public Overridable Sub translatePoint(ByVal x As Integer, ByVal y As Integer)
			Me.x += x
			Me.y += y
		End Sub

		''' <summary>
		''' Returns the number of mouse clicks associated with this event.
		''' </summary>
		''' <returns> integer value for the number of clicks </returns>
		Public Overridable Property clickCount As Integer
			Get
				Return clickCount
			End Get
		End Property

		''' <summary>
		''' Returns which, if any, of the mouse buttons has changed state.
		''' The returned value is ranged
		''' from 0 to the <seealso cref="java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()"/>
		''' value.
		''' The returned value includes at least the following constants:
		''' <ul>
		''' <li> {@code NOBUTTON}
		''' <li> {@code BUTTON1}
		''' <li> {@code BUTTON2}
		''' <li> {@code BUTTON3}
		''' </ul>
		''' It is allowed to use those constants to compare with the returned button number in the application.
		''' For example,
		''' <pre>
		''' if (anEvent.getButton() == MouseEvent.BUTTON1) {
		''' </pre>
		''' In particular, for a mouse with one, two, or three buttons this method may return the following values:
		''' <ul>
		''' <li> 0 ({@code NOBUTTON})
		''' <li> 1 ({@code BUTTON1})
		''' <li> 2 ({@code BUTTON2})
		''' <li> 3 ({@code BUTTON3})
		''' </ul>
		''' Button numbers greater then {@code BUTTON3} have no constant identifier. So if a mouse with five buttons is
		''' installed, this method may return the following values:
		''' <ul>
		''' <li> 0 ({@code NOBUTTON})
		''' <li> 1 ({@code BUTTON1})
		''' <li> 2 ({@code BUTTON2})
		''' <li> 3 ({@code BUTTON3})
		''' <li> 4
		''' <li> 5
		''' </ul>
		''' <p>
		''' Note: If support for extended mouse buttons is <seealso cref="Toolkit#areExtraMouseButtonsEnabled() disabled"/> by Java
		''' then the AWT event subsystem does not produce mouse events for the extended mouse
		''' buttons. So it is not expected that this method returns anything except {@code NOBUTTON}, {@code BUTTON1},
		''' {@code BUTTON2}, {@code BUTTON3}.
		''' </summary>
		''' <returns> one of the values from 0 to <seealso cref="java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()"/>
		'''         if support for the extended mouse buttons is <seealso cref="Toolkit#areExtraMouseButtonsEnabled() enabled"/> by Java.
		'''         That range includes {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2}, {@code BUTTON3};
		'''         <br>
		'''         {@code NOBUTTON}, {@code BUTTON1}, {@code BUTTON2} or {@code BUTTON3}
		'''         if support for the extended mouse buttons is <seealso cref="Toolkit#areExtraMouseButtonsEnabled() disabled"/> by Java
		''' @since 1.4 </returns>
		''' <seealso cref= Toolkit#areExtraMouseButtonsEnabled() </seealso>
		''' <seealso cref= java.awt.MouseInfo#getNumberOfButtons() </seealso>
		''' <seealso cref= #MouseEvent(Component, int, long, int, int, int, int, int, int, boolean, int) </seealso>
		''' <seealso cref= InputEvent#getMaskForButton(int) </seealso>
		Public Overridable Property button As Integer
			Get
				Return button_Renamed
			End Get
		End Property

		''' <summary>
		''' Returns whether or not this mouse event is the popup menu
		''' trigger event for the platform.
		''' <p><b>Note</b>: Popup menus are triggered differently
		''' on different systems. Therefore, <code>isPopupTrigger</code>
		''' should be checked in both <code>mousePressed</code>
		''' and <code>mouseReleased</code>
		''' for proper cross-platform functionality.
		''' </summary>
		''' <returns> boolean, true if this event is the popup menu trigger
		'''         for this platform </returns>
		Public Overridable Property popupTrigger As Boolean
			Get
				Return popupTrigger
			End Get
		End Property

		''' <summary>
		''' Returns a <code>String</code> instance describing the modifier keys and
		''' mouse buttons that were down during the event, such as "Shift",
		''' or "Ctrl+Shift". These strings can be localized by changing
		''' the <code>awt.properties</code> file.
		''' <p>
		''' Note that the <code>InputEvent.ALT_MASK</code> and
		''' <code>InputEvent.BUTTON2_MASK</code> have equal values,
		''' so the "Alt" string is returned for both modifiers.  Likewise,
		''' the <code>InputEvent.META_MASK</code> and
		''' <code>InputEvent.BUTTON3_MASK</code> have equal values,
		''' so the "Meta" string is returned for both modifiers.
		''' <p>
		''' Note that passing negative parameter is incorrect,
		''' and will cause the returning an unspecified string.
		''' Zero parameter means that no modifiers were passed and will
		''' cause the returning an empty string.
		''' <p> </summary>
		''' <param name="modifiers"> A modifier mask describing the modifier keys and
		'''                  mouse buttons that were down during the event </param>
		''' <returns> string   string text description of the combination of modifier
		'''                  keys and mouse buttons that were down during the event </returns>
		''' <seealso cref= InputEvent#getModifiersExText(int)
		''' @since 1.4 </seealso>
		Public Shared Function getMouseModifiersText(ByVal modifiers As Integer) As String
			Dim buf As New StringBuilder
			If (modifiers And InputEvent.ALT_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.alt", "Alt"))
				buf.append("+")
			End If
			If (modifiers And InputEvent.META_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.meta", "Meta"))
				buf.append("+")
			End If
			If (modifiers And InputEvent.CTRL_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.control", "Ctrl"))
				buf.append("+")
			End If
			If (modifiers And InputEvent.SHIFT_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.shift", "Shift"))
				buf.append("+")
			End If
			If (modifiers And InputEvent.ALT_GRAPH_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.altGraph", "Alt Graph"))
				buf.append("+")
			End If
			If (modifiers And InputEvent.BUTTON1_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.button1", "Button1"))
				buf.append("+")
			End If
			If (modifiers And InputEvent.BUTTON2_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.button2", "Button2"))
				buf.append("+")
			End If
			If (modifiers And InputEvent.BUTTON3_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.button3", "Button3"))
				buf.append("+")
			End If

			Dim mask As Integer

			' TODO: add a toolkit field that holds a number of button on the mouse.
			' As the method getMouseModifiersText() is static and obtain
			' an integer as a parameter then we may not restrict this with the number
			' of buttons installed on the mouse.
			' It's a temporary solution. We need to somehow hold the number of buttons somewhere else.
			For i As Integer = 1 To cachedNumberOfButtons
				mask = InputEvent.getMaskForButton(i)
				If (modifiers And mask) <> 0 AndAlso buf.IndexOf(java.awt.Toolkit.getProperty("AWT.button" & i, "Button" & i)) = -1 Then '1,2,3 buttons may already be there; so don't duplicate it.
					buf.append(java.awt.Toolkit.getProperty("AWT.button" & i, "Button" & i))
					buf.append("+")
				End If
			Next i

			If buf.length() > 0 Then buf.length = buf.length()-1 ' remove trailing '+'
			Return buf.ToString()
		End Function

		''' <summary>
		''' Returns a parameter string identifying this event.
		''' This method is useful for event-logging and for debugging.
		''' </summary>
		''' <returns> a string identifying the event and its attributes </returns>
		Public Overrides Function paramString() As String
			Dim str As New StringBuilder(80)

			Select Case id
			  Case MOUSE_PRESSED
				  str.append("MOUSE_PRESSED")
			  Case MOUSE_RELEASED
				  str.append("MOUSE_RELEASED")
			  Case MOUSE_CLICKED
				  str.append("MOUSE_CLICKED")
			  Case MOUSE_ENTERED
				  str.append("MOUSE_ENTERED")
			  Case MOUSE_EXITED
				  str.append("MOUSE_EXITED")
			  Case MOUSE_MOVED
				  str.append("MOUSE_MOVED")
			  Case MOUSE_DRAGGED
				  str.append("MOUSE_DRAGGED")
			  Case MOUSE_WHEEL
				  str.append("MOUSE_WHEEL")
			   Case Else
				  str.append("unknown type")
			End Select

			' (x,y) coordinates
			str.append(",(").append(x).append(",").append(y).append(")")
			str.append(",absolute(").append(xAbs).append(",").append(yAbs).append(")")

			If id <> MOUSE_DRAGGED AndAlso id <> MOUSE_MOVED Then str.append(",button=").append(button)

			If modifiers <> 0 Then str.append(",modifiers=").append(getMouseModifiersText(modifiers))

			If modifiersEx <> 0 Then str.append(",extModifiers=").append(getModifiersExText(modifiersEx))

			str.append(",clickCount=").append(clickCount)

			Return str.ToString()
		End Function

		''' <summary>
		''' Sets new modifiers by the old ones.
		''' Also sets button.
		''' </summary>
		Private Sub setNewModifiers()
			If (modifiers And BUTTON1_MASK) <> 0 Then modifiers = modifiers Or BUTTON1_DOWN_MASK
			If (modifiers And BUTTON2_MASK) <> 0 Then modifiers = modifiers Or BUTTON2_DOWN_MASK
			If (modifiers And BUTTON3_MASK) <> 0 Then modifiers = modifiers Or BUTTON3_DOWN_MASK
			If id = MOUSE_PRESSED OrElse id = MOUSE_RELEASED OrElse id = MOUSE_CLICKED Then
				If (modifiers And BUTTON1_MASK) <> 0 Then
					button_Renamed = BUTTON1
					modifiers = modifiers And (Not BUTTON2_MASK) And Not BUTTON3_MASK
					If id <> MOUSE_PRESSED Then modifiers = modifiers And Not BUTTON1_DOWN_MASK
				ElseIf (modifiers And BUTTON2_MASK) <> 0 Then
					button_Renamed = BUTTON2
					modifiers = modifiers And (Not BUTTON1_MASK) And Not BUTTON3_MASK
					If id <> MOUSE_PRESSED Then modifiers = modifiers And Not BUTTON2_DOWN_MASK
				ElseIf (modifiers And BUTTON3_MASK) <> 0 Then
					button_Renamed = BUTTON3
					modifiers = modifiers And (Not BUTTON1_MASK) And Not BUTTON2_MASK
					If id <> MOUSE_PRESSED Then modifiers = modifiers And Not BUTTON3_DOWN_MASK
				End If
			End If
			If (modifiers And InputEvent.ALT_MASK) <> 0 Then modifiers = modifiers Or InputEvent.ALT_DOWN_MASK
			If (modifiers And InputEvent.META_MASK) <> 0 Then modifiers = modifiers Or InputEvent.META_DOWN_MASK
			If (modifiers And InputEvent.SHIFT_MASK) <> 0 Then modifiers = modifiers Or InputEvent.SHIFT_DOWN_MASK
			If (modifiers And InputEvent.CTRL_MASK) <> 0 Then modifiers = modifiers Or InputEvent.CTRL_DOWN_MASK
			If (modifiers And InputEvent.ALT_GRAPH_MASK) <> 0 Then modifiers = modifiers Or InputEvent.ALT_GRAPH_DOWN_MASK
		End Sub

		''' <summary>
		''' Sets old modifiers by the new ones.
		''' </summary>
		Private Sub setOldModifiers()
			If id = MOUSE_PRESSED OrElse id = MOUSE_RELEASED OrElse id = MOUSE_CLICKED Then
				Select Case button_Renamed
				Case BUTTON1
					modifiers = modifiers Or BUTTON1_MASK
				Case BUTTON2
					modifiers = modifiers Or BUTTON2_MASK
				Case BUTTON3
					modifiers = modifiers Or BUTTON3_MASK
				End Select
			Else
				If (modifiers And BUTTON1_DOWN_MASK) <> 0 Then modifiers = modifiers Or BUTTON1_MASK
				If (modifiers And BUTTON2_DOWN_MASK) <> 0 Then modifiers = modifiers Or BUTTON2_MASK
				If (modifiers And BUTTON3_DOWN_MASK) <> 0 Then modifiers = modifiers Or BUTTON3_MASK
			End If
			If (modifiers And ALT_DOWN_MASK) <> 0 Then modifiers = modifiers Or ALT_MASK
			If (modifiers And META_DOWN_MASK) <> 0 Then modifiers = modifiers Or META_MASK
			If (modifiers And SHIFT_DOWN_MASK) <> 0 Then modifiers = modifiers Or SHIFT_MASK
			If (modifiers And CTRL_DOWN_MASK) <> 0 Then modifiers = modifiers Or CTRL_MASK
			If (modifiers And ALT_GRAPH_DOWN_MASK) <> 0 Then modifiers = modifiers Or ALT_GRAPH_MASK
		End Sub

		''' <summary>
		''' Sets new modifiers by the old ones.
		''' @serial
		''' </summary>
		Private Sub readObject(ByVal s As java.io.ObjectInputStream)
			s.defaultReadObject()
			If modifiers <> 0 AndAlso modifiersEx = 0 Then newModifiersers()
		End Sub
	End Class

End Namespace