Imports Microsoft.VisualBasic
Imports System
Imports System.Runtime.InteropServices

'
' * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 

Namespace java.awt.event


	''' <summary>
	''' An event which indicates that a keystroke occurred in a component.
	''' <p>
	''' This low-level event is generated by a component object (such as a text
	''' field) when a key is pressed, released, or typed.
	''' The event is passed to every <code>KeyListener</code>
	''' or <code>KeyAdapter</code> object which registered to receive such
	''' events using the component's <code>addKeyListener</code> method.
	''' (<code>KeyAdapter</code> objects implement the
	''' <code>KeyListener</code> interface.)  Each such listener object
	''' gets this <code>KeyEvent</code> when the event occurs.
	''' <p>
	''' <em>"Key typed" events</em> are higher-level and generally do not depend on
	''' the platform or keyboard layout.  They are generated when a Unicode character
	''' is entered, and are the preferred way to find out about character input.
	''' In the simplest case, a key typed event is produced by a single key press
	''' (e.g., 'a').  Often, however, characters are produced by series of key
	''' presses (e.g., 'shift' + 'a'), and the mapping from key pressed events to
	''' key typed events may be many-to-one or many-to-many.  Key releases are not
	''' usually necessary to generate a key typed event, but there are some cases
	''' where the key typed event is not generated until a key is released (e.g.,
	''' entering ASCII sequences via the Alt-Numpad method in Windows).
	''' No key typed events are generated for keys that don't generate Unicode
	''' characters (e.g., action keys, modifier keys, etc.).
	''' <p>
	''' The getKeyChar method always returns a valid Unicode character or
	''' CHAR_UNDEFINED.  Character input is reported by KEY_TYPED events:
	''' KEY_PRESSED and KEY_RELEASED events are not necessarily associated
	''' with character input.  Therefore, the result of the getKeyChar method
	''' is guaranteed to be meaningful only for KEY_TYPED events.
	''' <p>
	''' For key pressed and key released events, the getKeyCode method returns
	''' the event's keyCode.  For key typed events, the getKeyCode method
	''' always returns {@code VK_UNDEFINED}. The {@code getExtendedKeyCode} method
	''' may also be used with many international keyboard layouts.
	''' 
	''' <p>
	''' <em>"Key pressed" and "key released" events</em> are lower-level and depend
	''' on the platform and keyboard layout. They are generated whenever a key is
	''' pressed or released, and are the only way to find out about keys that don't
	''' generate character input (e.g., action keys, modifier keys, etc.). The key
	''' being pressed or released is indicated by the {@code getKeyCode} and {@code getExtendedKeyCode}
	''' methods, which return a virtual key code.
	''' 
	''' <p>
	''' <em>Virtual key codes</em> are used to report which keyboard key has
	''' been pressed, rather than a character generated by the combination
	''' of one or more keystrokes (such as "A", which comes from shift and "a").
	''' 
	''' <p>
	''' For example, pressing the Shift key will cause a KEY_PRESSED event
	''' with a VK_SHIFT keyCode, while pressing the 'a' key will result in
	''' a VK_A keyCode.  After the 'a' key is released, a KEY_RELEASED event
	''' will be fired with VK_A. Separately, a KEY_TYPED event with a keyChar
	''' value of 'A' is generated.
	''' 
	''' <p>
	''' Pressing and releasing a key on the keyboard results in the generating
	''' the following key events (in order):
	''' <PRE>
	'''    {@code KEY_PRESSED}
	'''    {@code KEY_TYPED} (is only generated if a valid Unicode character could be generated.)
	'''    {@code KEY_RELEASED}
	''' </PRE>
	''' 
	''' But in some cases (e.g. auto-repeat or input method is activated) the order
	''' could be different (and platform dependent).
	''' 
	''' <p>
	''' Notes:
	''' <ul>
	''' <li>Key combinations which do not result in Unicode characters, such as action
	''' keys like F1 and the HELP key, do not generate KEY_TYPED events.
	''' <li>Not all keyboards or systems are capable of generating all
	''' virtual key codes.  No attempt is made in Java to generate these keys
	''' artificially.
	''' <li>Virtual key codes do not identify a physical key: they depend on the
	''' platform and keyboard layout. For example, the key that generates VK_Q
	''' when using a U.S. keyboard layout will generate VK_A when using a French
	''' keyboard layout.
	''' <li>The key that generates {@code VK_Q} when using a U.S. keyboard layout also
	''' generates a unique code for Russian or Hebrew layout. There is no a
	''' {@code VK_} constant for these and many other codes in various layouts. These codes
	''' may be obtained by using {@code getExtendedKeyCode} and are used whenever
	''' a {@code VK_} constant is used.
	''' <li>Not all characters have a keycode associated with them.  For example,
	''' there is no keycode for the question mark because there is no keyboard
	''' for which it appears on the primary layer.
	''' <li>In order to support the platform-independent handling of action keys,
	''' the Java platform uses a few additional virtual key constants for functions
	''' that would otherwise have to be recognized by interpreting virtual key codes
	''' and modifiers. For example, for Japanese Windows keyboards, VK_ALL_CANDIDATES
	''' is returned instead of VK_CONVERT with the ALT modifier.
	''' <li>As specified in <a href="../doc-files/FocusSpec.html">Focus Specification</a>
	''' key events are dispatched to the focus owner by default.
	''' </ul>
	''' 
	''' <p>
	''' WARNING: Aside from those keys that are defined by the Java language
	''' (VK_ENTER, VK_BACK_SPACE, and VK_TAB), do not rely on the values of the VK_
	''' constants.  Sun reserves the right to change these values as needed
	''' to accommodate a wider range of keyboards in the future.
	''' <p>
	''' An unspecified behavior will be caused if the {@code id} parameter
	''' of any particular {@code KeyEvent} instance is not
	''' in the range from {@code KEY_FIRST} to {@code KEY_LAST}.
	''' 
	''' @author Carl Quinn
	''' @author Amy Fowler
	''' @author Norbert Lindenberg
	''' </summary>
	''' <seealso cref= KeyAdapter </seealso>
	''' <seealso cref= KeyListener </seealso>
	''' <seealso cref= <a href="https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html">Tutorial: Writing a Key Listener</a>
	''' 
	''' @since 1.1 </seealso>
	Public Class KeyEvent
		Inherits InputEvent

		''' <summary>
		''' Stores the state of native event dispatching system
		''' - true, if when the event was created event proxying
		'''         mechanism was active
		''' - false, if it was inactive
		''' Used in Component.dispatchEventImpl to correctly dispatch
		''' events when proxy is active
		''' </summary>
		Private isProxyActive As Boolean = False

		''' <summary>
		''' The first number in the range of ids used for key events.
		''' </summary>
		Public Const KEY_FIRST As Integer = 400

		''' <summary>
		''' The last number in the range of ids used for key events.
		''' </summary>
		Public Const KEY_LAST As Integer = 402

		''' <summary>
		''' The "key typed" event.  This event is generated when a character is
		''' entered.  In the simplest case, it is produced by a single key press.
		''' Often, however, characters are produced by series of key presses, and
		''' the mapping from key pressed events to key typed events may be
		''' many-to-one or many-to-many.
		''' </summary>
		Public Const KEY_TYPED As Integer = KEY_FIRST

		''' <summary>
		''' The "key pressed" event. This event is generated when a key
		''' is pushed down.
		''' </summary>
		Public Shared ReadOnly KEY_PRESSED As Integer = 1 + KEY_FIRST 'Event.KEY_PRESS

		''' <summary>
		''' The "key released" event. This event is generated when a key
		''' is let up.
		''' </summary>
		Public Shared ReadOnly KEY_RELEASED As Integer = 2 + KEY_FIRST 'Event.KEY_RELEASE

		' Virtual key codes. 

		Public Shared ReadOnly VK_ENTER As Integer = ControlChars.Lf
		Public Shared ReadOnly VK_BACK_SPACE As Integer = ControlChars.Back
		Public Shared ReadOnly VK_TAB As Integer = ControlChars.Tab
		Public Const VK_CANCEL As Integer = &H3
		Public Const VK_CLEAR As Integer = &HC
		Public Const VK_SHIFT As Integer = &H10
		Public Const VK_CONTROL As Integer = &H11
		Public Const VK_ALT As Integer = &H12
		Public Const VK_PAUSE As Integer = &H13
		Public Const VK_CAPS_LOCK As Integer = &H14
		Public Const VK_ESCAPE As Integer = &H1B
		Public Const VK_SPACE As Integer = &H20
		Public Const VK_PAGE_UP As Integer = &H21
		Public Const VK_PAGE_DOWN As Integer = &H22
		Public Const VK_END As Integer = &H23
		Public Const VK_HOME As Integer = &H24

		''' <summary>
		''' Constant for the non-numpad <b>left</b> arrow key. </summary>
		''' <seealso cref= #VK_KP_LEFT </seealso>
		Public Const VK_LEFT As Integer = &H25

		''' <summary>
		''' Constant for the non-numpad <b>up</b> arrow key. </summary>
		''' <seealso cref= #VK_KP_UP </seealso>
		Public Const VK_UP As Integer = &H26

		''' <summary>
		''' Constant for the non-numpad <b>right</b> arrow key. </summary>
		''' <seealso cref= #VK_KP_RIGHT </seealso>
		Public Const VK_RIGHT As Integer = &H27

		''' <summary>
		''' Constant for the non-numpad <b>down</b> arrow key. </summary>
		''' <seealso cref= #VK_KP_DOWN </seealso>
		Public Const VK_DOWN As Integer = &H28

		''' <summary>
		''' Constant for the comma key, ","
		''' </summary>
		Public Const VK_COMMA As Integer = &H2C

		''' <summary>
		''' Constant for the minus key, "-"
		''' @since 1.2
		''' </summary>
		Public Const VK_MINUS As Integer = &H2D

		''' <summary>
		''' Constant for the period key, "."
		''' </summary>
		Public Const VK_PERIOD As Integer = &H2E

		''' <summary>
		''' Constant for the forward slash key, "/"
		''' </summary>
		Public Const VK_SLASH As Integer = &H2F

		''' <summary>
		''' VK_0 thru VK_9 are the same as ASCII '0' thru '9' (0x30 - 0x39) </summary>
		Public Const VK_0 As Integer = &H30
		Public Const VK_1 As Integer = &H31
		Public Const VK_2 As Integer = &H32
		Public Const VK_3 As Integer = &H33
		Public Const VK_4 As Integer = &H34
		Public Const VK_5 As Integer = &H35
		Public Const VK_6 As Integer = &H36
		Public Const VK_7 As Integer = &H37
		Public Const VK_8 As Integer = &H38
		Public Const VK_9 As Integer = &H39

		''' <summary>
		''' Constant for the semicolon key, ";"
		''' </summary>
		Public Const VK_SEMICOLON As Integer = &H3B

		''' <summary>
		''' Constant for the equals key, "="
		''' </summary>
		Public Const VK_EQUALS As Integer = &H3D

		''' <summary>
		''' VK_A thru VK_Z are the same as ASCII 'A' thru 'Z' (0x41 - 0x5A) </summary>
		Public Const VK_A As Integer = &H41
		Public Const VK_B As Integer = &H42
		Public Const VK_C As Integer = &H43
		Public Const VK_D As Integer = &H44
		Public Const VK_E As Integer = &H45
		Public Const VK_F As Integer = &H46
		Public Const VK_G As Integer = &H47
		Public Const VK_H As Integer = &H48
		Public Const VK_I As Integer = &H49
		Public Const VK_J As Integer = &H4A
		Public Const VK_K As Integer = &H4B
		Public Const VK_L As Integer = &H4C
		Public Const VK_M As Integer = &H4D
		Public Const VK_N As Integer = &H4E
		Public Const VK_O As Integer = &H4F
		Public Const VK_P As Integer = &H50
		Public Const VK_Q As Integer = &H51
		Public Const VK_R As Integer = &H52
		Public Const VK_S As Integer = &H53
		Public Const VK_T As Integer = &H54
		Public Const VK_U As Integer = &H55
		Public Const VK_V As Integer = &H56
		Public Const VK_W As Integer = &H57
		Public Const VK_X As Integer = &H58
		Public Const VK_Y As Integer = &H59
		Public Const VK_Z As Integer = &H5A

		''' <summary>
		''' Constant for the open bracket key, "["
		''' </summary>
		Public Const VK_OPEN_BRACKET As Integer = &H5B

		''' <summary>
		''' Constant for the back slash key, "\"
		''' </summary>
		Public Const VK_BACK_SLASH As Integer = &H5C

		''' <summary>
		''' Constant for the close bracket key, "]"
		''' </summary>
		Public Const VK_CLOSE_BRACKET As Integer = &H5D

		Public Const VK_NUMPAD0 As Integer = &H60
		Public Const VK_NUMPAD1 As Integer = &H61
		Public Const VK_NUMPAD2 As Integer = &H62
		Public Const VK_NUMPAD3 As Integer = &H63
		Public Const VK_NUMPAD4 As Integer = &H64
		Public Const VK_NUMPAD5 As Integer = &H65
		Public Const VK_NUMPAD6 As Integer = &H66
		Public Const VK_NUMPAD7 As Integer = &H67
		Public Const VK_NUMPAD8 As Integer = &H68
		Public Const VK_NUMPAD9 As Integer = &H69
		Public Const VK_MULTIPLY As Integer = &H6A
		Public Const VK_ADD As Integer = &H6B

		''' <summary>
		''' This constant is obsolete, and is included only for backwards
		''' compatibility. </summary>
		''' <seealso cref= #VK_SEPARATOR </seealso>
		Public Const VK_SEPARATER As Integer = &H6C

		''' <summary>
		''' Constant for the Numpad Separator key.
		''' @since 1.4
		''' </summary>
		Public Const VK_SEPARATOR As Integer = VK_SEPARATER

		Public Const VK_SUBTRACT As Integer = &H6D
		Public Const VK_DECIMAL As Integer = &H6E
		Public Const VK_DIVIDE As Integer = &H6F
		Public Const VK_DELETE As Integer = &H7F ' ASCII DEL
		Public Const VK_NUM_LOCK As Integer = &H90
		Public Const VK_SCROLL_LOCK As Integer = &H91

		''' <summary>
		''' Constant for the F1 function key. </summary>
		Public Const VK_F1 As Integer = &H70

		''' <summary>
		''' Constant for the F2 function key. </summary>
		Public Const VK_F2 As Integer = &H71

		''' <summary>
		''' Constant for the F3 function key. </summary>
		Public Const VK_F3 As Integer = &H72

		''' <summary>
		''' Constant for the F4 function key. </summary>
		Public Const VK_F4 As Integer = &H73

		''' <summary>
		''' Constant for the F5 function key. </summary>
		Public Const VK_F5 As Integer = &H74

		''' <summary>
		''' Constant for the F6 function key. </summary>
		Public Const VK_F6 As Integer = &H75

		''' <summary>
		''' Constant for the F7 function key. </summary>
		Public Const VK_F7 As Integer = &H76

		''' <summary>
		''' Constant for the F8 function key. </summary>
		Public Const VK_F8 As Integer = &H77

		''' <summary>
		''' Constant for the F9 function key. </summary>
		Public Const VK_F9 As Integer = &H78

		''' <summary>
		''' Constant for the F10 function key. </summary>
		Public Const VK_F10 As Integer = &H79

		''' <summary>
		''' Constant for the F11 function key. </summary>
		Public Const VK_F11 As Integer = &H7A

		''' <summary>
		''' Constant for the F12 function key. </summary>
		Public Const VK_F12 As Integer = &H7B

		''' <summary>
		''' Constant for the F13 function key.
		''' @since 1.2
		''' </summary>
		' F13 - F24 are used on IBM 3270 keyboard; use random range for constants. 
		Public Const VK_F13 As Integer = &HF000

		''' <summary>
		''' Constant for the F14 function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_F14 As Integer = &HF001

		''' <summary>
		''' Constant for the F15 function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_F15 As Integer = &HF002

		''' <summary>
		''' Constant for the F16 function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_F16 As Integer = &HF003

		''' <summary>
		''' Constant for the F17 function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_F17 As Integer = &HF004

		''' <summary>
		''' Constant for the F18 function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_F18 As Integer = &HF005

		''' <summary>
		''' Constant for the F19 function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_F19 As Integer = &HF006

		''' <summary>
		''' Constant for the F20 function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_F20 As Integer = &HF007

		''' <summary>
		''' Constant for the F21 function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_F21 As Integer = &HF008

		''' <summary>
		''' Constant for the F22 function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_F22 As Integer = &HF009

		''' <summary>
		''' Constant for the F23 function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_F23 As Integer = &HF00A

		''' <summary>
		''' Constant for the F24 function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_F24 As Integer = &HF00B

		Public Const VK_PRINTSCREEN As Integer = &H9A
		Public Const VK_INSERT As Integer = &H9B
		Public Const VK_HELP As Integer = &H9C
		Public Const VK_META As Integer = &H9D

		Public Const VK_BACK_QUOTE As Integer = &HC0
		Public Const VK_QUOTE As Integer = &HDE

		''' <summary>
		''' Constant for the numeric keypad <b>up</b> arrow key. </summary>
		''' <seealso cref= #VK_UP
		''' @since 1.2 </seealso>
		Public Const VK_KP_UP As Integer = &HE0

		''' <summary>
		''' Constant for the numeric keypad <b>down</b> arrow key. </summary>
		''' <seealso cref= #VK_DOWN
		''' @since 1.2 </seealso>
		Public Const VK_KP_DOWN As Integer = &HE1

		''' <summary>
		''' Constant for the numeric keypad <b>left</b> arrow key. </summary>
		''' <seealso cref= #VK_LEFT
		''' @since 1.2 </seealso>
		Public Const VK_KP_LEFT As Integer = &HE2

		''' <summary>
		''' Constant for the numeric keypad <b>right</b> arrow key. </summary>
		''' <seealso cref= #VK_RIGHT
		''' @since 1.2 </seealso>
		Public Const VK_KP_RIGHT As Integer = &HE3

		' For European keyboards 
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_GRAVE As Integer = &H80
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_ACUTE As Integer = &H81
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_CIRCUMFLEX As Integer = &H82
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_TILDE As Integer = &H83
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_MACRON As Integer = &H84
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_BREVE As Integer = &H85
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_ABOVEDOT As Integer = &H86
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_DIAERESIS As Integer = &H87
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_ABOVERING As Integer = &H88
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_DOUBLEACUTE As Integer = &H89
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_CARON As Integer = &H8a
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_CEDILLA As Integer = &H8b
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_OGONEK As Integer = &H8c
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_IOTA As Integer = &H8d
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_VOICED_SOUND As Integer = &H8e
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_DEAD_SEMIVOICED_SOUND As Integer = &H8f

		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_AMPERSAND As Integer = &H96
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_ASTERISK As Integer = &H97
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_QUOTEDBL As Integer = &H98
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_LESS As Integer = &H99

		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_GREATER As Integer = &Ha0
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_BRACELEFT As Integer = &Ha1
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_BRACERIGHT As Integer = &Ha2

		''' <summary>
		''' Constant for the "@" key.
		''' @since 1.2
		''' </summary>
		Public Const VK_AT As Integer = &H200

		''' <summary>
		''' Constant for the ":" key.
		''' @since 1.2
		''' </summary>
		Public Const VK_COLON As Integer = &H201

		''' <summary>
		''' Constant for the "^" key.
		''' @since 1.2
		''' </summary>
		Public Const VK_CIRCUMFLEX As Integer = &H202

		''' <summary>
		''' Constant for the "$" key.
		''' @since 1.2
		''' </summary>
		Public Const VK_DOLLAR As Integer = &H203

		''' <summary>
		''' Constant for the Euro currency sign key.
		''' @since 1.2
		''' </summary>
		Public Const VK_EURO_SIGN As Integer = &H204

		''' <summary>
		''' Constant for the "!" key.
		''' @since 1.2
		''' </summary>
		Public Const VK_EXCLAMATION_MARK As Integer = &H205

		''' <summary>
		''' Constant for the inverted exclamation mark key.
		''' @since 1.2
		''' </summary>
		Public Const VK_INVERTED_EXCLAMATION_MARK As Integer = &H206

		''' <summary>
		''' Constant for the "(" key.
		''' @since 1.2
		''' </summary>
		Public Const VK_LEFT_PARENTHESIS As Integer = &H207

		''' <summary>
		''' Constant for the "#" key.
		''' @since 1.2
		''' </summary>
		Public Const VK_NUMBER_SIGN As Integer = &H208

		''' <summary>
		''' Constant for the "+" key.
		''' @since 1.2
		''' </summary>
		Public Const VK_PLUS As Integer = &H209

		''' <summary>
		''' Constant for the ")" key.
		''' @since 1.2
		''' </summary>
		Public Const VK_RIGHT_PARENTHESIS As Integer = &H20A

		''' <summary>
		''' Constant for the "_" key.
		''' @since 1.2
		''' </summary>
		Public Const VK_UNDERSCORE As Integer = &H20B

		''' <summary>
		''' Constant for the Microsoft Windows "Windows" key.
		''' It is used for both the left and right version of the key. </summary>
		''' <seealso cref= #getKeyLocation()
		''' @since 1.5 </seealso>
		Public Const VK_WINDOWS As Integer = &H20C

		''' <summary>
		''' Constant for the Microsoft Windows Context Menu key.
		''' @since 1.5
		''' </summary>
		Public Const VK_CONTEXT_MENU As Integer = &H20D

		' for input method support on Asian Keyboards 

		' not clear what this means - listed in Microsoft Windows API 
		Public Const VK_FINAL As Integer = &H18

		''' <summary>
		''' Constant for the Convert function key. </summary>
		' Japanese PC 106 keyboard, Japanese Solaris keyboard: henkan 
		Public Const VK_CONVERT As Integer = &H1C

		''' <summary>
		''' Constant for the Don't Convert function key. </summary>
		' Japanese PC 106 keyboard: muhenkan 
		Public Const VK_NONCONVERT As Integer = &H1D

		''' <summary>
		''' Constant for the Accept or Commit function key. </summary>
		' Japanese Solaris keyboard: kakutei 
		Public Const VK_ACCEPT As Integer = &H1E

		' not clear what this means - listed in Microsoft Windows API 
		Public Const VK_MODECHANGE As Integer = &H1F

	'     replaced by VK_KANA_LOCK for Microsoft Windows and Solaris;
	'       might still be used on other platforms 
		Public Const VK_KANA As Integer = &H15

	'     replaced by VK_INPUT_METHOD_ON_OFF for Microsoft Windows and Solaris;
	'       might still be used for other platforms 
		Public Const VK_KANJI As Integer = &H19

		''' <summary>
		''' Constant for the Alphanumeric function key.
		''' @since 1.2
		''' </summary>
		' Japanese PC 106 keyboard: eisuu 
		Public Const VK_ALPHANUMERIC As Integer = &HF0

		''' <summary>
		''' Constant for the Katakana function key.
		''' @since 1.2
		''' </summary>
		' Japanese PC 106 keyboard: katakana 
		Public Const VK_KATAKANA As Integer = &HF1

		''' <summary>
		''' Constant for the Hiragana function key.
		''' @since 1.2
		''' </summary>
		' Japanese PC 106 keyboard: hiragana 
		Public Const VK_HIRAGANA As Integer = &HF2

		''' <summary>
		''' Constant for the Full-Width Characters function key.
		''' @since 1.2
		''' </summary>
		' Japanese PC 106 keyboard: zenkaku 
		Public Const VK_FULL_WIDTH As Integer = &HF3

		''' <summary>
		''' Constant for the Half-Width Characters function key.
		''' @since 1.2
		''' </summary>
		' Japanese PC 106 keyboard: hankaku 
		Public Const VK_HALF_WIDTH As Integer = &HF4

		''' <summary>
		''' Constant for the Roman Characters function key.
		''' @since 1.2
		''' </summary>
		' Japanese PC 106 keyboard: roumaji 
		Public Const VK_ROMAN_CHARACTERS As Integer = &HF5

		''' <summary>
		''' Constant for the All Candidates function key.
		''' @since 1.2
		''' </summary>
		' Japanese PC 106 keyboard - VK_CONVERT + ALT: zenkouho 
		Public Const VK_ALL_CANDIDATES As Integer = &H100

		''' <summary>
		''' Constant for the Previous Candidate function key.
		''' @since 1.2
		''' </summary>
		' Japanese PC 106 keyboard - VK_CONVERT + SHIFT: maekouho 
		Public Const VK_PREVIOUS_CANDIDATE As Integer = &H101

		''' <summary>
		''' Constant for the Code Input function key.
		''' @since 1.2
		''' </summary>
		' Japanese PC 106 keyboard - VK_ALPHANUMERIC + ALT: kanji bangou 
		Public Const VK_CODE_INPUT As Integer = &H102

		''' <summary>
		''' Constant for the Japanese-Katakana function key.
		''' This key switches to a Japanese input method and selects its Katakana input mode.
		''' @since 1.2
		''' </summary>
		' Japanese Macintosh keyboard - VK_JAPANESE_HIRAGANA + SHIFT 
		Public Const VK_JAPANESE_KATAKANA As Integer = &H103

		''' <summary>
		''' Constant for the Japanese-Hiragana function key.
		''' This key switches to a Japanese input method and selects its Hiragana input mode.
		''' @since 1.2
		''' </summary>
		' Japanese Macintosh keyboard 
		Public Const VK_JAPANESE_HIRAGANA As Integer = &H104

		''' <summary>
		''' Constant for the Japanese-Roman function key.
		''' This key switches to a Japanese input method and selects its Roman-Direct input mode.
		''' @since 1.2
		''' </summary>
		' Japanese Macintosh keyboard 
		Public Const VK_JAPANESE_ROMAN As Integer = &H105

		''' <summary>
		''' Constant for the locking Kana function key.
		''' This key locks the keyboard into a Kana layout.
		''' @since 1.3
		''' </summary>
		' Japanese PC 106 keyboard with special Windows driver - eisuu + Control; Japanese Solaris keyboard: kana 
		Public Const VK_KANA_LOCK As Integer = &H106

		''' <summary>
		''' Constant for the input method on/off key.
		''' @since 1.3
		''' </summary>
		' Japanese PC 106 keyboard: kanji. Japanese Solaris keyboard: nihongo 
		Public Const VK_INPUT_METHOD_ON_OFF As Integer = &H107

		' for Sun keyboards 
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_CUT As Integer = &HFFD1
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_COPY As Integer = &HFFCD
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_PASTE As Integer = &HFFCF
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_UNDO As Integer = &HFFCB
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_AGAIN As Integer = &HFFC9
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_FIND As Integer = &HFFD0
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_PROPS As Integer = &HFFCA
		''' <summary>
		''' @since 1.2 </summary>
		Public Const VK_STOP As Integer = &HFFC8

		''' <summary>
		''' Constant for the Compose function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_COMPOSE As Integer = &HFF20

		''' <summary>
		''' Constant for the AltGraph function key.
		''' @since 1.2
		''' </summary>
		Public Const VK_ALT_GRAPH As Integer = &HFF7E

		''' <summary>
		''' Constant for the Begin key.
		''' @since 1.5
		''' </summary>
		Public Const VK_BEGIN As Integer = &HFF58

		''' <summary>
		''' This value is used to indicate that the keyCode is unknown.
		''' KEY_TYPED events do not have a keyCode value; this value
		''' is used instead.
		''' </summary>
		Public Const VK_UNDEFINED As Integer = &H0

		''' <summary>
		''' KEY_PRESSED and KEY_RELEASED events which do not map to a
		''' valid Unicode character use this for the keyChar value.
		''' </summary>
		Public Const CHAR_UNDEFINED As Char = &HFFFF

		''' <summary>
		''' A constant indicating that the keyLocation is indeterminate
		''' or not relevant.
		''' <code>KEY_TYPED</code> events do not have a keyLocation; this value
		''' is used instead.
		''' @since 1.4
		''' </summary>
		Public Const KEY_LOCATION_UNKNOWN As Integer = 0

		''' <summary>
		''' A constant indicating that the key pressed or released
		''' is not distinguished as the left or right version of a key,
		''' and did not originate on the numeric keypad (or did not
		''' originate with a virtual key corresponding to the numeric
		''' keypad).
		''' @since 1.4
		''' </summary>
		Public Const KEY_LOCATION_STANDARD As Integer = 1

		''' <summary>
		''' A constant indicating that the key pressed or released is in
		''' the left key location (there is more than one possible location
		''' for this key).  Example: the left shift key.
		''' @since 1.4
		''' </summary>
		Public Const KEY_LOCATION_LEFT As Integer = 2

		''' <summary>
		''' A constant indicating that the key pressed or released is in
		''' the right key location (there is more than one possible location
		''' for this key).  Example: the right shift key.
		''' @since 1.4
		''' </summary>
		Public Const KEY_LOCATION_RIGHT As Integer = 3

		''' <summary>
		''' A constant indicating that the key event originated on the
		''' numeric keypad or with a virtual key corresponding to the
		''' numeric keypad.
		''' @since 1.4
		''' </summary>
		Public Const KEY_LOCATION_NUMPAD As Integer = 4

		''' <summary>
		''' The unique value assigned to each of the keys on the
		''' keyboard.  There is a common set of key codes that
		''' can be fired by most keyboards.
		''' The symbolic name for a key code should be used rather
		''' than the code value itself.
		''' 
		''' @serial </summary>
		''' <seealso cref= #getKeyCode() </seealso>
		''' <seealso cref= #setKeyCode(int) </seealso>
		Friend keyCode As Integer

		''' <summary>
		''' <code>keyChar</code> is a valid unicode character
		''' that is fired by a key or a key combination on
		''' a keyboard.
		''' 
		''' @serial </summary>
		''' <seealso cref= #getKeyChar() </seealso>
		''' <seealso cref= #setKeyChar(char) </seealso>
		Friend keyChar As Char

		''' <summary>
		''' The location of the key on the keyboard.
		''' 
		''' Some keys occur more than once on a keyboard, e.g. the left and
		''' right shift keys.  Additionally, some keys occur on the numeric
		''' keypad.  This variable is used to distinguish such keys.
		''' 
		''' The only legal values are <code>KEY_LOCATION_UNKNOWN</code>,
		''' <code>KEY_LOCATION_STANDARD</code>, <code>KEY_LOCATION_LEFT</code>,
		''' <code>KEY_LOCATION_RIGHT</code>, and <code>KEY_LOCATION_NUMPAD</code>.
		''' 
		''' @serial </summary>
		''' <seealso cref= #getKeyLocation() </seealso>
		Friend keyLocation As Integer

		'set from native code.
		<NonSerialized> _
		Private rawCode As Long = 0
		<NonSerialized> _
		Private primaryLevelUnicode As Long = 0
		<NonSerialized> _
		Private scancode As Long = 0 ' for MS Windows only
		<NonSerialized> _
		Private extendedKeyCode As Long = 0

	'    
	'     * JDK 1.1 serialVersionUID
	'     
		Private Shadows Const serialVersionUID As Long = -2352130953028126954L

		Shared Sub New()
			' ensure that the necessary native libraries are loaded 
			NativeLibLoader.loadLibraries()
			If Not java.awt.GraphicsEnvironment.headless Then initIDs()

'JAVA TO VB CONVERTER TODO TASK: Anonymous inner classes are not converted to VB if the base type is not defined in the code being converted:
'			sun.awt.AWTAccessor.setKeyEventAccessor(New sun.awt.AWTAccessor.KeyEventAccessor()
	'		{
	'				public  Sub  setRawCode(KeyEvent ev, long rawCode)
	'				{
	'					ev.rawCode = rawCode;
	'				}
	'
	'				public  Sub  setPrimaryLevelUnicode(KeyEvent ev, long primaryLevelUnicode)
	'				{
	'					ev.primaryLevelUnicode = primaryLevelUnicode;
	'				}
	'
	'				public  Sub  setExtendedKeyCode(KeyEvent ev, long extendedKeyCode)
	'				{
	'					ev.extendedKeyCode = extendedKeyCode;
	'				}
	'
	'				public Component getOriginalSource(KeyEvent ev)
	'				{
	'					Return ev.originalSource;
	'				}
	'			});
		End Sub

		''' <summary>
		''' Initialize JNI field and method IDs for fields that may be
		''' accessed from C.
		''' </summary>
'JAVA TO VB CONVERTER TODO TASK: Replace 'unknown' with the appropriate dll name:
		<DllImport("unknown")> _
		Private Shared Sub initIDs()
		End Sub

		''' <summary>
		''' The original event source.
		''' 
		''' Event source can be changed during processing, but in some cases
		''' we need to be able to obtain original source.
		''' </summary>
		Private originalSource As java.awt.Component

		Private Sub New(  source As java.awt.Component,   id As Integer,   [when] As Long,   modifiers As Integer,   keyCode As Integer,   keyChar As Char,   keyLocation As Integer,   isProxyActive As Boolean)
			Me.New(source, id, [when], modifiers, keyCode, keyChar, keyLocation)
			Me.isProxyActive = isProxyActive
		End Sub

		''' <summary>
		''' Constructs a <code>KeyEvent</code> object.
		''' <p>This method throws an
		''' <code>IllegalArgumentException</code> if <code>source</code>
		''' is <code>null</code>.
		''' </summary>
		''' <param name="source">    The <code>Component</code> that originated the event </param>
		''' <param name="id">              An integer indicating the type of event.
		'''                  For information on allowable values, see
		'''                  the class description for <seealso cref="KeyEvent"/> </param>
		''' <param name="when">      A long integer that specifies the time the event
		'''                  occurred.
		'''                     Passing negative or zero value
		'''                     is not recommended </param>
		''' <param name="modifiers"> The modifier keys down during event (shift, ctrl,
		'''                  alt, meta).
		'''                     Passing negative value
		'''                     is not recommended.
		'''                     Zero value means that no modifiers were passed.
		'''                  Use either an extended _DOWN_MASK or old _MASK modifiers,
		'''                  however do not mix models in the one event.
		'''                  The extended modifiers are preferred for using </param>
		''' <param name="keyCode">   The integer code for an actual key, or VK_UNDEFINED
		'''                  (for a key-typed event) </param>
		''' <param name="keyChar">   The Unicode character generated by this event, or
		'''                  CHAR_UNDEFINED (for key-pressed and key-released
		'''                  events which do not map to a valid Unicode character) </param>
		''' <param name="keyLocation">  Identifies the key location.  The only legal
		'''        values are <code>KEY_LOCATION_UNKNOWN</code>,
		'''        <code>KEY_LOCATION_STANDARD</code>, <code>KEY_LOCATION_LEFT</code>,
		'''        <code>KEY_LOCATION_RIGHT</code>, and <code>KEY_LOCATION_NUMPAD</code>. </param>
		''' <exception cref="IllegalArgumentException">
		'''     if <code>id</code> is <code>KEY_TYPED</code> and
		'''       <code>keyChar</code> is <code>CHAR_UNDEFINED</code>;
		'''     or if <code>id</code> is <code>KEY_TYPED</code> and
		'''       <code>keyCode</code> is not <code>VK_UNDEFINED</code>;
		'''     or if <code>id</code> is <code>KEY_TYPED</code> and
		'''       <code>keyLocation</code> is not <code>KEY_LOCATION_UNKNOWN</code>;
		'''     or if <code>keyLocation</code> is not one of the legal
		'''       values enumerated above. </exception>
		''' <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		''' <seealso cref= #getSource() </seealso>
		''' <seealso cref= #getID() </seealso>
		''' <seealso cref= #getWhen() </seealso>
		''' <seealso cref= #getModifiers() </seealso>
		''' <seealso cref= #getKeyCode() </seealso>
		''' <seealso cref= #getKeyChar() </seealso>
		''' <seealso cref= #getKeyLocation()
		''' @since 1.4 </seealso>
		Public Sub New(  source As java.awt.Component,   id As Integer,   [when] As Long,   modifiers As Integer,   keyCode As Integer,   keyChar As Char,   keyLocation As Integer)
			MyBase.New(source, id, [when], modifiers)
			If id = KEY_TYPED Then
				If keyChar = CHAR_UNDEFINED Then Throw New IllegalArgumentException("invalid keyChar")
				If keyCode <> VK_UNDEFINED Then Throw New IllegalArgumentException("invalid keyCode")
				If keyLocation <> KEY_LOCATION_UNKNOWN Then Throw New IllegalArgumentException("invalid keyLocation")
			End If

			Me.keyCode = keyCode
			Me.keyChar = keyChar

			If (keyLocation < KEY_LOCATION_UNKNOWN) OrElse (keyLocation > KEY_LOCATION_NUMPAD) Then Throw New IllegalArgumentException("invalid keyLocation")
			Me.keyLocation = keyLocation
			If (modifiers <> 0) AndAlso (modifiersEx = 0) Then
				newModifiersers()
			ElseIf (modifiers = 0) AndAlso (modifiersEx <> 0) Then
				oldModifiersers()
			End If
			originalSource = source
		End Sub

		''' <summary>
		''' Constructs a <code>KeyEvent</code> object.
		''' <p> This method throws an
		''' <code>IllegalArgumentException</code> if <code>source</code>
		''' is <code>null</code>.
		''' </summary>
		''' <param name="source">    The <code>Component</code> that originated the event </param>
		''' <param name="id">              An integer indicating the type of event.
		'''                  For information on allowable values, see
		'''                  the class description for <seealso cref="KeyEvent"/> </param>
		''' <param name="when">      A long integer that specifies the time the event
		'''                  occurred.
		'''                     Passing negative or zero value
		'''                     is not recommended </param>
		''' <param name="modifiers"> The modifier keys down during event (shift, ctrl,
		'''                  alt, meta).
		'''                     Passing negative value
		'''                     is not recommended.
		'''                     Zero value means that no modifiers were passed.
		'''                  Use either an extended _DOWN_MASK or old _MASK modifiers,
		'''                  however do not mix models in the one event.
		'''                  The extended modifiers are preferred for using </param>
		''' <param name="keyCode">   The integer code for an actual key, or VK_UNDEFINED
		'''                  (for a key-typed event) </param>
		''' <param name="keyChar">   The Unicode character generated by this event, or
		'''                  CHAR_UNDEFINED (for key-pressed and key-released
		'''                  events which do not map to a valid Unicode character) </param>
		''' <exception cref="IllegalArgumentException">  if <code>id</code> is
		'''     <code>KEY_TYPED</code> and <code>keyChar</code> is
		'''     <code>CHAR_UNDEFINED</code>; or if <code>id</code> is
		'''     <code>KEY_TYPED</code> and <code>keyCode</code> is not
		'''     <code>VK_UNDEFINED</code> </exception>
		''' <exception cref="IllegalArgumentException"> if <code>source</code> is null </exception>
		''' <seealso cref= #getSource() </seealso>
		''' <seealso cref= #getID() </seealso>
		''' <seealso cref= #getWhen() </seealso>
		''' <seealso cref= #getModifiers() </seealso>
		''' <seealso cref= #getKeyCode() </seealso>
		''' <seealso cref= #getKeyChar() </seealso>
		Public Sub New(  source As java.awt.Component,   id As Integer,   [when] As Long,   modifiers As Integer,   keyCode As Integer,   keyChar As Char)
			Me.New(source, id, [when], modifiers, keyCode, keyChar, KEY_LOCATION_UNKNOWN)
		End Sub

		''' @deprecated as of JDK1.1 
		<Obsolete("as of JDK1.1")> _
		Public Sub New(  source As java.awt.Component,   id As Integer,   [when] As Long,   modifiers As Integer,   keyCode As Integer)
			Me.New(source, id, [when], modifiers, keyCode, ChrW(keyCode))
		End Sub

		''' <summary>
		''' Returns the integer keyCode associated with the key in this event.
		''' </summary>
		''' <returns> the integer code for an actual key on the keyboard.
		'''         (For <code>KEY_TYPED</code> events, the keyCode is
		'''         <code>VK_UNDEFINED</code>.) </returns>
		Public Overridable Property keyCode As Integer
			Get
				Return keyCode
			End Get
			Set(  keyCode As Integer)
				Me.keyCode = keyCode
			End Set
		End Property


		''' <summary>
		''' Returns the character associated with the key in this event.
		''' For example, the <code>KEY_TYPED</code> event for shift + "a"
		''' returns the value for "A".
		''' <p>
		''' <code>KEY_PRESSED</code> and <code>KEY_RELEASED</code> events
		''' are not intended for reporting of character input.  Therefore,
		''' the values returned by this method are guaranteed to be
		''' meaningful only for <code>KEY_TYPED</code> events.
		''' </summary>
		''' <returns> the Unicode character defined for this key event.
		'''         If no valid Unicode character exists for this key event,
		'''         <code>CHAR_UNDEFINED</code> is returned. </returns>
		Public Overridable Property keyChar As Char
			Get
				Return keyChar
			End Get
			Set(  keyChar As Char)
				Me.keyChar = keyChar
			End Set
		End Property


		''' <summary>
		''' Set the modifiers to indicate additional keys that were held down
		''' (e.g. shift, ctrl, alt, meta) defined as part of InputEvent.
		''' <p>
		''' NOTE:  use of this method is not recommended, because many AWT
		''' implementations do not recognize modifier changes.  This is
		''' especially true for <code>KEY_TYPED</code> events where the shift
		''' modifier is changed.
		''' </summary>
		''' <param name="modifiers"> an integer combination of the modifier constants. </param>
		''' <seealso cref= InputEvent </seealso>
		''' @deprecated as of JDK1.1.4 
		<Obsolete("as of JDK1.1.4")> _
		Public Overridable Property modifiers As Integer
			Set(  modifiers As Integer)
				Me.modifiers = modifiers
				If (modifiers <> 0) AndAlso (modifiersEx = 0) Then
					newModifiersers()
				ElseIf (modifiers = 0) AndAlso (modifiersEx <> 0) Then
					oldModifiersers()
				End If
			End Set
		End Property

		''' <summary>
		''' Returns the location of the key that originated this key event.
		''' 
		''' Some keys occur more than once on a keyboard, e.g. the left and
		''' right shift keys.  Additionally, some keys occur on the numeric
		''' keypad.  This provides a way of distinguishing such keys.
		''' </summary>
		''' <returns> the location of the key that was pressed or released.
		'''         Always returns <code>KEY_LOCATION_UNKNOWN</code> for
		'''         <code>KEY_TYPED</code> events.
		''' @since 1.4 </returns>
		Public Overridable Property keyLocation As Integer
			Get
				Return keyLocation
			End Get
		End Property

		''' <summary>
		''' Returns a String describing the keyCode, such as "HOME", "F1" or "A".
		''' These strings can be localized by changing the awt.properties file.
		''' </summary>
		''' <returns> a string containing a text description for a physical key,
		'''         identified by its keyCode </returns>
		Public Shared Function getKeyText(  keyCode As Integer) As String
			If keyCode >= VK_0 AndAlso keyCode <= VK_9 OrElse keyCode >= VK_A AndAlso keyCode <= VK_Z Then Return Convert.ToString(ChrW(keyCode))

			Select Case keyCode
			  Case VK_ENTER
				  Return java.awt.Toolkit.getProperty("AWT.enter", "Enter")
			  Case VK_BACK_SPACE
				  Return java.awt.Toolkit.getProperty("AWT.backSpace", "Backspace")
			  Case VK_TAB
				  Return java.awt.Toolkit.getProperty("AWT.tab", "Tab")
			  Case VK_CANCEL
				  Return java.awt.Toolkit.getProperty("AWT.cancel", "Cancel")
			  Case VK_CLEAR
				  Return java.awt.Toolkit.getProperty("AWT.clear", "Clear")
			  Case VK_COMPOSE
				  Return java.awt.Toolkit.getProperty("AWT.compose", "Compose")
			  Case VK_PAUSE
				  Return java.awt.Toolkit.getProperty("AWT.pause", "Pause")
			  Case VK_CAPS_LOCK
				  Return java.awt.Toolkit.getProperty("AWT.capsLock", "Caps Lock")
			  Case VK_ESCAPE
				  Return java.awt.Toolkit.getProperty("AWT.escape", "Escape")
			  Case VK_SPACE
				  Return java.awt.Toolkit.getProperty("AWT.space", "Space")
			  Case VK_PAGE_UP
				  Return java.awt.Toolkit.getProperty("AWT.pgup", "Page Up")
			  Case VK_PAGE_DOWN
				  Return java.awt.Toolkit.getProperty("AWT.pgdn", "Page Down")
			  Case VK_END
				  Return java.awt.Toolkit.getProperty("AWT.end", "End")
			  Case VK_HOME
				  Return java.awt.Toolkit.getProperty("AWT.home", "Home")
			  Case VK_LEFT
				  Return java.awt.Toolkit.getProperty("AWT.left", "Left")
			  Case VK_UP
				  Return java.awt.Toolkit.getProperty("AWT.up", "Up")
			  Case VK_RIGHT
				  Return java.awt.Toolkit.getProperty("AWT.right", "Right")
			  Case VK_DOWN
				  Return java.awt.Toolkit.getProperty("AWT.down", "Down")
			  Case VK_BEGIN
				  Return java.awt.Toolkit.getProperty("AWT.begin", "Begin")

			  ' modifiers
			  Case VK_SHIFT
				  Return java.awt.Toolkit.getProperty("AWT.shift", "Shift")
			  Case VK_CONTROL
				  Return java.awt.Toolkit.getProperty("AWT.control", "Control")
			  Case VK_ALT
				  Return java.awt.Toolkit.getProperty("AWT.alt", "Alt")
			  Case VK_META
				  Return java.awt.Toolkit.getProperty("AWT.meta", "Meta")
			  Case VK_ALT_GRAPH
				  Return java.awt.Toolkit.getProperty("AWT.altGraph", "Alt Graph")

			  ' punctuation
			  Case VK_COMMA
				  Return java.awt.Toolkit.getProperty("AWT.comma", "Comma")
			  Case VK_PERIOD
				  Return java.awt.Toolkit.getProperty("AWT.period", "Period")
			  Case VK_SLASH
				  Return java.awt.Toolkit.getProperty("AWT.slash", "Slash")
			  Case VK_SEMICOLON
				  Return java.awt.Toolkit.getProperty("AWT.semicolon", "Semicolon")
			  Case VK_EQUALS
				  Return java.awt.Toolkit.getProperty("AWT.equals", "Equals")
			  Case VK_OPEN_BRACKET
				  Return java.awt.Toolkit.getProperty("AWT.openBracket", "Open Bracket")
			  Case VK_BACK_SLASH
				  Return java.awt.Toolkit.getProperty("AWT.backSlash", "Back Slash")
			  Case VK_CLOSE_BRACKET
				  Return java.awt.Toolkit.getProperty("AWT.closeBracket", "Close Bracket")

			  ' numpad numeric keys handled below
			  Case VK_MULTIPLY
				  Return java.awt.Toolkit.getProperty("AWT.multiply", "NumPad *")
			  Case VK_ADD
				  Return java.awt.Toolkit.getProperty("AWT.add", "NumPad +")
			  Case VK_SEPARATOR
				  Return java.awt.Toolkit.getProperty("AWT.separator", "NumPad ,")
			  Case VK_SUBTRACT
				  Return java.awt.Toolkit.getProperty("AWT.subtract", "NumPad -")
			  Case VK_DECIMAL
				  Return java.awt.Toolkit.getProperty("AWT.decimal", "NumPad .")
			  Case VK_DIVIDE
				  Return java.awt.Toolkit.getProperty("AWT.divide", "NumPad /")
			  Case VK_DELETE
				  Return java.awt.Toolkit.getProperty("AWT.delete", "Delete")
			  Case VK_NUM_LOCK
				  Return java.awt.Toolkit.getProperty("AWT.numLock", "Num Lock")
			  Case VK_SCROLL_LOCK
				  Return java.awt.Toolkit.getProperty("AWT.scrollLock", "Scroll Lock")

			  Case VK_WINDOWS
				  Return java.awt.Toolkit.getProperty("AWT.windows", "Windows")
			  Case VK_CONTEXT_MENU
				  Return java.awt.Toolkit.getProperty("AWT.context", "Context Menu")

			  Case VK_F1
				  Return java.awt.Toolkit.getProperty("AWT.f1", "F1")
			  Case VK_F2
				  Return java.awt.Toolkit.getProperty("AWT.f2", "F2")
			  Case VK_F3
				  Return java.awt.Toolkit.getProperty("AWT.f3", "F3")
			  Case VK_F4
				  Return java.awt.Toolkit.getProperty("AWT.f4", "F4")
			  Case VK_F5
				  Return java.awt.Toolkit.getProperty("AWT.f5", "F5")
			  Case VK_F6
				  Return java.awt.Toolkit.getProperty("AWT.f6", "F6")
			  Case VK_F7
				  Return java.awt.Toolkit.getProperty("AWT.f7", "F7")
			  Case VK_F8
				  Return java.awt.Toolkit.getProperty("AWT.f8", "F8")
			  Case VK_F9
				  Return java.awt.Toolkit.getProperty("AWT.f9", "F9")
			  Case VK_F10
				  Return java.awt.Toolkit.getProperty("AWT.f10", "F10")
			  Case VK_F11
				  Return java.awt.Toolkit.getProperty("AWT.f11", "F11")
			  Case VK_F12
				  Return java.awt.Toolkit.getProperty("AWT.f12", "F12")
			  Case VK_F13
				  Return java.awt.Toolkit.getProperty("AWT.f13", "F13")
			  Case VK_F14
				  Return java.awt.Toolkit.getProperty("AWT.f14", "F14")
			  Case VK_F15
				  Return java.awt.Toolkit.getProperty("AWT.f15", "F15")
			  Case VK_F16
				  Return java.awt.Toolkit.getProperty("AWT.f16", "F16")
			  Case VK_F17
				  Return java.awt.Toolkit.getProperty("AWT.f17", "F17")
			  Case VK_F18
				  Return java.awt.Toolkit.getProperty("AWT.f18", "F18")
			  Case VK_F19
				  Return java.awt.Toolkit.getProperty("AWT.f19", "F19")
			  Case VK_F20
				  Return java.awt.Toolkit.getProperty("AWT.f20", "F20")
			  Case VK_F21
				  Return java.awt.Toolkit.getProperty("AWT.f21", "F21")
			  Case VK_F22
				  Return java.awt.Toolkit.getProperty("AWT.f22", "F22")
			  Case VK_F23
				  Return java.awt.Toolkit.getProperty("AWT.f23", "F23")
			  Case VK_F24
				  Return java.awt.Toolkit.getProperty("AWT.f24", "F24")

			  Case VK_PRINTSCREEN
				  Return java.awt.Toolkit.getProperty("AWT.printScreen", "Print Screen")
			  Case VK_INSERT
				  Return java.awt.Toolkit.getProperty("AWT.insert", "Insert")
			  Case VK_HELP
				  Return java.awt.Toolkit.getProperty("AWT.help", "Help")
			  Case VK_BACK_QUOTE
				  Return java.awt.Toolkit.getProperty("AWT.backQuote", "Back Quote")
			  Case VK_QUOTE
				  Return java.awt.Toolkit.getProperty("AWT.quote", "Quote")

			  Case VK_KP_UP
				  Return java.awt.Toolkit.getProperty("AWT.up", "Up")
			  Case VK_KP_DOWN
				  Return java.awt.Toolkit.getProperty("AWT.down", "Down")
			  Case VK_KP_LEFT
				  Return java.awt.Toolkit.getProperty("AWT.left", "Left")
			  Case VK_KP_RIGHT
				  Return java.awt.Toolkit.getProperty("AWT.right", "Right")

			  Case VK_DEAD_GRAVE
				  Return java.awt.Toolkit.getProperty("AWT.deadGrave", "Dead Grave")
			  Case VK_DEAD_ACUTE
				  Return java.awt.Toolkit.getProperty("AWT.deadAcute", "Dead Acute")
			  Case VK_DEAD_CIRCUMFLEX
				  Return java.awt.Toolkit.getProperty("AWT.deadCircumflex", "Dead Circumflex")
			  Case VK_DEAD_TILDE
				  Return java.awt.Toolkit.getProperty("AWT.deadTilde", "Dead Tilde")
			  Case VK_DEAD_MACRON
				  Return java.awt.Toolkit.getProperty("AWT.deadMacron", "Dead Macron")
			  Case VK_DEAD_BREVE
				  Return java.awt.Toolkit.getProperty("AWT.deadBreve", "Dead Breve")
			  Case VK_DEAD_ABOVEDOT
				  Return java.awt.Toolkit.getProperty("AWT.deadAboveDot", "Dead Above Dot")
			  Case VK_DEAD_DIAERESIS
				  Return java.awt.Toolkit.getProperty("AWT.deadDiaeresis", "Dead Diaeresis")
			  Case VK_DEAD_ABOVERING
				  Return java.awt.Toolkit.getProperty("AWT.deadAboveRing", "Dead Above Ring")
			  Case VK_DEAD_DOUBLEACUTE
				  Return java.awt.Toolkit.getProperty("AWT.deadDoubleAcute", "Dead Double Acute")
			  Case VK_DEAD_CARON
				  Return java.awt.Toolkit.getProperty("AWT.deadCaron", "Dead Caron")
			  Case VK_DEAD_CEDILLA
				  Return java.awt.Toolkit.getProperty("AWT.deadCedilla", "Dead Cedilla")
			  Case VK_DEAD_OGONEK
				  Return java.awt.Toolkit.getProperty("AWT.deadOgonek", "Dead Ogonek")
			  Case VK_DEAD_IOTA
				  Return java.awt.Toolkit.getProperty("AWT.deadIota", "Dead Iota")
			  Case VK_DEAD_VOICED_SOUND
				  Return java.awt.Toolkit.getProperty("AWT.deadVoicedSound", "Dead Voiced Sound")
			  Case VK_DEAD_SEMIVOICED_SOUND
				  Return java.awt.Toolkit.getProperty("AWT.deadSemivoicedSound", "Dead Semivoiced Sound")

			  Case VK_AMPERSAND
				  Return java.awt.Toolkit.getProperty("AWT.ampersand", "Ampersand")
			  Case VK_ASTERISK
				  Return java.awt.Toolkit.getProperty("AWT.asterisk", "Asterisk")
			  Case VK_QUOTEDBL
				  Return java.awt.Toolkit.getProperty("AWT.quoteDbl", "Double Quote")
			  Case VK_LESS
				  Return java.awt.Toolkit.getProperty("AWT.Less", "Less")
			  Case VK_GREATER
				  Return java.awt.Toolkit.getProperty("AWT.greater", "Greater")
			  Case VK_BRACELEFT
				  Return java.awt.Toolkit.getProperty("AWT.braceLeft", "Left Brace")
			  Case VK_BRACERIGHT
				  Return java.awt.Toolkit.getProperty("AWT.braceRight", "Right Brace")
			  Case VK_AT
				  Return java.awt.Toolkit.getProperty("AWT.at", "At")
			  Case VK_COLON
				  Return java.awt.Toolkit.getProperty("AWT.colon", "Colon")
			  Case VK_CIRCUMFLEX
				  Return java.awt.Toolkit.getProperty("AWT.circumflex", "Circumflex")
			  Case VK_DOLLAR
				  Return java.awt.Toolkit.getProperty("AWT.dollar", "Dollar")
			  Case VK_EURO_SIGN
				  Return java.awt.Toolkit.getProperty("AWT.euro", "Euro")
			  Case VK_EXCLAMATION_MARK
				  Return java.awt.Toolkit.getProperty("AWT.exclamationMark", "Exclamation Mark")
			  Case VK_INVERTED_EXCLAMATION_MARK
				  Return java.awt.Toolkit.getProperty("AWT.invertedExclamationMark", "Inverted Exclamation Mark")
			  Case VK_LEFT_PARENTHESIS
				  Return java.awt.Toolkit.getProperty("AWT.leftParenthesis", "Left Parenthesis")
			  Case VK_NUMBER_SIGN
				  Return java.awt.Toolkit.getProperty("AWT.numberSign", "Number Sign")
			  Case VK_MINUS
				  Return java.awt.Toolkit.getProperty("AWT.minus", "Minus")
			  Case VK_PLUS
				  Return java.awt.Toolkit.getProperty("AWT.plus", "Plus")
			  Case VK_RIGHT_PARENTHESIS
				  Return java.awt.Toolkit.getProperty("AWT.rightParenthesis", "Right Parenthesis")
			  Case VK_UNDERSCORE
				  Return java.awt.Toolkit.getProperty("AWT.underscore", "Underscore")

			  Case VK_FINAL
				  Return java.awt.Toolkit.getProperty("AWT.final", "Final")
			  Case VK_CONVERT
				  Return java.awt.Toolkit.getProperty("AWT.convert", "Convert")
			  Case VK_NONCONVERT
				  Return java.awt.Toolkit.getProperty("AWT.noconvert", "No Convert")
			  Case VK_ACCEPT
				  Return java.awt.Toolkit.getProperty("AWT.accept", "Accept")
			  Case VK_MODECHANGE
				  Return java.awt.Toolkit.getProperty("AWT.modechange", "Mode Change")
			  Case VK_KANA
				  Return java.awt.Toolkit.getProperty("AWT.kana", "Kana")
			  Case VK_KANJI
				  Return java.awt.Toolkit.getProperty("AWT.kanji", "Kanji")
			  Case VK_ALPHANUMERIC
				  Return java.awt.Toolkit.getProperty("AWT.alphanumeric", "Alphanumeric")
			  Case VK_KATAKANA
				  Return java.awt.Toolkit.getProperty("AWT.katakana", "Katakana")
			  Case VK_HIRAGANA
				  Return java.awt.Toolkit.getProperty("AWT.hiragana", "Hiragana")
			  Case VK_FULL_WIDTH
				  Return java.awt.Toolkit.getProperty("AWT.fullWidth", "Full-Width")
			  Case VK_HALF_WIDTH
				  Return java.awt.Toolkit.getProperty("AWT.halfWidth", "Half-Width")
			  Case VK_ROMAN_CHARACTERS
				  Return java.awt.Toolkit.getProperty("AWT.romanCharacters", "Roman Characters")
			  Case VK_ALL_CANDIDATES
				  Return java.awt.Toolkit.getProperty("AWT.allCandidates", "All Candidates")
			  Case VK_PREVIOUS_CANDIDATE
				  Return java.awt.Toolkit.getProperty("AWT.previousCandidate", "Previous Candidate")
			  Case VK_CODE_INPUT
				  Return java.awt.Toolkit.getProperty("AWT.codeInput", "Code Input")
			  Case VK_JAPANESE_KATAKANA
				  Return java.awt.Toolkit.getProperty("AWT.japaneseKatakana", "Japanese Katakana")
			  Case VK_JAPANESE_HIRAGANA
				  Return java.awt.Toolkit.getProperty("AWT.japaneseHiragana", "Japanese Hiragana")
			  Case VK_JAPANESE_ROMAN
				  Return java.awt.Toolkit.getProperty("AWT.japaneseRoman", "Japanese Roman")
			  Case VK_KANA_LOCK
				  Return java.awt.Toolkit.getProperty("AWT.kanaLock", "Kana Lock")
			  Case VK_INPUT_METHOD_ON_OFF
				  Return java.awt.Toolkit.getProperty("AWT.inputMethodOnOff", "Input Method On/Off")

			  Case VK_AGAIN
				  Return java.awt.Toolkit.getProperty("AWT.again", "Again")
			  Case VK_UNDO
				  Return java.awt.Toolkit.getProperty("AWT.undo", "Undo")
			  Case VK_COPY
				  Return java.awt.Toolkit.getProperty("AWT.copy", "Copy")
			  Case VK_PASTE
				  Return java.awt.Toolkit.getProperty("AWT.paste", "Paste")
			  Case VK_CUT
				  Return java.awt.Toolkit.getProperty("AWT.cut", "Cut")
			  Case VK_FIND
				  Return java.awt.Toolkit.getProperty("AWT.find", "Find")
			  Case VK_PROPS
				  Return java.awt.Toolkit.getProperty("AWT.props", "Props")
			  Case VK_STOP
				  Return java.awt.Toolkit.getProperty("AWT.stop", "Stop")
			End Select

			If keyCode >= VK_NUMPAD0 AndAlso keyCode <= VK_NUMPAD9 Then
				Dim numpad As String = java.awt.Toolkit.getProperty("AWT.numpad", "NumPad")
				Dim c As Char = ChrW(keyCode - VK_NUMPAD0 + AscW("0"c))
				Return numpad & "-" & AscW(c)
			End If

			If (keyCode And &H1000000) <> 0 Then Return Convert.ToString(CChar(keyCode Xor &H1000000))
			Dim unknown As String = java.awt.Toolkit.getProperty("AWT.unknown", "Unknown")
			Return unknown & " keyCode: 0x" & Convert.ToString(keyCode, 16)
		End Function

		''' <summary>
		''' Returns a <code>String</code> describing the modifier key(s),
		''' such as "Shift", or "Ctrl+Shift".  These strings can be
		''' localized by changing the <code>awt.properties</code> file.
		''' <p>
		''' Note that <code>InputEvent.ALT_MASK</code> and
		''' <code>InputEvent.BUTTON2_MASK</code> have the same value,
		''' so the string "Alt" is returned for both modifiers.  Likewise,
		''' <code>InputEvent.META_MASK</code> and
		''' <code>InputEvent.BUTTON3_MASK</code> have the same value,
		''' so the string "Meta" is returned for both modifiers.
		''' </summary>
		''' <returns> string a text description of the combination of modifier
		'''                keys that were held down during the event </returns>
		''' <seealso cref= InputEvent#getModifiersExText(int) </seealso>
		Public Shared Function getKeyModifiersText(  modifiers As Integer) As String
			Dim buf As New StringBuilder
			If (modifiers And InputEvent.META_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.meta", "Meta"))
				buf.append("+")
			End If
			If (modifiers And InputEvent.CTRL_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.control", "Ctrl"))
				buf.append("+")
			End If
			If (modifiers And InputEvent.ALT_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.alt", "Alt"))
				buf.append("+")
			End If
			If (modifiers And InputEvent.SHIFT_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.shift", "Shift"))
				buf.append("+")
			End If
			If (modifiers And InputEvent.ALT_GRAPH_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.altGraph", "Alt Graph"))
				buf.append("+")
			End If
			If (modifiers And InputEvent.BUTTON1_MASK) <> 0 Then
				buf.append(java.awt.Toolkit.getProperty("AWT.button1", "Button1"))
				buf.append("+")
			End If
			If buf.length() > 0 Then buf.length = buf.length()-1 ' remove trailing '+'
			Return buf.ToString()
		End Function


		''' <summary>
		''' Returns whether the key in this event is an "action" key.
		''' Typically an action key does not fire a unicode character and is
		''' not a modifier key.
		''' </summary>
		''' <returns> <code>true</code> if the key is an "action" key,
		'''         <code>false</code> otherwise </returns>
		Public Overridable Property actionKey As Boolean
			Get
				Select Case keyCode
				  Case VK_HOME, VK_END, VK_PAGE_UP, VK_PAGE_DOWN, VK_UP, VK_DOWN, VK_LEFT, VK_RIGHT, VK_BEGIN, VK_KP_LEFT, VK_KP_UP, VK_KP_RIGHT, VK_KP_DOWN, VK_F1, VK_F2, VK_F3, VK_F4, VK_F5, VK_F6, VK_F7, VK_F8, VK_F9, VK_F10, VK_F11, VK_F12, VK_F13, VK_F14, VK_F15, VK_F16, VK_F17, VK_F18, VK_F19, VK_F20, VK_F21, VK_F22, VK_F23, VK_F24, VK_PRINTSCREEN, VK_SCROLL_LOCK, VK_CAPS_LOCK, VK_NUM_LOCK, VK_PAUSE, VK_INSERT, VK_FINAL, VK_CONVERT, VK_NONCONVERT, VK_ACCEPT, VK_MODECHANGE, VK_KANA, VK_KANJI, VK_ALPHANUMERIC, VK_KATAKANA, VK_HIRAGANA, VK_FULL_WIDTH, VK_HALF_WIDTH, VK_ROMAN_CHARACTERS, VK_ALL_CANDIDATES, VK_PREVIOUS_CANDIDATE, VK_CODE_INPUT, VK_JAPANESE_KATAKANA, VK_JAPANESE_HIRAGANA, VK_JAPANESE_ROMAN, VK_KANA_LOCK, VK_INPUT_METHOD_ON_OFF, VK_AGAIN, VK_UNDO, VK_COPY, VK_PASTE, VK_CUT, VK_FIND, VK_PROPS, VK_STOP, VK_HELP, VK_WINDOWS, VK_CONTEXT_MENU
    
    
    
    
    
					  Return True
				End Select
				Return False
			End Get
		End Property

		''' <summary>
		''' Returns a parameter string identifying this event.
		''' This method is useful for event logging and for debugging.
		''' </summary>
		''' <returns> a string identifying the event and its attributes </returns>
		Public Overrides Function paramString() As String
			Dim str As New StringBuilder(100)

			Select Case id
			  Case KEY_PRESSED
				str.append("KEY_PRESSED")
			  Case KEY_RELEASED
				str.append("KEY_RELEASED")
			  Case KEY_TYPED
				str.append("KEY_TYPED")
			  Case Else
				str.append("unknown type")
			End Select

			str.append(",keyCode=").append(keyCode)
			str.append(",keyText=").append(getKeyText(keyCode))

	'         Some keychars don't print well, e.g. escape, backspace,
	'         * tab, return, delete, cancel.  Get keyText for the keyCode
	'         * instead of the keyChar.
	'         
			str.append(",keyChar=")
			Select Case keyChar
			  Case ControlChars.Back
				str.append(getKeyText(VK_BACK_SPACE))
			  Case ControlChars.Tab
				str.append(getKeyText(VK_TAB))
			  Case ControlChars.Lf
				str.append(getKeyText(VK_ENTER))
			  Case ChrW(&H0018)
				str.append(getKeyText(VK_CANCEL))
			  Case ChrW(&H001b)
				str.append(getKeyText(VK_ESCAPE))
			  Case ChrW(&H007f)
				str.append(getKeyText(VK_DELETE))
			  Case CHAR_UNDEFINED
				str.append(java.awt.Toolkit.getProperty("AWT.undefined", "Undefined"))
				str.append(" keyChar")
			  Case Else
				str.append("'").append(keyChar).append("'")
			End Select

			If modifiers <> 0 Then str.append(",modifiers=").append(getKeyModifiersText(modifiers))
			If modifiersEx <> 0 Then str.append(",extModifiers=").append(getModifiersExText(modifiers))

			str.append(",keyLocation=")
			Select Case keyLocation
			  Case KEY_LOCATION_UNKNOWN
				str.append("KEY_LOCATION_UNKNOWN")
			  Case KEY_LOCATION_STANDARD
				str.append("KEY_LOCATION_STANDARD")
			  Case KEY_LOCATION_LEFT
				str.append("KEY_LOCATION_LEFT")
			  Case KEY_LOCATION_RIGHT
				str.append("KEY_LOCATION_RIGHT")
			  Case KEY_LOCATION_NUMPAD
				str.append("KEY_LOCATION_NUMPAD")
			  Case Else
				str.append("KEY_LOCATION_UNKNOWN")
			End Select
			str.append(",rawCode=").append(rawCode)
			str.append(",primaryLevelUnicode=").append(primaryLevelUnicode)
			str.append(",scancode=").append(scancode)
			str.append(",extendedKeyCode=0x").append(Long.toHexString(extendedKeyCode))

			Return str.ToString()
		End Function
		''' <summary>
		''' Returns an extended key code for the event.
		''' The extended key code is a unique id assigned to  a key on the keyboard
		''' just like {@code keyCode}. However, unlike {@code keyCode}, this value depends on the
		''' current keyboard layout. For instance, pressing the left topmost letter key
		''' in a common English layout produces the same value as {@code keyCode}, {@code VK_Q}.
		''' Pressing the same key in a regular Russian layout gives another code, unique for the
		''' letter "Cyrillic I short".
		''' 
		''' @since 1.7
		''' 
		''' </summary>
		Public Overridable Property extendedKeyCode As Integer
			Get
				Return CInt(extendedKeyCode)
			End Get
		End Property
		''' <summary>
		''' Returns an extended key code for a unicode character.
		''' </summary>
		''' <returns> for a unicode character with a corresponding {@code VK_} constant -- this
		'''   {@code VK_} constant; for a character appearing on the primary
		'''   level of a known keyboard layout -- a unique  java.lang.[Integer].
		'''   If a character does not appear on the primary level of a known keyboard,
		'''   {@code VK_UNDEFINED} is returned.
		''' 
		''' @since 1.7
		'''  </returns>
		Public Shared Function getExtendedKeyCodeForChar(  c As Integer) As Integer
			' Return a keycode (if any) associated with a character.
			Return sun.awt.ExtendedKeyCodes.getExtendedKeyCodeForChar(c)
		End Function

		''' <summary>
		''' Sets new modifiers by the old ones. The key modifiers
		''' override overlaping mouse modifiers.
		''' </summary>
		Private Sub setNewModifiers()
			If (modifiers And SHIFT_MASK) <> 0 Then modifiers = modifiers Or SHIFT_DOWN_MASK
			If (modifiers And ALT_MASK) <> 0 Then modifiers = modifiers Or ALT_DOWN_MASK
			If (modifiers And CTRL_MASK) <> 0 Then modifiers = modifiers Or CTRL_DOWN_MASK
			If (modifiers And META_MASK) <> 0 Then modifiers = modifiers Or META_DOWN_MASK
			If (modifiers And ALT_GRAPH_MASK) <> 0 Then modifiers = modifiers Or ALT_GRAPH_DOWN_MASK
			If (modifiers And BUTTON1_MASK) <> 0 Then modifiers = modifiers Or BUTTON1_DOWN_MASK
		End Sub

		''' <summary>
		''' Sets old modifiers by the new ones.
		''' </summary>
		Private Sub setOldModifiers()
			If (modifiers And SHIFT_DOWN_MASK) <> 0 Then modifiers = modifiers Or SHIFT_MASK
			If (modifiers And ALT_DOWN_MASK) <> 0 Then modifiers = modifiers Or ALT_MASK
			If (modifiers And CTRL_DOWN_MASK) <> 0 Then modifiers = modifiers Or CTRL_MASK
			If (modifiers And META_DOWN_MASK) <> 0 Then modifiers = modifiers Or META_MASK
			If (modifiers And ALT_GRAPH_DOWN_MASK) <> 0 Then modifiers = modifiers Or ALT_GRAPH_MASK
			If (modifiers And BUTTON1_DOWN_MASK) <> 0 Then modifiers = modifiers Or BUTTON1_MASK
		End Sub

		''' <summary>
		''' Sets new modifiers by the old ones. The key modifiers
		''' override overlaping mouse modifiers.
		''' @serial
		''' </summary>
		Private Sub readObject(  s As java.io.ObjectInputStream)
			s.defaultReadObject()
			If modifiers <> 0 AndAlso modifiersEx = 0 Then newModifiersers()
		End Sub
	End Class

End Namespace