Imports System
Imports System.Runtime.CompilerServices
Imports System.Runtime.InteropServices
Imports javax.accessibility

'
' * Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 
Namespace java.awt


	''' <summary>
	''' A <code>TextField</code> object is a text component
	''' that allows for the editing of a single line of text.
	''' <p>
	''' For example, the following image depicts a frame with four
	''' text fields of varying widths. Two of these text fields
	''' display the predefined text <code>"Hello"</code>.
	''' <p>
	''' <img src="doc-files/TextField-1.gif" alt="The preceding text describes this image."
	''' style="float:center; margin: 7px 10px;">
	''' <p>
	''' Here is the code that produces these four text fields:
	''' 
	''' <hr><blockquote><pre>
	''' TextField tf1, tf2, tf3, tf4;
	''' // a blank text field
	''' tf1 = new TextField();
	''' // blank field of 20 columns
	''' tf2 = new TextField("", 20);
	''' // predefined text displayed
	''' tf3 = new TextField("Hello!");
	''' // predefined text in 30 columns
	''' tf4 = new TextField("Hello", 30);
	''' </pre></blockquote><hr>
	''' <p>
	''' Every time the user types a key in the text field, one or
	''' more key events are sent to the text field.  A <code>KeyEvent</code>
	''' may be one of three types: keyPressed, keyReleased, or keyTyped.
	''' The properties of a key event indicate which of these types
	''' it is, as well as additional information about the event,
	''' such as what modifiers are applied to the key event and the
	''' time at which the event occurred.
	''' <p>
	''' The key event is passed to every <code>KeyListener</code>
	''' or <code>KeyAdapter</code> object which registered to receive such
	''' events using the component's <code>addKeyListener</code> method.
	''' (<code>KeyAdapter</code> objects implement the
	''' <code>KeyListener</code> interface.)
	''' <p>
	''' It is also possible to fire an <code>ActionEvent</code>.
	''' If action events are enabled for the text field, they may
	''' be fired by pressing the <code>Return</code> key.
	''' <p>
	''' The <code>TextField</code> class's <code>processEvent</code>
	''' method examines the action event and passes it along to
	''' <code>processActionEvent</code>. The latter method redirects the
	''' event to any <code>ActionListener</code> objects that have
	''' registered to receive action events generated by this
	''' text field.
	''' 
	''' @author      Sami Shaio </summary>
	''' <seealso cref=         java.awt.event.KeyEvent </seealso>
	''' <seealso cref=         java.awt.event.KeyAdapter </seealso>
	''' <seealso cref=         java.awt.event.KeyListener </seealso>
	''' <seealso cref=         java.awt.event.ActionEvent </seealso>
	''' <seealso cref=         java.awt.Component#addKeyListener </seealso>
	''' <seealso cref=         java.awt.TextField#processEvent </seealso>
	''' <seealso cref=         java.awt.TextField#processActionEvent </seealso>
	''' <seealso cref=         java.awt.TextField#addActionListener
	''' @since       JDK1.0 </seealso>
	Public Class TextField
		Inherits TextComponent

		''' <summary>
		''' The number of columns in the text field.
		''' A column is an approximate average character
		''' width that is platform-dependent.
		''' Guaranteed to be non-negative.
		''' 
		''' @serial </summary>
		''' <seealso cref= #setColumns(int) </seealso>
		''' <seealso cref= #getColumns() </seealso>
		Friend columns As Integer

		''' <summary>
		''' The echo character, which is used when
		''' the user wishes to disguise the characters
		''' typed into the text field.
		''' The disguises are removed if echoChar = <code>0</code>.
		''' 
		''' @serial </summary>
		''' <seealso cref= #getEchoChar() </seealso>
		''' <seealso cref= #setEchoChar(char) </seealso>
		''' <seealso cref= #echoCharIsSet() </seealso>
		Friend echoChar As Char

		<NonSerialized> _
		Friend actionListener As ActionListener

		Private Const base As String = "textfield"
		Private Shared nameCounter As Integer = 0

	'    
	'     * JDK 1.1 serialVersionUID
	'     
		Private Const serialVersionUID As Long = -2966288784432217853L

		''' <summary>
		''' Initialize JNI field and method ids
		''' </summary>
'JAVA TO VB CONVERTER TODO TASK: Replace 'unknown' with the appropriate dll name:
		<DllImport("unknown")> _
		Private Shared Sub initIDs()
		End Sub

		Shared Sub New()
			' ensure that the necessary native libraries are loaded 
			Toolkit.loadLibraries()
			If Not GraphicsEnvironment.headless Then initIDs()
		End Sub

		''' <summary>
		''' Constructs a new text field. </summary>
		''' <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		''' returns true. </exception>
		''' <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
		Public Sub New()
			Me.New("", 0)
		End Sub

		''' <summary>
		''' Constructs a new text field initialized with the specified text. </summary>
		''' <param name="text">       the text to be displayed. If
		'''             <code>text</code> is <code>null</code>, the empty
		'''             string <code>""</code> will be displayed. </param>
		''' <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		''' returns true. </exception>
		''' <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
		Public Sub New(  text As String)
			Me.New(text,If(text IsNot Nothing, text.length(), 0))
		End Sub

		''' <summary>
		''' Constructs a new empty text field with the specified number
		''' of columns.  A column is an approximate average character
		''' width that is platform-dependent. </summary>
		''' <param name="columns">     the number of columns.  If
		'''             <code>columns</code> is less than <code>0</code>,
		'''             <code>columns</code> is set to <code>0</code>. </param>
		''' <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		''' returns true. </exception>
		''' <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
		Public Sub New(  columns As Integer)
			Me.New("", columns)
		End Sub

		''' <summary>
		''' Constructs a new text field initialized with the specified text
		''' to be displayed, and wide enough to hold the specified
		''' number of columns. A column is an approximate average character
		''' width that is platform-dependent. </summary>
		''' <param name="text">       the text to be displayed. If
		'''             <code>text</code> is <code>null</code>, the empty
		'''             string <code>""</code> will be displayed. </param>
		''' <param name="columns">     the number of columns.  If
		'''             <code>columns</code> is less than <code>0</code>,
		'''             <code>columns</code> is set to <code>0</code>. </param>
		''' <exception cref="HeadlessException"> if GraphicsEnvironment.isHeadless()
		''' returns true. </exception>
		''' <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
		Public Sub New(  text As String,   columns As Integer)
			MyBase.New(text)
			Me.columns = If(columns >= 0, columns, 0)
		End Sub

		''' <summary>
		''' Construct a name for this component.  Called by getName() when the
		''' name is null.
		''' </summary>
		Friend Overrides Function constructComponentName() As String
			SyncLock GetType(TextField)
					Dim tempVar As Integer = nameCounter
					nameCounter += 1
					Return base + tempVar
			End SyncLock
		End Function

		''' <summary>
		''' Creates the TextField's peer.  The peer allows us to modify the
		''' appearance of the TextField without changing its functionality.
		''' </summary>
		Public Overrides Sub addNotify()
			SyncLock treeLock
				If peer Is Nothing Then peer = toolkit.createTextField(Me)
				MyBase.addNotify()
			End SyncLock
		End Sub

		''' <summary>
		''' Gets the character that is to be used for echoing.
		''' <p>
		''' An echo character is useful for text fields where
		''' user input should not be echoed to the screen, as in
		''' the case of a text field for entering a password.
		''' If <code>echoChar</code> = <code>0</code>, user
		''' input is echoed to the screen unchanged.
		''' <p>
		''' A Java platform implementation may support only a limited,
		''' non-empty set of echo characters. This function returns the
		''' echo character originally requested via setEchoChar(). The echo
		''' character actually used by the TextField implementation might be
		''' different. </summary>
		''' <returns>      the echo character for this text field. </returns>
		''' <seealso cref=         java.awt.TextField#echoCharIsSet </seealso>
		''' <seealso cref=         java.awt.TextField#setEchoChar </seealso>
		Public Overridable Property echoChar As Char
			Get
				Return echoChar
			End Get
			Set(  c As Char)
				echoCharacter = c
			End Set
		End Property


		''' @deprecated As of JDK version 1.1,
		''' replaced by <code>setEchoChar(char)</code>. 
		<Obsolete("As of JDK version 1.1,"), MethodImpl(MethodImplOptions.Synchronized)> _
		Public Overridable Property echoCharacter As Char
			Set(  c As Char)
				If echoChar <> c Then
					echoChar = c
					Dim peer_Renamed As java.awt.peer.TextFieldPeer = CType(Me.peer, java.awt.peer.TextFieldPeer)
					If peer_Renamed IsNot Nothing Then peer_Renamed.echoChar = c
				End If
			End Set
		End Property

		''' <summary>
		''' Sets the text that is presented by this
		''' text component to be the specified text. </summary>
		''' <param name="t">   the new text. </param>
		''' <seealso cref=         java.awt.TextComponent#getText </seealso>
		Public Overrides Property text As String
			Set(  t As String)
				MyBase.text = t
    
				' This could change the preferred size of the Component.
				invalidateIfValid()
			End Set
		End Property

		''' <summary>
		''' Indicates whether or not this text field has a
		''' character set for echoing.
		''' <p>
		''' An echo character is useful for text fields where
		''' user input should not be echoed to the screen, as in
		''' the case of a text field for entering a password. </summary>
		''' <returns>     <code>true</code> if this text field has
		'''                 a character set for echoing;
		'''                 <code>false</code> otherwise. </returns>
		''' <seealso cref=        java.awt.TextField#setEchoChar </seealso>
		''' <seealso cref=        java.awt.TextField#getEchoChar </seealso>
		Public Overridable Function echoCharIsSet() As Boolean
			Return AscW(echoChar) <> 0
		End Function

		''' <summary>
		''' Gets the number of columns in this text field. A column is an
		''' approximate average character width that is platform-dependent. </summary>
		''' <returns>     the number of columns. </returns>
		''' <seealso cref=        java.awt.TextField#setColumns
		''' @since      JDK1.1 </seealso>
		Public Overridable Property columns As Integer
			Get
				Return columns
			End Get
			Set(  columns As Integer)
				Dim oldVal As Integer
				SyncLock Me
					oldVal = Me.columns
					If columns < 0 Then Throw New IllegalArgumentException("columns less than zero.")
					If columns <> oldVal Then Me.columns = columns
				End SyncLock
    
				If columns <> oldVal Then invalidate()
			End Set
		End Property


		''' <summary>
		''' Gets the preferred size of this text field
		''' with the specified number of columns. </summary>
		''' <param name="columns"> the number of columns
		'''                 in this text field. </param>
		''' <returns>    the preferred dimensions for
		'''                 displaying this text field.
		''' @since     JDK1.1 </returns>
		Public Overridable Function getPreferredSize(  columns As Integer) As Dimension
			Return preferredSize(columns)
		End Function

		''' @deprecated As of JDK version 1.1,
		''' replaced by <code>getPreferredSize(int)</code>. 
		<Obsolete("As of JDK version 1.1,")> _
		Public Overridable Function preferredSize(  columns As Integer) As Dimension
			SyncLock treeLock
				Dim peer_Renamed As java.awt.peer.TextFieldPeer = CType(Me.peer, java.awt.peer.TextFieldPeer)
				Return If(peer_Renamed IsNot Nothing, peer_Renamed.getPreferredSize(columns), MyBase.preferredSize())
			End SyncLock
		End Function

		''' <summary>
		''' Gets the preferred size of this text field. </summary>
		''' <returns>     the preferred dimensions for
		'''                         displaying this text field.
		''' @since      JDK1.1 </returns>
		Public  Overrides ReadOnly Property  preferredSize As Dimension
			Get
				Return preferredSize()
			End Get
		End Property

		''' @deprecated As of JDK version 1.1,
		''' replaced by <code>getPreferredSize()</code>. 
		<Obsolete("As of JDK version 1.1,")> _
		Public Overrides Function preferredSize() As Dimension
			SyncLock treeLock
				Return If(columns > 0, preferredSize(columns), MyBase.preferredSize())
			End SyncLock
		End Function

		''' <summary>
		''' Gets the minimum dimensions for a text field with
		''' the specified number of columns. </summary>
		''' <param name="columns">   the number of columns in
		'''                          this text field.
		''' @since    JDK1.1 </param>
		Public Overridable Function getMinimumSize(  columns As Integer) As Dimension
			Return minimumSize(columns)
		End Function

		''' @deprecated As of JDK version 1.1,
		''' replaced by <code>getMinimumSize(int)</code>. 
		<Obsolete("As of JDK version 1.1,")> _
		Public Overridable Function minimumSize(  columns As Integer) As Dimension
			SyncLock treeLock
				Dim peer_Renamed As java.awt.peer.TextFieldPeer = CType(Me.peer, java.awt.peer.TextFieldPeer)
				Return If(peer_Renamed IsNot Nothing, peer_Renamed.getMinimumSize(columns), MyBase.minimumSize())
			End SyncLock
		End Function

		''' <summary>
		''' Gets the minimum dimensions for this text field. </summary>
		''' <returns>     the minimum dimensions for
		'''                  displaying this text field.
		''' @since      JDK1.1 </returns>
		Public  Overrides ReadOnly Property  minimumSize As Dimension
			Get
				Return minimumSize()
			End Get
		End Property

		''' @deprecated As of JDK version 1.1,
		''' replaced by <code>getMinimumSize()</code>. 
		<Obsolete("As of JDK version 1.1,")> _
		Public Overrides Function minimumSize() As Dimension
			SyncLock treeLock
				Return If(columns > 0, minimumSize(columns), MyBase.minimumSize())
			End SyncLock
		End Function

		''' <summary>
		''' Adds the specified action listener to receive
		''' action events from this text field.
		''' If l is null, no exception is thrown and no action is performed.
		''' <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		''' >AWT Threading Issues</a> for details on AWT's threading model.
		''' </summary>
		''' <param name="l"> the action listener. </param>
		''' <seealso cref=        #removeActionListener </seealso>
		''' <seealso cref=        #getActionListeners </seealso>
		''' <seealso cref=        java.awt.event.ActionListener
		''' @since      JDK1.1 </seealso>
		<MethodImpl(MethodImplOptions.Synchronized)> _
		Public Overridable Sub addActionListener(  l As ActionListener)
			If l Is Nothing Then Return
			actionListener = AWTEventMulticaster.add(actionListener, l)
			newEventsOnly = True
		End Sub

		''' <summary>
		''' Removes the specified action listener so that it no longer
		''' receives action events from this text field.
		''' If l is null, no exception is thrown and no action is performed.
		''' <p>Refer to <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		''' >AWT Threading Issues</a> for details on AWT's threading model.
		''' </summary>
		''' <param name="l"> the action listener. </param>
		''' <seealso cref=             #addActionListener </seealso>
		''' <seealso cref=             #getActionListeners </seealso>
		''' <seealso cref=             java.awt.event.ActionListener
		''' @since           JDK1.1 </seealso>
		<MethodImpl(MethodImplOptions.Synchronized)> _
		Public Overridable Sub removeActionListener(  l As ActionListener)
			If l Is Nothing Then Return
			actionListener = AWTEventMulticaster.remove(actionListener, l)
		End Sub

		''' <summary>
		''' Returns an array of all the action listeners
		''' registered on this textfield.
		''' </summary>
		''' <returns> all of this textfield's <code>ActionListener</code>s
		'''         or an empty array if no action
		'''         listeners are currently registered
		''' </returns>
		''' <seealso cref= #addActionListener </seealso>
		''' <seealso cref= #removeActionListener </seealso>
		''' <seealso cref= java.awt.event.ActionListener
		''' @since 1.4 </seealso>
		<MethodImpl(MethodImplOptions.Synchronized)> _
		Public Overridable Property actionListeners As ActionListener()
			Get
				Return getListeners(GetType(ActionListener))
			End Get
		End Property

		''' <summary>
		''' Returns an array of all the objects currently registered
		''' as <code><em>Foo</em>Listener</code>s
		''' upon this <code>TextField</code>.
		''' <code><em>Foo</em>Listener</code>s are registered using the
		''' <code>add<em>Foo</em>Listener</code> method.
		''' 
		''' <p>
		''' You can specify the <code>listenerType</code> argument
		''' with a class literal, such as
		''' <code><em>Foo</em>Listener.class</code>.
		''' For example, you can query a
		''' <code>TextField</code> <code>t</code>
		''' for its action listeners with the following code:
		''' 
		''' <pre>ActionListener[] als = (ActionListener[])(t.getListeners(ActionListener.class));</pre>
		''' 
		''' If no such listeners exist, this method returns an empty array.
		''' </summary>
		''' <param name="listenerType"> the type of listeners requested; this parameter
		'''          should specify an interface that descends from
		'''          <code>java.util.EventListener</code> </param>
		''' <returns> an array of all objects registered as
		'''          <code><em>Foo</em>Listener</code>s on this textfield,
		'''          or an empty array if no such
		'''          listeners have been added </returns>
		''' <exception cref="ClassCastException"> if <code>listenerType</code>
		'''          doesn't specify a class or interface that implements
		'''          <code>java.util.EventListener</code>
		''' </exception>
		''' <seealso cref= #getActionListeners
		''' @since 1.3 </seealso>
		Public Overrides Function getListeners(Of T As java.util.EventListener)(  listenerType As [Class]) As T()
			Dim l As java.util.EventListener = Nothing
			If listenerType Is GetType(ActionListener) Then
				l = actionListener
			Else
				Return MyBase.getListeners(listenerType)
			End If
			Return AWTEventMulticaster.getListeners(l, listenerType)
		End Function

		' REMIND: remove when filtering is done at lower level
		Friend Overrides Function eventEnabled(  e As AWTEvent) As Boolean
			If e.id = ActionEvent.ACTION_PERFORMED Then
				If (eventMask And AWTEvent.ACTION_EVENT_MASK) <> 0 OrElse actionListener IsNot Nothing Then Return True
				Return False
			End If
			Return MyBase.eventEnabled(e)
		End Function

		''' <summary>
		''' Processes events on this text field. If the event
		''' is an instance of <code>ActionEvent</code>,
		''' it invokes the <code>processActionEvent</code>
		''' method. Otherwise, it invokes <code>processEvent</code>
		''' on the superclass.
		''' <p>Note that if the event parameter is <code>null</code>
		''' the behavior is unspecified and may result in an
		''' exception.
		''' </summary>
		''' <param name="e"> the event </param>
		''' <seealso cref=        java.awt.event.ActionEvent </seealso>
		''' <seealso cref=        java.awt.TextField#processActionEvent
		''' @since      JDK1.1 </seealso>
		Protected Friend Overrides Sub processEvent(  e As AWTEvent)
			If TypeOf e Is ActionEvent Then
				processActionEvent(CType(e, ActionEvent))
				Return
			End If
			MyBase.processEvent(e)
		End Sub

		''' <summary>
		''' Processes action events occurring on this text field by
		''' dispatching them to any registered
		''' <code>ActionListener</code> objects.
		''' <p>
		''' This method is not called unless action events are
		''' enabled for this component. Action events are enabled
		''' when one of the following occurs:
		''' <ul>
		''' <li>An <code>ActionListener</code> object is registered
		''' via <code>addActionListener</code>.
		''' <li>Action events are enabled via <code>enableEvents</code>.
		''' </ul>
		''' <p>Note that if the event parameter is <code>null</code>
		''' the behavior is unspecified and may result in an
		''' exception.
		''' </summary>
		''' <param name="e"> the action event </param>
		''' <seealso cref=         java.awt.event.ActionListener </seealso>
		''' <seealso cref=         java.awt.TextField#addActionListener </seealso>
		''' <seealso cref=         java.awt.Component#enableEvents
		''' @since       JDK1.1 </seealso>
		Protected Friend Overridable Sub processActionEvent(  e As ActionEvent)
			Dim listener As ActionListener = actionListener
			If listener IsNot Nothing Then listener.actionPerformed(e)
		End Sub

		''' <summary>
		''' Returns a string representing the state of this <code>TextField</code>.
		''' This method is intended to be used only for debugging purposes, and the
		''' content and format of the returned string may vary between
		''' implementations. The returned string may be empty but may not be
		''' <code>null</code>.
		''' </summary>
		''' <returns>      the parameter string of this text field </returns>
		Protected Friend Overrides Function paramString() As String
			Dim str As String = MyBase.paramString()
			If AscW(echoChar) <> 0 Then str &= ",echo=" & AscW(echoChar)
			Return str
		End Function


	'    
	'     * Serialization support.
	'     
		''' <summary>
		''' The textField Serialized Data Version.
		''' 
		''' @serial
		''' </summary>
		Private textFieldSerializedDataVersion As Integer = 1

		''' <summary>
		''' Writes default serializable fields to stream.  Writes
		''' a list of serializable ActionListener(s) as optional data.
		''' The non-serializable ActionListener(s) are detected and
		''' no attempt is made to serialize them.
		''' 
		''' @serialData Null terminated sequence of zero or more pairs.
		'''             A pair consists of a String and Object.
		'''             The String indicates the type of object and
		'''             is one of the following :
		'''             ActionListenerK indicating and ActionListener object.
		''' </summary>
		''' <seealso cref= AWTEventMulticaster#save(ObjectOutputStream, String, EventListener) </seealso>
		''' <seealso cref= java.awt.Component#actionListenerK </seealso>
		Private Sub writeObject(  s As java.io.ObjectOutputStream)
			s.defaultWriteObject()

			AWTEventMulticaster.save(s, actionListenerK, actionListener)
			s.writeObject(Nothing)
		End Sub

		''' <summary>
		''' Read the ObjectInputStream and if it isn't null,
		''' add a listener to receive action events fired by the
		''' TextField.  Unrecognized keys or values will be
		''' ignored.
		''' </summary>
		''' <exception cref="HeadlessException"> if
		''' <code>GraphicsEnvironment.isHeadless()</code> returns
		''' <code>true</code> </exception>
		''' <seealso cref= #removeActionListener(ActionListener) </seealso>
		''' <seealso cref= #addActionListener(ActionListener) </seealso>
		''' <seealso cref= java.awt.GraphicsEnvironment#isHeadless </seealso>
		Private Sub readObject(  s As java.io.ObjectInputStream)
			' HeadlessException will be thrown by TextComponent's readObject
			s.defaultReadObject()

			' Make sure the state we just read in for columns has legal values
			If columns < 0 Then columns = 0

			' Read in listeners, if any
			Dim keyOrNull As Object
			keyOrNull = s.readObject()
			Do While Nothing IsNot keyOrNull
				Dim key As String = CStr(keyOrNull).intern()

				If actionListenerK = key Then
					addActionListener(CType(s.readObject(), ActionListener))
				Else
					' skip value for unrecognized key
					s.readObject()
				End If
				keyOrNull = s.readObject()
			Loop
		End Sub


	'///////////////
	' Accessibility support
	'//////////////


		''' <summary>
		''' Gets the AccessibleContext associated with this TextField.
		''' For text fields, the AccessibleContext takes the form of an
		''' AccessibleAWTTextField.
		''' A new AccessibleAWTTextField instance is created if necessary.
		''' </summary>
		''' <returns> an AccessibleAWTTextField that serves as the
		'''         AccessibleContext of this TextField
		''' @since 1.3 </returns>
		Public  Overrides ReadOnly Property  accessibleContext As AccessibleContext
			Get
				If accessibleContext Is Nothing Then accessibleContext = New AccessibleAWTTextField(Me)
				Return accessibleContext
			End Get
		End Property

		''' <summary>
		''' This class implements accessibility support for the
		''' <code>TextField</code> class.  It provides an implementation of the
		''' Java Accessibility API appropriate to text field user-interface elements.
		''' @since 1.3
		''' </summary>
		Protected Friend Class AccessibleAWTTextField
			Inherits AccessibleAWTTextComponent

			Private ReadOnly outerInstance As TextField

			Public Sub New(  outerInstance As TextField)
				Me.outerInstance = outerInstance
			End Sub

	'        
	'         * JDK 1.3 serialVersionUID
	'         
			Private Const serialVersionUID As Long = 6219164359235943158L

			''' <summary>
			''' Gets the state set of this object.
			''' </summary>
			''' <returns> an instance of AccessibleStateSet describing the states
			''' of the object </returns>
			''' <seealso cref= AccessibleState </seealso>
			Public Overridable Property accessibleStateSet As AccessibleStateSet
				Get
					Dim states As AccessibleStateSet = MyBase.accessibleStateSet
					states.add(AccessibleState.SINGLE_LINE)
					Return states
				End Get
			End Property
		End Class

	End Class

End Namespace