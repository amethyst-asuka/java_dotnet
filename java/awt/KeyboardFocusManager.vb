Imports System
Imports System.Runtime.CompilerServices
Imports System.Collections
Imports System.Collections.Generic
Imports System.Runtime.InteropServices

'
' * Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 
Namespace java.awt










	''' <summary>
	''' The KeyboardFocusManager is responsible for managing the active and focused
	''' Windows, and the current focus owner. The focus owner is defined as the
	''' Component in an application that will typically receive all KeyEvents
	''' generated by the user. The focused Window is the Window that is, or
	''' contains, the focus owner. Only a Frame or a Dialog can be the active
	''' Window. The native windowing system may denote the active Window or its
	''' children with special decorations, such as a highlighted title bar. The
	''' active Window is always either the focused Window, or the first Frame or
	''' Dialog that is an owner of the focused Window.
	''' <p>
	''' The KeyboardFocusManager is both a centralized location for client code to
	''' query for the focus owner and initiate focus changes, and an event
	''' dispatcher for all FocusEvents, WindowEvents related to focus, and
	''' KeyEvents.
	''' <p>
	''' Some browsers partition applets in different code bases into separate
	''' contexts, and establish walls between these contexts. In such a scenario,
	''' there will be one KeyboardFocusManager per context. Other browsers place all
	''' applets into the same context, implying that there will be only a single,
	''' global KeyboardFocusManager for all applets. This behavior is
	''' implementation-dependent. Consult your browser's documentation for more
	''' information. No matter how many contexts there may be, however, there can
	''' never be more than one focus owner, focused Window, or active Window, per
	''' ClassLoader.
	''' <p>
	''' Please see
	''' <a href="https://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html">
	''' How to Use the Focus Subsystem</a>,
	''' a section in <em>The Java Tutorial</em>, and the
	''' <a href="../../java/awt/doc-files/FocusSpec.html">Focus Specification</a>
	''' for more information.
	''' 
	''' @author David Mendenhall
	''' </summary>
	''' <seealso cref= Window </seealso>
	''' <seealso cref= Frame </seealso>
	''' <seealso cref= Dialog </seealso>
	''' <seealso cref= java.awt.event.FocusEvent </seealso>
	''' <seealso cref= java.awt.event.WindowEvent </seealso>
	''' <seealso cref= java.awt.event.KeyEvent
	''' @since 1.4 </seealso>
	Public MustInherit Class KeyboardFocusManager
		Implements KeyEventDispatcher, KeyEventPostProcessor

		' Shared focus engine logger
		Private Shared ReadOnly focusLog As sun.util.logging.PlatformLogger = sun.util.logging.PlatformLogger.getLogger("java.awt.focus.KeyboardFocusManager")

		Shared Sub New()
			' ensure that the necessary native libraries are loaded 
			Toolkit.loadLibraries()
			If Not GraphicsEnvironment.headless Then initIDs()
'JAVA TO VB CONVERTER TODO TASK: Anonymous inner classes are not converted to VB if the base type is not defined in the code being converted:
'			sun.awt.AWTAccessor.setKeyboardFocusManagerAccessor(New sun.awt.AWTAccessor.KeyboardFocusManagerAccessor()
	'		{
	'				public int shouldNativelyFocusHeavyweight(Component heavyweight, Component descendant, boolean temporary, boolean focusedWindowChangeAllowed, long time, CausedFocusEvent.Cause cause)
	'				{
	'					Return KeyboardFocusManager.shouldNativelyFocusHeavyweight(heavyweight, descendant, temporary, focusedWindowChangeAllowed, time, cause);
	'				}
	'				public boolean processSynchronousLightweightTransfer(Component heavyweight, Component descendant, boolean temporary, boolean focusedWindowChangeAllowed, long time)
	'				{
	'					Return KeyboardFocusManager.processSynchronousLightweightTransfer(heavyweight, descendant, temporary, focusedWindowChangeAllowed, time);
	'				}
	'				public void removeLastFocusRequest(Component heavyweight)
	'				{
	'					KeyboardFocusManager.removeLastFocusRequest(heavyweight);
	'				}
	'				public void setMostRecentFocusOwner(Window window, Component component)
	'				{
	'					KeyboardFocusManager.setMostRecentFocusOwner(window, component);
	'				}
	'				public KeyboardFocusManager getCurrentKeyboardFocusManager(AppContext ctx)
	'				{
	'					Return KeyboardFocusManager.getCurrentKeyboardFocusManager(ctx);
	'				}
	'				public Container getCurrentFocusCycleRoot()
	'				{
	'					Return KeyboardFocusManager.currentFocusCycleRoot;
	'				}
	'			}
		   )
		End Sub

		<NonSerialized> _
		Friend peer As java.awt.peer.KeyboardFocusManagerPeer

		''' <summary>
		''' Initialize JNI field and method IDs
		''' </summary>
'JAVA TO VB CONVERTER TODO TASK: Replace 'unknown' with the appropriate dll name:
		<DllImport("unknown")> _
		Private Shared Sub initIDs()
		End Sub

		Private Shared ReadOnly log As sun.util.logging.PlatformLogger = sun.util.logging.PlatformLogger.getLogger("java.awt.KeyboardFocusManager")

		''' <summary>
		''' The identifier for the Forward focus traversal keys.
		''' </summary>
		''' <seealso cref= #setDefaultFocusTraversalKeys </seealso>
		''' <seealso cref= #getDefaultFocusTraversalKeys </seealso>
		''' <seealso cref= Component#setFocusTraversalKeys </seealso>
		''' <seealso cref= Component#getFocusTraversalKeys </seealso>
		Public Const FORWARD_TRAVERSAL_KEYS As Integer = 0

		''' <summary>
		''' The identifier for the Backward focus traversal keys.
		''' </summary>
		''' <seealso cref= #setDefaultFocusTraversalKeys </seealso>
		''' <seealso cref= #getDefaultFocusTraversalKeys </seealso>
		''' <seealso cref= Component#setFocusTraversalKeys </seealso>
		''' <seealso cref= Component#getFocusTraversalKeys </seealso>
		Public Const BACKWARD_TRAVERSAL_KEYS As Integer = 1

		''' <summary>
		''' The identifier for the Up Cycle focus traversal keys.
		''' </summary>
		''' <seealso cref= #setDefaultFocusTraversalKeys </seealso>
		''' <seealso cref= #getDefaultFocusTraversalKeys </seealso>
		''' <seealso cref= Component#setFocusTraversalKeys </seealso>
		''' <seealso cref= Component#getFocusTraversalKeys </seealso>
		Public Const UP_CYCLE_TRAVERSAL_KEYS As Integer = 2

		''' <summary>
		''' The identifier for the Down Cycle focus traversal keys.
		''' </summary>
		''' <seealso cref= #setDefaultFocusTraversalKeys </seealso>
		''' <seealso cref= #getDefaultFocusTraversalKeys </seealso>
		''' <seealso cref= Component#setFocusTraversalKeys </seealso>
		''' <seealso cref= Component#getFocusTraversalKeys </seealso>
		Public Const DOWN_CYCLE_TRAVERSAL_KEYS As Integer = 3

		Friend Shared ReadOnly TRAVERSAL_KEY_LENGTH As Integer = DOWN_CYCLE_TRAVERSAL_KEYS + 1

		''' <summary>
		''' Returns the current KeyboardFocusManager instance for the calling
		''' thread's context.
		''' </summary>
		''' <returns> this thread's context's KeyboardFocusManager </returns>
		''' <seealso cref= #setCurrentKeyboardFocusManager </seealso>
		Public Property Shared currentKeyboardFocusManager As KeyboardFocusManager
			Get
				Return getCurrentKeyboardFocusManager(sun.awt.AppContext.appContext)
			End Get
			Set(ByVal newManager As KeyboardFocusManager)
				checkReplaceKFMPermission()
    
				Dim oldManager As KeyboardFocusManager = Nothing
    
				SyncLock GetType(KeyboardFocusManager)
					Dim appcontext As sun.awt.AppContext = sun.awt.AppContext.appContext
    
					If newManager IsNot Nothing Then
						oldManager = getCurrentKeyboardFocusManager(appcontext)
    
						appcontext.put(GetType(KeyboardFocusManager), newManager)
					Else
						oldManager = getCurrentKeyboardFocusManager(appcontext)
						appcontext.remove(GetType(KeyboardFocusManager))
					End If
				End SyncLock
    
				If oldManager IsNot Nothing Then oldManager.firePropertyChange("managingFocus",  java.lang.[Boolean].TRUE,  java.lang.[Boolean].FALSE)
				If newManager IsNot Nothing Then newManager.firePropertyChange("managingFocus",  java.lang.[Boolean].FALSE,  java.lang.[Boolean].TRUE)
			End Set
		End Property

		<MethodImpl(MethodImplOptions.Synchronized)> _
		Shared Function getCurrentKeyboardFocusManager(ByVal appcontext As sun.awt.AppContext) As KeyboardFocusManager
			Dim manager As KeyboardFocusManager = CType(appcontext.get(GetType(KeyboardFocusManager)), KeyboardFocusManager)
			If manager Is Nothing Then
				manager = New DefaultKeyboardFocusManager
				appcontext.put(GetType(KeyboardFocusManager), manager)
			End If
			Return manager
		End Function


		''' <summary>
		''' The Component in an application that will typically receive all
		''' KeyEvents generated by the user.
		''' </summary>
		Private Shared focusOwner As Component

		''' <summary>
		''' The Component in an application that will regain focus when an
		''' outstanding temporary focus transfer has completed, or the focus owner,
		''' if no outstanding temporary transfer exists.
		''' </summary>
		Private Shared permanentFocusOwner As Component

		''' <summary>
		''' The Window which is, or contains, the focus owner.
		''' </summary>
		Private Shared focusedWindow As Window

		''' <summary>
		''' Only a Frame or a Dialog can be the active Window. The native windowing
		''' system may denote the active Window with a special decoration, such as a
		''' highlighted title bar. The active Window is always either the focused
		''' Window, or the first Frame or Dialog which is an owner of the focused
		''' Window.
		''' </summary>
		Private Shared activeWindow As Window

		''' <summary>
		''' The default FocusTraversalPolicy for all Windows that have no policy of
		''' their own set. If those Windows have focus-cycle-root children that have
		''' no keyboard-traversal policy of their own, then those children will also
		''' inherit this policy (as will, recursively, their focus-cycle-root
		''' children).
		''' </summary>
		Private defaultPolicy As FocusTraversalPolicy = New DefaultFocusTraversalPolicy

		''' <summary>
		''' The bound property names of each focus traversal key.
		''' </summary>
		Private Shared ReadOnly defaultFocusTraversalKeyPropertyNames As String() = { "forwardDefaultFocusTraversalKeys", "backwardDefaultFocusTraversalKeys", "upCycleDefaultFocusTraversalKeys", "downCycleDefaultFocusTraversalKeys" }

		''' <summary>
		''' The default strokes for initializing the default focus traversal keys.
		''' </summary>
		Private Shared ReadOnly defaultFocusTraversalKeyStrokes As AWTKeyStroke()() = { New AWTKeyStroke() { AWTKeyStroke.getAWTKeyStroke(java.awt.event.KeyEvent.VK_TAB, 0, False), AWTKeyStroke.getAWTKeyStroke(java.awt.event.KeyEvent.VK_TAB, java.awt.event.InputEvent.CTRL_DOWN_MASK Or java.awt.event.InputEvent.CTRL_MASK, False) }, New AWTKeyStroke() { AWTKeyStroke.getAWTKeyStroke(java.awt.event.KeyEvent.VK_TAB, java.awt.event.InputEvent.SHIFT_DOWN_MASK Or java.awt.event.InputEvent.SHIFT_MASK, False), AWTKeyStroke.getAWTKeyStroke(java.awt.event.KeyEvent.VK_TAB, java.awt.event.InputEvent.SHIFT_DOWN_MASK Or java.awt.event.InputEvent.SHIFT_MASK Or java.awt.event.InputEvent.CTRL_DOWN_MASK Or java.awt.event.InputEvent.CTRL_MASK, False) }, New AWTKeyStroke() { }, New AWTKeyStroke() { } }
		''' <summary>
		''' The default focus traversal keys. Each array of traversal keys will be
		''' in effect on all Windows that have no such array of their own explicitly
		''' set. Each array will also be inherited, recursively, by any child
		''' Component of those Windows that has no such array of its own explicitly
		''' set.
		''' </summary>
		Private defaultFocusTraversalKeys As java.util.Set(Of AWTKeyStroke)() = New java.util.Set(3){}

		''' <summary>
		''' The current focus cycle root. If the focus owner is itself a focus cycle
		''' root, then it may be ambiguous as to which Components represent the next
		''' and previous Components to focus during normal focus traversal. In that
		''' case, the current focus cycle root is used to differentiate among the
		''' possibilities.
		''' </summary>
		Private Shared currentFocusCycleRoot As Container

		''' <summary>
		''' A description of any VetoableChangeListeners which have been registered.
		''' </summary>
		Private vetoableSupport As java.beans.VetoableChangeSupport

		''' <summary>
		''' A description of any PropertyChangeListeners which have been registered.
		''' </summary>
		Private changeSupport As java.beans.PropertyChangeSupport

		''' <summary>
		''' This KeyboardFocusManager's KeyEventDispatcher chain. The List does not
		''' include this KeyboardFocusManager unless it was explicitly re-registered
		''' via a call to <code>addKeyEventDispatcher</code>. If no other
		''' KeyEventDispatchers are registered, this field may be null or refer to
		''' a List of length 0.
		''' </summary>
		Private keyEventDispatchers As LinkedList(Of KeyEventDispatcher)

		''' <summary>
		''' This KeyboardFocusManager's KeyEventPostProcessor chain. The List does
		''' not include this KeyboardFocusManager unless it was explicitly
		''' re-registered via a call to <code>addKeyEventPostProcessor</code>.
		''' If no other KeyEventPostProcessors are registered, this field may be
		''' null or refer to a List of length 0.
		''' </summary>
		Private keyEventPostProcessors As LinkedList(Of KeyEventPostProcessor)

		''' <summary>
		''' Maps Windows to those Windows' most recent focus owners.
		''' </summary>
		Private Shared mostRecentFocusOwners As IDictionary(Of Window, WeakReference(Of Component)) = New java.util.WeakHashMap(Of Window, WeakReference(Of Component))

		''' <summary>
		''' We cache the permission used to verify that the calling thread is
		''' permitted to access the global focus state.
		''' </summary>
		Private Shared replaceKeyboardFocusManagerPermission As AWTPermission

	'    
	'     * SequencedEvent which is currently dispatched in AppContext.
	'     
		<NonSerialized> _
		Friend currentSequencedEvent As SequencedEvent = Nothing

		Friend Property currentSequencedEvent As SequencedEvent
			Set(ByVal current As SequencedEvent)
				SyncLock GetType(SequencedEvent)
					assert(current Is Nothing OrElse currentSequencedEvent Is Nothing)
					currentSequencedEvent = current
				End SyncLock
			End Set
			Get
				SyncLock GetType(SequencedEvent)
					Return currentSequencedEvent
				End SyncLock
			End Get
		End Property


		Friend Shared Function initFocusTraversalKeysSet(ByVal value As String, ByVal targetSet As java.util.Set(Of AWTKeyStroke)) As java.util.Set(Of AWTKeyStroke)
			Dim tokens As New java.util.StringTokenizer(value, ",")
			Do While tokens.hasMoreTokens()
				targetSet.add(AWTKeyStroke.getAWTKeyStroke(tokens.nextToken()))
			Loop
			Return If(targetSet.empty, java.util.Collections.EMPTY_SET, java.util.Collections.unmodifiableSet(targetSet))
		End Function

		''' <summary>
		''' Initializes a KeyboardFocusManager.
		''' </summary>
		Public Sub New()
			For i As Integer = 0 To TRAVERSAL_KEY_LENGTH - 1
				Dim work_set As java.util.Set(Of AWTKeyStroke) = New HashSet(Of AWTKeyStroke)
				For j As Integer = 0 To defaultFocusTraversalKeyStrokes(i).Length - 1
					work_set.add(defaultFocusTraversalKeyStrokes(i)(j))
				Next j
				defaultFocusTraversalKeys(i) = If(work_set.empty, java.util.Collections.EMPTY_SET, java.util.Collections.unmodifiableSet(work_set))
			Next i
			initPeer()
		End Sub

		Private Sub initPeer()
			Dim tk As Toolkit = Toolkit.defaultToolkit
			Dim peerProvider As sun.awt.KeyboardFocusManagerPeerProvider = CType(tk, sun.awt.KeyboardFocusManagerPeerProvider)
			peer = peerProvider.keyboardFocusManagerPeer
		End Sub

		''' <summary>
		''' Returns the focus owner, if the focus owner is in the same context as
		''' the calling thread. The focus owner is defined as the Component in an
		''' application that will typically receive all KeyEvents generated by the
		''' user. KeyEvents which map to the focus owner's focus traversal keys will
		''' not be delivered if focus traversal keys are enabled for the focus
		''' owner. In addition, KeyEventDispatchers may retarget or consume
		''' KeyEvents before they reach the focus owner.
		''' </summary>
		''' <returns> the focus owner, or null if the focus owner is not a member of
		'''         the calling thread's context </returns>
		''' <seealso cref= #getGlobalFocusOwner </seealso>
		''' <seealso cref= #setGlobalFocusOwner </seealso>
		Public Overridable Property focusOwner As Component
			Get
				SyncLock GetType(KeyboardFocusManager)
					If focusOwner Is Nothing Then Return Nothing
    
					Return If(focusOwner.appContext Is sun.awt.AppContext.appContext, focusOwner, Nothing)
				End SyncLock
			End Get
		End Property

		''' <summary>
		''' Returns the focus owner, even if the calling thread is in a different
		''' context than the focus owner. The focus owner is defined as the
		''' Component in an application that will typically receive all KeyEvents
		''' generated by the user. KeyEvents which map to the focus owner's focus
		''' traversal keys will not be delivered if focus traversal keys are enabled
		''' for the focus owner. In addition, KeyEventDispatchers may retarget or
		''' consume KeyEvents before they reach the focus owner.
		''' <p>
		''' This method will throw a SecurityException if this KeyboardFocusManager
		''' is not the current KeyboardFocusManager for the calling thread's
		''' context.
		''' </summary>
		''' <returns> the focus owner </returns>
		''' <seealso cref= #getFocusOwner </seealso>
		''' <seealso cref= #setGlobalFocusOwner </seealso>
		''' <exception cref="SecurityException"> if this KeyboardFocusManager is not the
		'''         current KeyboardFocusManager for the calling thread's context
		'''         and if the calling thread does not have "replaceKeyboardFocusManager"
		'''         permission </exception>
		Protected Friend Overridable Property globalFocusOwner As Component
			Get
				SyncLock GetType(KeyboardFocusManager)
					checkKFMSecurity()
					Return focusOwner
				End SyncLock
			End Get
			Set(ByVal focusOwner As Component)
				Dim oldFocusOwner As Component = Nothing
				Dim shouldFire As Boolean = False
    
				If focusOwner Is Nothing OrElse focusOwner.focusable Then
					SyncLock GetType(KeyboardFocusManager)
						checkKFMSecurity()
    
						oldFocusOwner = focusOwner
    
						Try
							fireVetoableChange("focusOwner", oldFocusOwner, focusOwner)
						Catch e As java.beans.PropertyVetoException
							' rejected
							Return
						End Try
    
						KeyboardFocusManager.focusOwner = focusOwner
    
						If focusOwner IsNot Nothing AndAlso (currentFocusCycleRoot Is Nothing OrElse (Not focusOwner.isFocusCycleRoot(currentFocusCycleRoot))) Then
							Dim rootAncestor As Container = focusOwner.focusCycleRootAncestor
							If rootAncestor Is Nothing AndAlso (TypeOf focusOwner Is Window) Then rootAncestor = CType(focusOwner, Container)
							If rootAncestor IsNot Nothing Then globalCurrentFocusCycleRootPriv = rootAncestor
						End If
    
						shouldFire = True
					End SyncLock
				End If
    
				If shouldFire Then firePropertyChange("focusOwner", oldFocusOwner, focusOwner)
			End Set
		End Property


		''' <summary>
		''' Clears the focus owner at both the Java and native levels if the
		''' focus owner exists and resides in the same context as the calling thread,
		''' otherwise the method returns silently.
		''' <p>
		''' The focus owner component will receive a permanent FOCUS_LOST event.
		''' After this operation completes, the native windowing system will discard
		''' all user-generated KeyEvents until the user selects a new Component to
		''' receive focus, or a Component is given focus explicitly via a call to
		''' {@code requestFocus()}. This operation does not change the focused or
		''' active Windows.
		''' </summary>
		''' <seealso cref= Component#requestFocus() </seealso>
		''' <seealso cref= java.awt.event.FocusEvent#FOCUS_LOST
		''' @since 1.8 </seealso>
		Public Overridable Sub clearFocusOwner()
			If focusOwner IsNot Nothing Then clearGlobalFocusOwner()
		End Sub

		''' <summary>
		''' Clears the global focus owner at both the Java and native levels. If
		''' there exists a focus owner, that Component will receive a permanent
		''' FOCUS_LOST event. After this operation completes, the native windowing
		''' system will discard all user-generated KeyEvents until the user selects
		''' a new Component to receive focus, or a Component is given focus
		''' explicitly via a call to <code>requestFocus()</code>. This operation
		''' does not change the focused or active Windows.
		''' <p>
		''' If a SecurityManager is installed, the calling thread must be granted
		''' the "replaceKeyboardFocusManager" AWTPermission. If this permission is
		''' not granted, this method will throw a SecurityException, and the current
		''' focus owner will not be cleared.
		''' <p>
		''' This method is intended to be used only by KeyboardFocusManager set as
		''' current KeyboardFocusManager for the calling thread's context. It is not
		''' for general client use.
		''' </summary>
		''' <seealso cref= KeyboardFocusManager#clearFocusOwner </seealso>
		''' <seealso cref= Component#requestFocus() </seealso>
		''' <seealso cref= java.awt.event.FocusEvent#FOCUS_LOST </seealso>
		''' <exception cref="SecurityException"> if the calling thread does not have
		'''         "replaceKeyboardFocusManager" permission </exception>
		Public Overridable Sub clearGlobalFocusOwner()
			checkReplaceKFMPermission()
			If Not GraphicsEnvironment.headless Then
				' Toolkit must be fully initialized, otherwise
				' _clearGlobalFocusOwner will crash or throw an exception
				Toolkit.defaultToolkit

				_clearGlobalFocusOwner()
			End If
		End Sub
		Private Sub _clearGlobalFocusOwner()
			Dim activeWindow_Renamed As Window = markClearGlobalFocusOwner()
			peer.clearGlobalFocusOwner(activeWindow_Renamed)
		End Sub

		Friend Overridable Sub clearGlobalFocusOwnerPriv()
			java.security.AccessController.doPrivileged(New PrivilegedActionAnonymousInnerClassHelper(Of T)
		End Sub

		Private Class PrivilegedActionAnonymousInnerClassHelper(Of T)
			Implements java.security.PrivilegedAction(Of T)

			Public Overridable Function run() As Void
				outerInstance.clearGlobalFocusOwner()
				Return Nothing
			End Function
		End Class

		Friend Overridable Property nativeFocusOwner As Component
			Get
				Return peer.currentFocusOwner
			End Get
			Set(ByVal comp As Component)
				If focusLog.isLoggable(sun.util.logging.PlatformLogger.Level.FINEST) Then focusLog.finest("Calling peer {0} setCurrentFocusOwner for {1}", Convert.ToString(peer), Convert.ToString(comp))
				peer.currentFocusOwner = comp
			End Set
		End Property


		Friend Overridable Property nativeFocusedWindow As Window
			Get
				Return peer.currentFocusedWindow
			End Get
		End Property

		''' <summary>
		''' Returns the permanent focus owner, if the permanent focus owner is in
		''' the same context as the calling thread. The permanent focus owner is
		''' defined as the last Component in an application to receive a permanent
		''' FOCUS_GAINED event. The focus owner and permanent focus owner are
		''' equivalent unless a temporary focus change is currently in effect. In
		''' such a situation, the permanent focus owner will again be the focus
		''' owner when the temporary focus change ends.
		''' </summary>
		''' <returns> the permanent focus owner, or null if the permanent focus owner
		'''         is not a member of the calling thread's context </returns>
		''' <seealso cref= #getGlobalPermanentFocusOwner </seealso>
		''' <seealso cref= #setGlobalPermanentFocusOwner </seealso>
		Public Overridable Property permanentFocusOwner As Component
			Get
				SyncLock GetType(KeyboardFocusManager)
					If permanentFocusOwner Is Nothing Then Return Nothing
    
					Return If(permanentFocusOwner.appContext Is sun.awt.AppContext.appContext, permanentFocusOwner, Nothing)
				End SyncLock
			End Get
		End Property

		''' <summary>
		''' Returns the permanent focus owner, even if the calling thread is in a
		''' different context than the permanent focus owner. The permanent focus
		''' owner is defined as the last Component in an application to receive a
		''' permanent FOCUS_GAINED event. The focus owner and permanent focus owner
		''' are equivalent unless a temporary focus change is currently in effect.
		''' In such a situation, the permanent focus owner will again be the focus
		''' owner when the temporary focus change ends.
		''' </summary>
		''' <returns> the permanent focus owner </returns>
		''' <seealso cref= #getPermanentFocusOwner </seealso>
		''' <seealso cref= #setGlobalPermanentFocusOwner </seealso>
		''' <exception cref="SecurityException"> if this KeyboardFocusManager is not the
		'''         current KeyboardFocusManager for the calling thread's context
		'''         and if the calling thread does not have "replaceKeyboardFocusManager"
		'''         permission </exception>
		Protected Friend Overridable Property globalPermanentFocusOwner As Component
			Get
				SyncLock GetType(KeyboardFocusManager)
					checkKFMSecurity()
					Return permanentFocusOwner
				End SyncLock
			End Get
			Set(ByVal permanentFocusOwner As Component)
				Dim oldPermanentFocusOwner As Component = Nothing
				Dim shouldFire As Boolean = False
    
				If permanentFocusOwner Is Nothing OrElse permanentFocusOwner.focusable Then
					SyncLock GetType(KeyboardFocusManager)
						checkKFMSecurity()
    
						oldPermanentFocusOwner = permanentFocusOwner
    
						Try
							fireVetoableChange("permanentFocusOwner", oldPermanentFocusOwner, permanentFocusOwner)
						Catch e As java.beans.PropertyVetoException
							' rejected
							Return
						End Try
    
						KeyboardFocusManager.permanentFocusOwner = permanentFocusOwner
    
						KeyboardFocusManager.mostRecentFocusOwner = permanentFocusOwner
    
						shouldFire = True
					End SyncLock
				End If
    
				If shouldFire Then firePropertyChange("permanentFocusOwner", oldPermanentFocusOwner, permanentFocusOwner)
			End Set
		End Property


		''' <summary>
		''' Returns the focused Window, if the focused Window is in the same context
		''' as the calling thread. The focused Window is the Window that is or
		''' contains the focus owner.
		''' </summary>
		''' <returns> the focused Window, or null if the focused Window is not a
		'''         member of the calling thread's context </returns>
		''' <seealso cref= #getGlobalFocusedWindow </seealso>
		''' <seealso cref= #setGlobalFocusedWindow </seealso>
		Public Overridable Property focusedWindow As Window
			Get
				SyncLock GetType(KeyboardFocusManager)
					If focusedWindow Is Nothing Then Return Nothing
    
					Return If(focusedWindow.appContext Is sun.awt.AppContext.appContext, focusedWindow, Nothing)
				End SyncLock
			End Get
		End Property

		''' <summary>
		''' Returns the focused Window, even if the calling thread is in a different
		''' context than the focused Window. The focused Window is the Window that
		''' is or contains the focus owner.
		''' </summary>
		''' <returns> the focused Window </returns>
		''' <seealso cref= #getFocusedWindow </seealso>
		''' <seealso cref= #setGlobalFocusedWindow </seealso>
		''' <exception cref="SecurityException"> if this KeyboardFocusManager is not the
		'''         current KeyboardFocusManager for the calling thread's context
		'''         and if the calling thread does not have "replaceKeyboardFocusManager"
		'''         permission </exception>
		Protected Friend Overridable Property globalFocusedWindow As Window
			Get
				SyncLock GetType(KeyboardFocusManager)
					checkKFMSecurity()
					Return focusedWindow
				End SyncLock
			End Get
			Set(ByVal focusedWindow As Window)
				Dim oldFocusedWindow As Window = Nothing
				Dim shouldFire As Boolean = False
    
				If focusedWindow Is Nothing OrElse focusedWindow.focusableWindow Then
					SyncLock GetType(KeyboardFocusManager)
						checkKFMSecurity()
    
						oldFocusedWindow = focusedWindow
    
						Try
							fireVetoableChange("focusedWindow", oldFocusedWindow, focusedWindow)
						Catch e As java.beans.PropertyVetoException
							' rejected
							Return
						End Try
    
						KeyboardFocusManager.focusedWindow = focusedWindow
						shouldFire = True
					End SyncLock
				End If
    
				If shouldFire Then firePropertyChange("focusedWindow", oldFocusedWindow, focusedWindow)
			End Set
		End Property


		''' <summary>
		''' Returns the active Window, if the active Window is in the same context
		''' as the calling thread. Only a Frame or a Dialog can be the active
		''' Window. The native windowing system may denote the active Window or its
		''' children with special decorations, such as a highlighted title bar.
		''' The active Window is always either the focused Window, or the first
		''' Frame or Dialog that is an owner of the focused Window.
		''' </summary>
		''' <returns> the active Window, or null if the active Window is not a member
		'''         of the calling thread's context </returns>
		''' <seealso cref= #getGlobalActiveWindow </seealso>
		''' <seealso cref= #setGlobalActiveWindow </seealso>
		Public Overridable Property activeWindow As Window
			Get
				SyncLock GetType(KeyboardFocusManager)
					If activeWindow Is Nothing Then Return Nothing
    
					Return If(activeWindow.appContext Is sun.awt.AppContext.appContext, activeWindow, Nothing)
				End SyncLock
			End Get
		End Property

		''' <summary>
		''' Returns the active Window, even if the calling thread is in a different
		''' context than the active Window. Only a Frame or a Dialog can be the
		''' active Window. The native windowing system may denote the active Window
		''' or its children with special decorations, such as a highlighted title
		''' bar. The active Window is always either the focused Window, or the first
		''' Frame or Dialog that is an owner of the focused Window.
		''' </summary>
		''' <returns> the active Window </returns>
		''' <seealso cref= #getActiveWindow </seealso>
		''' <seealso cref= #setGlobalActiveWindow </seealso>
		''' <exception cref="SecurityException"> if this KeyboardFocusManager is not the
		'''         current KeyboardFocusManager for the calling thread's context
		'''         and if the calling thread does not have "replaceKeyboardFocusManager"
		'''         permission </exception>
		Protected Friend Overridable Property globalActiveWindow As Window
			Get
				SyncLock GetType(KeyboardFocusManager)
					checkKFMSecurity()
					Return activeWindow
				End SyncLock
			End Get
			Set(ByVal activeWindow As Window)
				Dim oldActiveWindow As Window
				SyncLock GetType(KeyboardFocusManager)
					checkKFMSecurity()
    
					oldActiveWindow = activeWindow
					If focusLog.isLoggable(sun.util.logging.PlatformLogger.Level.FINER) Then focusLog.finer("Setting global active window to " & activeWindow & ", old active " & oldActiveWindow)
    
					Try
						fireVetoableChange("activeWindow", oldActiveWindow, activeWindow)
					Catch e As java.beans.PropertyVetoException
						' rejected
						Return
					End Try
    
					KeyboardFocusManager.activeWindow = activeWindow
				End SyncLock
    
				firePropertyChange("activeWindow", oldActiveWindow, activeWindow)
			End Set
		End Property


		''' <summary>
		''' Returns the default FocusTraversalPolicy. Top-level components
		''' use this value on their creation to initialize their own focus traversal
		''' policy by explicit call to Container.setFocusTraversalPolicy.
		''' </summary>
		''' <returns> the default FocusTraversalPolicy. null will never be returned. </returns>
		''' <seealso cref= #setDefaultFocusTraversalPolicy </seealso>
		''' <seealso cref= Container#setFocusTraversalPolicy </seealso>
		''' <seealso cref= Container#getFocusTraversalPolicy </seealso>
		<MethodImpl(MethodImplOptions.Synchronized)> _
		Public Overridable Property defaultFocusTraversalPolicy As FocusTraversalPolicy
			Get
				Return defaultPolicy
			End Get
			Set(ByVal defaultPolicy As FocusTraversalPolicy)
				If defaultPolicy Is Nothing Then Throw New IllegalArgumentException("default focus traversal policy cannot be null")
    
				Dim oldPolicy As FocusTraversalPolicy
    
				SyncLock Me
					oldPolicy = Me.defaultPolicy
					Me.defaultPolicy = defaultPolicy
				End SyncLock
    
				firePropertyChange("defaultFocusTraversalPolicy", oldPolicy, defaultPolicy)
			End Set
		End Property


		''' <summary>
		''' Sets the default focus traversal keys for a given traversal operation.
		''' This traversal key {@code Set} will be in effect on all
		''' {@code Window}s that have no such {@code Set} of
		''' their own explicitly defined. This {@code Set} will also be
		''' inherited, recursively, by any child {@code Component} of
		''' those {@code Windows} that has
		''' no such {@code Set} of its own explicitly defined.
		''' <p>
		''' The default values for the default focus traversal keys are
		''' implementation-dependent. Sun recommends that all implementations for a
		''' particular native platform use the same default values. The
		''' recommendations for Windows and Unix are listed below. These
		''' recommendations are used in the Sun AWT implementations.
		''' 
		''' <table border=1 summary="Recommended default values for focus traversal keys">
		''' <tr>
		'''    <th>Identifier</th>
		'''    <th>Meaning</th>
		'''    <th>Default</th>
		''' </tr>
		''' <tr>
		'''    <td>{@code KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS}</td>
		'''    <td>Normal forward keyboard traversal</td>
		'''    <td>{@code TAB} on {@code KEY_PRESSED},
		'''        {@code CTRL-TAB} on {@code KEY_PRESSED}</td>
		''' </tr>
		''' <tr>
		'''    <td>{@code KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS}</td>
		'''    <td>Normal reverse keyboard traversal</td>
		'''    <td>{@code SHIFT-TAB} on {@code KEY_PRESSED},
		'''        {@code CTRL-SHIFT-TAB} on {@code KEY_PRESSED}</td>
		''' </tr>
		''' <tr>
		'''    <td>{@code KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS}</td>
		'''    <td>Go up one focus traversal cycle</td>
		'''    <td>none</td>
		''' </tr>
		''' <tr>
		'''    <td>{@code KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS}</td>
		'''    <td>Go down one focus traversal cycle</td>
		'''    <td>none</td>
		''' </tr>
		''' </table>
		''' 
		''' To disable a traversal key, use an empty {@code Set};
		''' {@code Collections.EMPTY_SET} is recommended.
		''' <p>
		''' Using the {@code AWTKeyStroke} API, client code can
		''' specify on which of two
		''' specific {@code KeyEvent}s, {@code KEY_PRESSED} or
		''' {@code KEY_RELEASED}, the focus traversal operation will
		''' occur. Regardless of which {@code KeyEvent} is specified,
		''' however, all {@code KeyEvent}s related to the focus
		''' traversal key, including the associated {@code KEY_TYPED}
		''' event, will be consumed, and will not be dispatched
		''' to any {@code Component}. It is a runtime error to
		''' specify a {@code KEY_TYPED} event as
		''' mapping to a focus traversal operation, or to map the same event to
		''' multiple default focus traversal operations.
		''' <p>
		''' This method may throw a {@code ClassCastException} if any {@code Object}
		''' in {@code keystrokes} is not an {@code AWTKeyStroke}.
		''' </summary>
		''' <param name="id"> one of
		'''        {@code KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS},
		'''        {@code KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS},
		'''        {@code KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS}, or
		'''        {@code KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS} </param>
		''' <param name="keystrokes"> the Set of {@code AWTKeyStroke}s for the
		'''        specified operation </param>
		''' <seealso cref= #getDefaultFocusTraversalKeys </seealso>
		''' <seealso cref= Component#setFocusTraversalKeys </seealso>
		''' <seealso cref= Component#getFocusTraversalKeys </seealso>
		''' <exception cref="IllegalArgumentException"> if id is not one of
		'''         {@code KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS},
		'''         {@code KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS},
		'''         {@code KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS}, or
		'''         {@code KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS},
		'''         or if keystrokes is {@code null},
		'''         or if keystrokes contains {@code null},
		'''         or if any keystroke
		'''         represents a {@code KEY_TYPED} event,
		'''         or if any keystroke already maps
		'''         to another default focus traversal operation
		''' @beaninfo
		'''       bound: true </exception>
		Public Overridable Sub setDefaultFocusTraversalKeys(Of T1 As AWTKeyStroke)(ByVal id As Integer, ByVal keystrokes As java.util.Set(Of T1))
			If id < 0 OrElse id >= TRAVERSAL_KEY_LENGTH Then Throw New IllegalArgumentException("invalid focus traversal key identifier")
			If keystrokes Is Nothing Then Throw New IllegalArgumentException("cannot set null Set of default focus traversal keys")

			Dim oldKeys As java.util.Set(Of AWTKeyStroke)

			SyncLock Me
				For Each keystroke As AWTKeyStroke In keystrokes

					If keystroke Is Nothing Then Throw New IllegalArgumentException("cannot set null focus traversal key")

					If keystroke.keyChar <> java.awt.event.KeyEvent.CHAR_UNDEFINED Then Throw New IllegalArgumentException("focus traversal keys cannot map to KEY_TYPED events")

					' Check to see if key already maps to another traversal
					' operation
					For i As Integer = 0 To TRAVERSAL_KEY_LENGTH - 1
						If i = id Then Continue For

						If defaultFocusTraversalKeys(i).contains(keystroke) Then Throw New IllegalArgumentException("focus traversal keys must be unique for a Component")
					Next i
				Next keystroke

				oldKeys = defaultFocusTraversalKeys(id)
				defaultFocusTraversalKeys(id) = java.util.Collections.unmodifiableSet(New HashSet(Of )(keystrokes))
			End SyncLock

			firePropertyChange(defaultFocusTraversalKeyPropertyNames(id), oldKeys, keystrokes)
		End Sub

		''' <summary>
		''' Returns a Set of default focus traversal keys for a given traversal
		''' operation. This traversal key Set will be in effect on all Windows that
		''' have no such Set of their own explicitly defined. This Set will also be
		''' inherited, recursively, by any child Component of those Windows that has
		''' no such Set of its own explicitly defined. (See
		''' <code>setDefaultFocusTraversalKeys</code> for a full description of each
		''' operation.)
		''' </summary>
		''' <param name="id"> one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
		'''        KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
		'''        KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or
		'''        KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS </param>
		''' <returns> the <code>Set</code> of <code>AWTKeyStroke</code>s
		'''         for the specified operation; the <code>Set</code>
		'''         will be unmodifiable, and may be empty; <code>null</code>
		'''         will never be returned </returns>
		''' <seealso cref= #setDefaultFocusTraversalKeys </seealso>
		''' <seealso cref= Component#setFocusTraversalKeys </seealso>
		''' <seealso cref= Component#getFocusTraversalKeys </seealso>
		''' <exception cref="IllegalArgumentException"> if id is not one of
		'''         KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
		'''         KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
		'''         KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or
		'''         KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS </exception>
		Public Overridable Function getDefaultFocusTraversalKeys(ByVal id As Integer) As java.util.Set(Of AWTKeyStroke)
			If id < 0 OrElse id >= TRAVERSAL_KEY_LENGTH Then Throw New IllegalArgumentException("invalid focus traversal key identifier")

			' Okay to return Set directly because it is an unmodifiable view
			Return defaultFocusTraversalKeys(id)
		End Function

		''' <summary>
		''' Returns the current focus cycle root, if the current focus cycle root is
		''' in the same context as the calling thread. If the focus owner is itself
		''' a focus cycle root, then it may be ambiguous as to which Components
		''' represent the next and previous Components to focus during normal focus
		''' traversal. In that case, the current focus cycle root is used to
		''' differentiate among the possibilities.
		''' <p>
		''' This method is intended to be used only by KeyboardFocusManagers and
		''' focus implementations. It is not for general client use.
		''' </summary>
		''' <returns> the current focus cycle root, or null if the current focus cycle
		'''         root is not a member of the calling thread's context </returns>
		''' <seealso cref= #getGlobalCurrentFocusCycleRoot </seealso>
		''' <seealso cref= #setGlobalCurrentFocusCycleRoot </seealso>
		Public Overridable Property currentFocusCycleRoot As Container
			Get
				SyncLock GetType(KeyboardFocusManager)
					If currentFocusCycleRoot Is Nothing Then Return Nothing
    
					Return If(currentFocusCycleRoot.appContext Is sun.awt.AppContext.appContext, currentFocusCycleRoot, Nothing)
				End SyncLock
			End Get
		End Property

		''' <summary>
		''' Returns the current focus cycle root, even if the calling thread is in a
		''' different context than the current focus cycle root. If the focus owner
		''' is itself a focus cycle root, then it may be ambiguous as to which
		''' Components represent the next and previous Components to focus during
		''' normal focus traversal. In that case, the current focus cycle root is
		''' used to differentiate among the possibilities.
		''' </summary>
		''' <returns> the current focus cycle root, or null if the current focus cycle
		'''         root is not a member of the calling thread's context </returns>
		''' <seealso cref= #getCurrentFocusCycleRoot </seealso>
		''' <seealso cref= #setGlobalCurrentFocusCycleRoot </seealso>
		''' <exception cref="SecurityException"> if this KeyboardFocusManager is not the
		'''         current KeyboardFocusManager for the calling thread's context
		'''         and if the calling thread does not have "replaceKeyboardFocusManager"
		'''         permission </exception>
		Protected Friend Overridable Property globalCurrentFocusCycleRoot As Container
			Get
				SyncLock GetType(KeyboardFocusManager)
					checkKFMSecurity()
					Return currentFocusCycleRoot
				End SyncLock
			End Get
			Set(ByVal newFocusCycleRoot As Container)
				checkReplaceKFMPermission()
    
				Dim oldFocusCycleRoot As Container
    
				SyncLock GetType(KeyboardFocusManager)
					oldFocusCycleRoot = currentFocusCycleRoot
					currentFocusCycleRoot = newFocusCycleRoot
				End SyncLock
    
				firePropertyChange("currentFocusCycleRoot", oldFocusCycleRoot, newFocusCycleRoot)
			End Set
		End Property


		Friend Overridable Property globalCurrentFocusCycleRootPriv As Container
			Set(ByVal newFocusCycleRoot As Container)
				java.security.AccessController.doPrivileged(New PrivilegedActionAnonymousInnerClassHelper2(Of T)
			End Set
		End Property

		Private Class PrivilegedActionAnonymousInnerClassHelper2(Of T)
			Implements java.security.PrivilegedAction(Of T)

			Public Overridable Function run() As Void
				outerInstance.globalCurrentFocusCycleRoot = newFocusCycleRoot
				Return Nothing
			End Function
		End Class

		''' <summary>
		''' Adds a PropertyChangeListener to the listener list. The listener is
		''' registered for all bound properties of this [Class], including the
		''' following:
		''' <ul>
		'''    <li>whether the KeyboardFocusManager is currently managing focus
		'''        for this application or applet's browser context
		'''        ("managingFocus")</li>
		'''    <li>the focus owner ("focusOwner")</li>
		'''    <li>the permanent focus owner ("permanentFocusOwner")</li>
		'''    <li>the focused Window ("focusedWindow")</li>
		'''    <li>the active Window ("activeWindow")</li>
		'''    <li>the default focus traversal policy
		'''        ("defaultFocusTraversalPolicy")</li>
		'''    <li>the Set of default FORWARD_TRAVERSAL_KEYS
		'''        ("forwardDefaultFocusTraversalKeys")</li>
		'''    <li>the Set of default BACKWARD_TRAVERSAL_KEYS
		'''        ("backwardDefaultFocusTraversalKeys")</li>
		'''    <li>the Set of default UP_CYCLE_TRAVERSAL_KEYS
		'''        ("upCycleDefaultFocusTraversalKeys")</li>
		'''    <li>the Set of default DOWN_CYCLE_TRAVERSAL_KEYS
		'''        ("downCycleDefaultFocusTraversalKeys")</li>
		'''    <li>the current focus cycle root ("currentFocusCycleRoot")</li>
		''' </ul>
		''' If listener is null, no exception is thrown and no action is performed.
		''' </summary>
		''' <param name="listener"> the PropertyChangeListener to be added </param>
		''' <seealso cref= #removePropertyChangeListener </seealso>
		''' <seealso cref= #getPropertyChangeListeners </seealso>
		''' <seealso cref= #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener) </seealso>
		Public Overridable Sub addPropertyChangeListener(ByVal listener As java.beans.PropertyChangeListener)
			If listener IsNot Nothing Then
				SyncLock Me
					If changeSupport Is Nothing Then changeSupport = New java.beans.PropertyChangeSupport(Me)
					changeSupport.addPropertyChangeListener(listener)
				End SyncLock
			End If
		End Sub

		''' <summary>
		''' Removes a PropertyChangeListener from the listener list. This method
		''' should be used to remove the PropertyChangeListeners that were
		''' registered for all bound properties of this class.
		''' <p>
		''' If listener is null, no exception is thrown and no action is performed.
		''' </summary>
		''' <param name="listener"> the PropertyChangeListener to be removed </param>
		''' <seealso cref= #addPropertyChangeListener </seealso>
		''' <seealso cref= #getPropertyChangeListeners </seealso>
		''' <seealso cref= #removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener) </seealso>
		Public Overridable Sub removePropertyChangeListener(ByVal listener As java.beans.PropertyChangeListener)
			If listener IsNot Nothing Then
				SyncLock Me
					If changeSupport IsNot Nothing Then changeSupport.removePropertyChangeListener(listener)
				End SyncLock
			End If
		End Sub

		''' <summary>
		''' Returns an array of all the property change listeners
		''' registered on this keyboard focus manager.
		''' </summary>
		''' <returns> all of this keyboard focus manager's
		'''         <code>PropertyChangeListener</code>s
		'''         or an empty array if no property change
		'''         listeners are currently registered
		''' </returns>
		''' <seealso cref= #addPropertyChangeListener </seealso>
		''' <seealso cref= #removePropertyChangeListener </seealso>
		''' <seealso cref= #getPropertyChangeListeners(java.lang.String)
		''' @since 1.4 </seealso>
		<MethodImpl(MethodImplOptions.Synchronized)> _
		Public Overridable Property propertyChangeListeners As java.beans.PropertyChangeListener()
			Get
				If changeSupport Is Nothing Then changeSupport = New java.beans.PropertyChangeSupport(Me)
				Return changeSupport.propertyChangeListeners
			End Get
		End Property

		''' <summary>
		''' Adds a PropertyChangeListener to the listener list for a specific
		''' property. The specified property may be user-defined, or one of the
		''' following:
		''' <ul>
		'''    <li>whether the KeyboardFocusManager is currently managing focus
		'''        for this application or applet's browser context
		'''        ("managingFocus")</li>
		'''    <li>the focus owner ("focusOwner")</li>
		'''    <li>the permanent focus owner ("permanentFocusOwner")</li>
		'''    <li>the focused Window ("focusedWindow")</li>
		'''    <li>the active Window ("activeWindow")</li>
		'''    <li>the default focus traversal policy
		'''        ("defaultFocusTraversalPolicy")</li>
		'''    <li>the Set of default FORWARD_TRAVERSAL_KEYS
		'''        ("forwardDefaultFocusTraversalKeys")</li>
		'''    <li>the Set of default BACKWARD_TRAVERSAL_KEYS
		'''        ("backwardDefaultFocusTraversalKeys")</li>
		'''    <li>the Set of default UP_CYCLE_TRAVERSAL_KEYS
		'''        ("upCycleDefaultFocusTraversalKeys")</li>
		'''    <li>the Set of default DOWN_CYCLE_TRAVERSAL_KEYS
		'''        ("downCycleDefaultFocusTraversalKeys")</li>
		'''    <li>the current focus cycle root ("currentFocusCycleRoot")</li>
		''' </ul>
		''' If listener is null, no exception is thrown and no action is performed.
		''' </summary>
		''' <param name="propertyName"> one of the property names listed above </param>
		''' <param name="listener"> the PropertyChangeListener to be added </param>
		''' <seealso cref= #addPropertyChangeListener(java.beans.PropertyChangeListener) </seealso>
		''' <seealso cref= #removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener) </seealso>
		''' <seealso cref= #getPropertyChangeListeners(java.lang.String) </seealso>
		Public Overridable Sub addPropertyChangeListener(ByVal propertyName As String, ByVal listener As java.beans.PropertyChangeListener)
			If listener IsNot Nothing Then
				SyncLock Me
					If changeSupport Is Nothing Then changeSupport = New java.beans.PropertyChangeSupport(Me)
					changeSupport.addPropertyChangeListener(propertyName, listener)
				End SyncLock
			End If
		End Sub

		''' <summary>
		''' Removes a PropertyChangeListener from the listener list for a specific
		''' property. This method should be used to remove PropertyChangeListeners
		''' that were registered for a specific bound property.
		''' <p>
		''' If listener is null, no exception is thrown and no action is performed.
		''' </summary>
		''' <param name="propertyName"> a valid property name </param>
		''' <param name="listener"> the PropertyChangeListener to be removed </param>
		''' <seealso cref= #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener) </seealso>
		''' <seealso cref= #getPropertyChangeListeners(java.lang.String) </seealso>
		''' <seealso cref= #removePropertyChangeListener(java.beans.PropertyChangeListener) </seealso>
		Public Overridable Sub removePropertyChangeListener(ByVal propertyName As String, ByVal listener As java.beans.PropertyChangeListener)
			If listener IsNot Nothing Then
				SyncLock Me
					If changeSupport IsNot Nothing Then changeSupport.removePropertyChangeListener(propertyName, listener)
				End SyncLock
			End If
		End Sub

		''' <summary>
		''' Returns an array of all the <code>PropertyChangeListener</code>s
		''' associated with the named property.
		''' </summary>
		''' <returns> all of the <code>PropertyChangeListener</code>s associated with
		'''         the named property or an empty array if no such listeners have
		'''         been added.
		''' </returns>
		''' <seealso cref= #addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener) </seealso>
		''' <seealso cref= #removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)
		''' @since 1.4 </seealso>
		<MethodImpl(MethodImplOptions.Synchronized)> _
		Public Overridable Function getPropertyChangeListeners(ByVal propertyName As String) As java.beans.PropertyChangeListener()
			If changeSupport Is Nothing Then changeSupport = New java.beans.PropertyChangeSupport(Me)
			Return changeSupport.getPropertyChangeListeners(propertyName)
		End Function

		''' <summary>
		''' Fires a PropertyChangeEvent in response to a change in a bound property.
		''' The event will be delivered to all registered PropertyChangeListeners.
		''' No event will be delivered if oldValue and newValue are the same.
		''' </summary>
		''' <param name="propertyName"> the name of the property that has changed </param>
		''' <param name="oldValue"> the property's previous value </param>
		''' <param name="newValue"> the property's new value </param>
		Protected Friend Overridable Sub firePropertyChange(ByVal propertyName As String, ByVal oldValue As Object, ByVal newValue As Object)
			If oldValue Is newValue Then Return
			Dim changeSupport As java.beans.PropertyChangeSupport = Me.changeSupport
			If changeSupport IsNot Nothing Then changeSupport.firePropertyChange(propertyName, oldValue, newValue)
		End Sub

		''' <summary>
		''' Adds a VetoableChangeListener to the listener list. The listener is
		''' registered for all vetoable properties of this [Class], including the
		''' following:
		''' <ul>
		'''    <li>the focus owner ("focusOwner")</li>
		'''    <li>the permanent focus owner ("permanentFocusOwner")</li>
		'''    <li>the focused Window ("focusedWindow")</li>
		'''    <li>the active Window ("activeWindow")</li>
		''' </ul>
		''' If listener is null, no exception is thrown and no action is performed.
		''' </summary>
		''' <param name="listener"> the VetoableChangeListener to be added </param>
		''' <seealso cref= #removeVetoableChangeListener </seealso>
		''' <seealso cref= #getVetoableChangeListeners </seealso>
		''' <seealso cref= #addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener) </seealso>
		Public Overridable Sub addVetoableChangeListener(ByVal listener As java.beans.VetoableChangeListener)
			If listener IsNot Nothing Then
				SyncLock Me
					If vetoableSupport Is Nothing Then vetoableSupport = New java.beans.VetoableChangeSupport(Me)
					vetoableSupport.addVetoableChangeListener(listener)
				End SyncLock
			End If
		End Sub

		''' <summary>
		''' Removes a VetoableChangeListener from the listener list. This method
		''' should be used to remove the VetoableChangeListeners that were
		''' registered for all vetoable properties of this class.
		''' <p>
		''' If listener is null, no exception is thrown and no action is performed.
		''' </summary>
		''' <param name="listener"> the VetoableChangeListener to be removed </param>
		''' <seealso cref= #addVetoableChangeListener </seealso>
		''' <seealso cref= #getVetoableChangeListeners </seealso>
		''' <seealso cref= #removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener) </seealso>
		Public Overridable Sub removeVetoableChangeListener(ByVal listener As java.beans.VetoableChangeListener)
			If listener IsNot Nothing Then
				SyncLock Me
					If vetoableSupport IsNot Nothing Then vetoableSupport.removeVetoableChangeListener(listener)
				End SyncLock
			End If
		End Sub

		''' <summary>
		''' Returns an array of all the vetoable change listeners
		''' registered on this keyboard focus manager.
		''' </summary>
		''' <returns> all of this keyboard focus manager's
		'''         <code>VetoableChangeListener</code>s
		'''         or an empty array if no vetoable change
		'''         listeners are currently registered
		''' </returns>
		''' <seealso cref= #addVetoableChangeListener </seealso>
		''' <seealso cref= #removeVetoableChangeListener </seealso>
		''' <seealso cref= #getVetoableChangeListeners(java.lang.String)
		''' @since 1.4 </seealso>
		<MethodImpl(MethodImplOptions.Synchronized)> _
		Public Overridable Property vetoableChangeListeners As java.beans.VetoableChangeListener()
			Get
				If vetoableSupport Is Nothing Then vetoableSupport = New java.beans.VetoableChangeSupport(Me)
				Return vetoableSupport.vetoableChangeListeners
			End Get
		End Property

		''' <summary>
		''' Adds a VetoableChangeListener to the listener list for a specific
		''' property. The specified property may be user-defined, or one of the
		''' following:
		''' <ul>
		'''    <li>the focus owner ("focusOwner")</li>
		'''    <li>the permanent focus owner ("permanentFocusOwner")</li>
		'''    <li>the focused Window ("focusedWindow")</li>
		'''    <li>the active Window ("activeWindow")</li>
		''' </ul>
		''' If listener is null, no exception is thrown and no action is performed.
		''' </summary>
		''' <param name="propertyName"> one of the property names listed above </param>
		''' <param name="listener"> the VetoableChangeListener to be added </param>
		''' <seealso cref= #addVetoableChangeListener(java.beans.VetoableChangeListener) </seealso>
		''' <seealso cref= #removeVetoableChangeListener </seealso>
		''' <seealso cref= #getVetoableChangeListeners </seealso>
		Public Overridable Sub addVetoableChangeListener(ByVal propertyName As String, ByVal listener As java.beans.VetoableChangeListener)
			If listener IsNot Nothing Then
				SyncLock Me
					If vetoableSupport Is Nothing Then vetoableSupport = New java.beans.VetoableChangeSupport(Me)
					vetoableSupport.addVetoableChangeListener(propertyName, listener)
				End SyncLock
			End If
		End Sub

		''' <summary>
		''' Removes a VetoableChangeListener from the listener list for a specific
		''' property. This method should be used to remove VetoableChangeListeners
		''' that were registered for a specific bound property.
		''' <p>
		''' If listener is null, no exception is thrown and no action is performed.
		''' </summary>
		''' <param name="propertyName"> a valid property name </param>
		''' <param name="listener"> the VetoableChangeListener to be removed </param>
		''' <seealso cref= #addVetoableChangeListener </seealso>
		''' <seealso cref= #getVetoableChangeListeners </seealso>
		''' <seealso cref= #removeVetoableChangeListener(java.beans.VetoableChangeListener) </seealso>
		Public Overridable Sub removeVetoableChangeListener(ByVal propertyName As String, ByVal listener As java.beans.VetoableChangeListener)
			If listener IsNot Nothing Then
				SyncLock Me
					If vetoableSupport IsNot Nothing Then vetoableSupport.removeVetoableChangeListener(propertyName, listener)
				End SyncLock
			End If
		End Sub

		''' <summary>
		''' Returns an array of all the <code>VetoableChangeListener</code>s
		''' associated with the named property.
		''' </summary>
		''' <returns> all of the <code>VetoableChangeListener</code>s associated with
		'''         the named property or an empty array if no such listeners have
		'''         been added.
		''' </returns>
		''' <seealso cref= #addVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener) </seealso>
		''' <seealso cref= #removeVetoableChangeListener(java.lang.String,java.beans.VetoableChangeListener) </seealso>
		''' <seealso cref= #getVetoableChangeListeners
		''' @since 1.4 </seealso>
		<MethodImpl(MethodImplOptions.Synchronized)> _
		Public Overridable Function getVetoableChangeListeners(ByVal propertyName As String) As java.beans.VetoableChangeListener()
			If vetoableSupport Is Nothing Then vetoableSupport = New java.beans.VetoableChangeSupport(Me)
			Return vetoableSupport.getVetoableChangeListeners(propertyName)
		End Function

		''' <summary>
		''' Fires a PropertyChangeEvent in response to a change in a vetoable
		''' property. The event will be delivered to all registered
		''' VetoableChangeListeners. If a VetoableChangeListener throws a
		''' PropertyVetoException, a new event is fired reverting all
		''' VetoableChangeListeners to the old value and the exception is then
		''' rethrown. No event will be delivered if oldValue and newValue are the
		''' same.
		''' </summary>
		''' <param name="propertyName"> the name of the property that has changed </param>
		''' <param name="oldValue"> the property's previous value </param>
		''' <param name="newValue"> the property's new value </param>
		''' <exception cref="java.beans.PropertyVetoException"> if a
		'''         <code>VetoableChangeListener</code> threw
		'''         <code>PropertyVetoException</code> </exception>
		Protected Friend Overridable Sub fireVetoableChange(ByVal propertyName As String, ByVal oldValue As Object, ByVal newValue As Object)
			If oldValue Is newValue Then Return
			Dim vetoableSupport As java.beans.VetoableChangeSupport = Me.vetoableSupport
			If vetoableSupport IsNot Nothing Then vetoableSupport.fireVetoableChange(propertyName, oldValue, newValue)
		End Sub

		''' <summary>
		''' Adds a KeyEventDispatcher to this KeyboardFocusManager's dispatcher
		''' chain. This KeyboardFocusManager will request that each
		''' KeyEventDispatcher dispatch KeyEvents generated by the user before
		''' finally dispatching the KeyEvent itself. KeyEventDispatchers will be
		''' notified in the order in which they were added. Notifications will halt
		''' as soon as one KeyEventDispatcher returns <code>true</code> from its
		''' <code>dispatchKeyEvent</code> method. There is no limit to the total
		''' number of KeyEventDispatchers which can be added, nor to the number of
		''' times which a particular KeyEventDispatcher instance can be added.
		''' <p>
		''' If a null dispatcher is specified, no action is taken and no exception
		''' is thrown.
		''' <p>
		''' In a multithreaded application, <seealso cref="KeyEventDispatcher"/> behaves
		''' the same as other AWT listeners.  See
		''' <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		''' >AWT Threading Issues</a> for more details.
		''' </summary>
		''' <param name="dispatcher"> the KeyEventDispatcher to add to the dispatcher chain </param>
		''' <seealso cref= #removeKeyEventDispatcher </seealso>
		Public Overridable Sub addKeyEventDispatcher(ByVal dispatcher As KeyEventDispatcher)
			If dispatcher IsNot Nothing Then
				SyncLock Me
					If keyEventDispatchers Is Nothing Then keyEventDispatchers = New LinkedList(Of )
					keyEventDispatchers.AddLast(dispatcher)
				End SyncLock
			End If
		End Sub

		''' <summary>
		''' Removes a KeyEventDispatcher which was previously added to this
		''' KeyboardFocusManager's dispatcher chain. This KeyboardFocusManager
		''' cannot itself be removed, unless it was explicitly re-registered via a
		''' call to <code>addKeyEventDispatcher</code>.
		''' <p>
		''' If a null dispatcher is specified, if the specified dispatcher is not
		''' in the dispatcher chain, or if this KeyboardFocusManager is specified
		''' without having been explicitly re-registered, no action is taken and no
		''' exception is thrown.
		''' <p>
		''' In a multithreaded application, <seealso cref="KeyEventDispatcher"/> behaves
		''' the same as other AWT listeners.  See
		''' <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		''' >AWT Threading Issues</a> for more details.
		''' </summary>
		''' <param name="dispatcher"> the KeyEventDispatcher to remove from the dispatcher
		'''        chain </param>
		''' <seealso cref= #addKeyEventDispatcher </seealso>
		Public Overridable Sub removeKeyEventDispatcher(ByVal dispatcher As KeyEventDispatcher)
			If dispatcher IsNot Nothing Then
				SyncLock Me
					If keyEventDispatchers IsNot Nothing Then keyEventDispatchers.remove(dispatcher)
				End SyncLock
			End If
		End Sub

		''' <summary>
		''' Returns this KeyboardFocusManager's KeyEventDispatcher chain as a List.
		''' The List will not include this KeyboardFocusManager unless it was
		''' explicitly re-registered via a call to
		''' <code>addKeyEventDispatcher</code>. If no other KeyEventDispatchers are
		''' registered, implementations are free to return null or a List of length
		''' 0. Client code should not assume one behavior over another, nor should
		''' it assume that the behavior, once established, will not change.
		''' </summary>
		''' <returns> a possibly null or empty List of KeyEventDispatchers </returns>
		''' <seealso cref= #addKeyEventDispatcher </seealso>
		''' <seealso cref= #removeKeyEventDispatcher </seealso>
		<MethodImpl(MethodImplOptions.Synchronized)> _
		Protected Friend Overridable Property keyEventDispatchers As IList(Of KeyEventDispatcher)
			Get
				Return If(keyEventDispatchers IsNot Nothing, CType(keyEventDispatchers.clone(), IList), Nothing)
			End Get
		End Property

		''' <summary>
		''' Adds a KeyEventPostProcessor to this KeyboardFocusManager's post-
		''' processor chain. After a KeyEvent has been dispatched to and handled by
		''' its target, KeyboardFocusManager will request that each
		''' KeyEventPostProcessor perform any necessary post-processing as part
		''' of the KeyEvent's final resolution. KeyEventPostProcessors
		''' will be notified in the order in which they were added; the current
		''' KeyboardFocusManager will be notified last. Notifications will halt
		''' as soon as one KeyEventPostProcessor returns <code>true</code> from its
		''' <code>postProcessKeyEvent</code> method. There is no limit to the the
		''' total number of KeyEventPostProcessors that can be added, nor to the
		''' number of times that a particular KeyEventPostProcessor instance can be
		''' added.
		''' <p>
		''' If a null post-processor is specified, no action is taken and no
		''' exception is thrown.
		''' <p>
		''' In a multithreaded application, <seealso cref="KeyEventPostProcessor"/> behaves
		''' the same as other AWT listeners.  See
		''' <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		''' >AWT Threading Issues</a> for more details.
		''' </summary>
		''' <param name="processor"> the KeyEventPostProcessor to add to the post-processor
		'''        chain </param>
		''' <seealso cref= #removeKeyEventPostProcessor </seealso>
		Public Overridable Sub addKeyEventPostProcessor(ByVal processor As KeyEventPostProcessor)
			If processor IsNot Nothing Then
				SyncLock Me
					If keyEventPostProcessors Is Nothing Then keyEventPostProcessors = New LinkedList(Of )
					keyEventPostProcessors.AddLast(processor)
				End SyncLock
			End If
		End Sub


		''' <summary>
		''' Removes a previously added KeyEventPostProcessor from this
		''' KeyboardFocusManager's post-processor chain. This KeyboardFocusManager
		''' cannot itself be entirely removed from the chain. Only additional
		''' references added via <code>addKeyEventPostProcessor</code> can be
		''' removed.
		''' <p>
		''' If a null post-processor is specified, if the specified post-processor
		''' is not in the post-processor chain, or if this KeyboardFocusManager is
		''' specified without having been explicitly added, no action is taken and
		''' no exception is thrown.
		''' <p>
		''' In a multithreaded application, <seealso cref="KeyEventPostProcessor"/> behaves
		''' the same as other AWT listeners.  See
		''' <a href="doc-files/AWTThreadIssues.html#ListenersThreads"
		''' >AWT Threading Issues</a> for more details.
		''' </summary>
		''' <param name="processor"> the KeyEventPostProcessor to remove from the post-
		'''        processor chain </param>
		''' <seealso cref= #addKeyEventPostProcessor </seealso>
		Public Overridable Sub removeKeyEventPostProcessor(ByVal processor As KeyEventPostProcessor)
			If processor IsNot Nothing Then
				SyncLock Me
					If keyEventPostProcessors IsNot Nothing Then keyEventPostProcessors.remove(processor)
				End SyncLock
			End If
		End Sub


		''' <summary>
		''' Returns this KeyboardFocusManager's KeyEventPostProcessor chain as a
		''' List. The List will not include this KeyboardFocusManager unless it was
		''' explicitly added via a call to <code>addKeyEventPostProcessor</code>. If
		''' no KeyEventPostProcessors are registered, implementations are free to
		''' return null or a List of length 0. Client code should not assume one
		''' behavior over another, nor should it assume that the behavior, once
		''' established, will not change.
		''' </summary>
		''' <returns> a possibly null or empty List of KeyEventPostProcessors </returns>
		''' <seealso cref= #addKeyEventPostProcessor </seealso>
		''' <seealso cref= #removeKeyEventPostProcessor </seealso>
		Protected Friend Overridable Property keyEventPostProcessors As IList(Of KeyEventPostProcessor)
			Get
				Return If(keyEventPostProcessors IsNot Nothing, CType(keyEventPostProcessors.clone(), IList), Nothing)
			End Get
		End Property



		Friend Shared Property mostRecentFocusOwner As Component
			Set(ByVal component_Renamed As Component)
				Dim window_Renamed As Component = component_Renamed
				Do While window_Renamed IsNot Nothing AndAlso Not(TypeOf window_Renamed Is Window)
					window_Renamed = window_Renamed.parent
				Loop
				If window_Renamed IsNot Nothing Then mostRecentFocusOwnerner(CType(window_Renamed, Window), component_Renamed)
			End Set
		End Property
		<MethodImpl(MethodImplOptions.Synchronized)> _
		Friend Shared Sub setMostRecentFocusOwner(ByVal window_Renamed As Window, ByVal component_Renamed As Component)
			' ATTN: component has a strong reference to window via chain
			' of Component.parent fields.  Since WeakHasMap refers to its
			' values strongly, we need to break the strong link from the
			' value (component) back to its key (window).
			Dim weakValue As WeakReference(Of Component) = Nothing
			If component_Renamed IsNot Nothing Then weakValue = New WeakReference(Of )(component_Renamed)
			mostRecentFocusOwners(window_Renamed) = weakValue
		End Sub
		Friend Shared Sub clearMostRecentFocusOwner(ByVal comp As Component)
			Dim window_Renamed As Container

			If comp Is Nothing Then Return

			SyncLock comp.treeLock
				window_Renamed = comp.parent
				Do While window_Renamed IsNot Nothing AndAlso Not(TypeOf window_Renamed Is Window)
					window_Renamed = window_Renamed.parent
				Loop
			End SyncLock

			SyncLock GetType(KeyboardFocusManager)
				If (window_Renamed IsNot Nothing) AndAlso (getMostRecentFocusOwner(CType(window_Renamed, Window)) Is comp) Then mostRecentFocusOwnerner(CType(window_Renamed, Window), Nothing)
				' Also clear temporary lost component stored in Window
				If window_Renamed IsNot Nothing Then
					Dim realWindow As Window = CType(window_Renamed, Window)
					If realWindow.temporaryLostComponent Is comp Then realWindow.temporaryLostComponent = Nothing
				End If
			End SyncLock
		End Sub

	'    
	'     * Please be careful changing this method! It is called from
	'     * javax.swing.JComponent.runInputVerifier() using reflection.
	'     
		<MethodImpl(MethodImplOptions.Synchronized)> _
		Friend Shared Function getMostRecentFocusOwner(ByVal window_Renamed As Window) As Component
			Dim weakValue As WeakReference(Of Component) = CType(mostRecentFocusOwners(window_Renamed), WeakReference)
			Return If(weakValue Is Nothing, Nothing, CType(weakValue.get(), Component))
		End Function

		''' <summary>
		''' This method is called by the AWT event dispatcher requesting that the
		''' current KeyboardFocusManager dispatch the specified event on its behalf.
		''' It is expected that all KeyboardFocusManagers will dispatch all
		''' FocusEvents, all WindowEvents related to focus, and all KeyEvents.
		''' These events should be dispatched based on the KeyboardFocusManager's
		''' notion of the focus owner and the focused and active Windows, sometimes
		''' overriding the source of the specified AWTEvent. Dispatching must be
		''' done using <code>redispatchEvent</code> to prevent the AWT event
		''' dispatcher from recursively requesting that the KeyboardFocusManager
		''' dispatch the event again. If this method returns <code>false</code>,
		''' then the AWT event dispatcher will attempt to dispatch the event itself.
		''' </summary>
		''' <param name="e"> the AWTEvent to be dispatched </param>
		''' <returns> <code>true</code> if this method dispatched the event;
		'''         <code>false</code> otherwise </returns>
		''' <seealso cref= #redispatchEvent </seealso>
		''' <seealso cref= #dispatchKeyEvent </seealso>
		Public MustOverride Function dispatchEvent(ByVal e As AWTEvent) As Boolean

		''' <summary>
		''' Redispatches an AWTEvent in such a way that the AWT event dispatcher
		''' will not recursively request that the KeyboardFocusManager, or any
		''' installed KeyEventDispatchers, dispatch the event again. Client
		''' implementations of <code>dispatchEvent</code> and client-defined
		''' KeyEventDispatchers must call <code>redispatchEvent(target, e)</code>
		''' instead of <code>target.dispatchEvent(e)</code> to dispatch an event.
		''' <p>
		''' This method is intended to be used only by KeyboardFocusManagers and
		''' KeyEventDispatchers. It is not for general client use.
		''' </summary>
		''' <param name="target"> the Component to which the event should be dispatched </param>
		''' <param name="e"> the event to dispatch </param>
		''' <seealso cref= #dispatchEvent </seealso>
		''' <seealso cref= KeyEventDispatcher </seealso>
		Public Sub redispatchEvent(ByVal target As Component, ByVal e As AWTEvent)
			e.focusManagerIsDispatching = True
			target.dispatchEvent(e)
			e.focusManagerIsDispatching = False
		End Sub

		''' <summary>
		''' Typically this method will be called by <code>dispatchEvent</code> if no
		''' other KeyEventDispatcher in the dispatcher chain dispatched the
		''' KeyEvent, or if no other KeyEventDispatchers are registered. If an
		''' implementation of this method returns <code>false</code>,
		''' <code>dispatchEvent</code> may try to dispatch the KeyEvent itself, or
		''' may simply return <code>false</code>. If <code>true</code> is returned,
		''' <code>dispatchEvent</code> should return <code>true</code> as well.
		''' </summary>
		''' <param name="e"> the KeyEvent which the current KeyboardFocusManager has
		'''        requested that this KeyEventDispatcher dispatch </param>
		''' <returns> <code>true</code> if the KeyEvent was dispatched;
		'''         <code>false</code> otherwise </returns>
		''' <seealso cref= #dispatchEvent </seealso>
		Public MustOverride Function dispatchKeyEvent(ByVal e As java.awt.event.KeyEvent) As Boolean Implements KeyEventDispatcher.dispatchKeyEvent

		''' <summary>
		''' This method will be called by <code>dispatchKeyEvent</code>.
		''' By default, this method will handle any unconsumed KeyEvents that
		''' map to an AWT <code>MenuShortcut</code> by consuming the event
		''' and activating the shortcut.
		''' </summary>
		''' <param name="e"> the KeyEvent to post-process </param>
		''' <returns> <code>true</code> to indicate that no other
		'''         KeyEventPostProcessor will be notified of the KeyEvent. </returns>
		''' <seealso cref= #dispatchKeyEvent </seealso>
		''' <seealso cref= MenuShortcut </seealso>
		Public MustOverride Function postProcessKeyEvent(ByVal e As java.awt.event.KeyEvent) As Boolean Implements KeyEventPostProcessor.postProcessKeyEvent

		''' <summary>
		''' This method initiates a focus traversal operation if and only if the
		''' KeyEvent represents a focus traversal key for the specified
		''' focusedComponent. It is expected that focusedComponent is the current
		''' focus owner, although this need not be the case. If it is not,
		''' focus traversal will nevertheless proceed as if focusedComponent
		''' were the current focus owner.
		''' </summary>
		''' <param name="focusedComponent"> the Component that will be the basis for a focus
		'''        traversal operation if the specified event represents a focus
		'''        traversal key for the Component </param>
		''' <param name="e"> the event that may represent a focus traversal key </param>
		Public MustOverride Sub processKeyEvent(ByVal focusedComponent As Component, ByVal e As java.awt.event.KeyEvent)

		''' <summary>
		''' Called by the AWT to notify the KeyboardFocusManager that it should
		''' delay dispatching of KeyEvents until the specified Component becomes
		''' the focus owner. If client code requests a focus change, and the AWT
		''' determines that this request might be granted by the native windowing
		''' system, then the AWT will call this method. It is the responsibility of
		''' the KeyboardFocusManager to delay dispatching of KeyEvents with
		''' timestamps later than the specified time stamp until the specified
		''' Component receives a FOCUS_GAINED event, or the AWT cancels the delay
		''' request by invoking <code>dequeueKeyEvents</code> or
		''' <code>discardKeyEvents</code>.
		''' </summary>
		''' <param name="after"> timestamp of current event, or the current, system time if
		'''        the current event has no timestamp, or the AWT cannot determine
		'''        which event is currently being handled </param>
		''' <param name="untilFocused"> Component which should receive a FOCUS_GAINED event
		'''        before any pending KeyEvents </param>
		''' <seealso cref= #dequeueKeyEvents </seealso>
		''' <seealso cref= #discardKeyEvents </seealso>
		Protected Friend MustOverride Sub enqueueKeyEvents(ByVal after As Long, ByVal untilFocused As Component)

		''' <summary>
		''' Called by the AWT to notify the KeyboardFocusManager that it should
		''' cancel delayed dispatching of KeyEvents. All KeyEvents which were
		''' enqueued because of a call to <code>enqueueKeyEvents</code> with the
		''' same timestamp and Component should be released for normal dispatching
		''' to the current focus owner. If the given timestamp is less than zero,
		''' the outstanding enqueue request for the given Component with the <b>
		''' oldest</b> timestamp (if any) should be cancelled.
		''' </summary>
		''' <param name="after"> the timestamp specified in the call to
		'''        <code>enqueueKeyEvents</code>, or any value &lt; 0 </param>
		''' <param name="untilFocused"> the Component specified in the call to
		'''        <code>enqueueKeyEvents</code> </param>
		''' <seealso cref= #enqueueKeyEvents </seealso>
		''' <seealso cref= #discardKeyEvents </seealso>
		Protected Friend MustOverride Sub dequeueKeyEvents(ByVal after As Long, ByVal untilFocused As Component)

		''' <summary>
		''' Called by the AWT to notify the KeyboardFocusManager that it should
		''' cancel delayed dispatching of KeyEvents. All KeyEvents which were
		''' enqueued because of one or more calls to <code>enqueueKeyEvents</code>
		''' with the same Component should be discarded.
		''' </summary>
		''' <param name="comp"> the Component specified in one or more calls to
		'''        <code>enqueueKeyEvents</code> </param>
		''' <seealso cref= #enqueueKeyEvents </seealso>
		''' <seealso cref= #dequeueKeyEvents </seealso>
		Protected Friend MustOverride Sub discardKeyEvents(ByVal comp As Component)

		''' <summary>
		''' Focuses the Component after aComponent, typically based on a
		''' FocusTraversalPolicy.
		''' </summary>
		''' <param name="aComponent"> the Component that is the basis for the focus
		'''        traversal operation </param>
		''' <seealso cref= FocusTraversalPolicy </seealso>
		Public MustOverride Sub focusNextComponent(ByVal aComponent As Component)

		''' <summary>
		''' Focuses the Component before aComponent, typically based on a
		''' FocusTraversalPolicy.
		''' </summary>
		''' <param name="aComponent"> the Component that is the basis for the focus
		'''        traversal operation </param>
		''' <seealso cref= FocusTraversalPolicy </seealso>
		Public MustOverride Sub focusPreviousComponent(ByVal aComponent As Component)

		''' <summary>
		''' Moves the focus up one focus traversal cycle. Typically, the focus owner
		''' is set to aComponent's focus cycle root, and the current focus cycle
		''' root is set to the new focus owner's focus cycle root. If, however,
		''' aComponent's focus cycle root is a Window, then typically the focus
		''' owner is set to the Window's default Component to focus, and the current
		''' focus cycle root is unchanged.
		''' </summary>
		''' <param name="aComponent"> the Component that is the basis for the focus
		'''        traversal operation </param>
		Public MustOverride Sub upFocusCycle(ByVal aComponent As Component)

		''' <summary>
		''' Moves the focus down one focus traversal cycle. Typically, if
		''' aContainer is a focus cycle root, then the focus owner is set to
		''' aContainer's default Component to focus, and the current focus cycle
		''' root is set to aContainer. If aContainer is not a focus cycle root, then
		''' no focus traversal operation occurs.
		''' </summary>
		''' <param name="aContainer"> the Container that is the basis for the focus
		'''        traversal operation </param>
		Public MustOverride Sub downFocusCycle(ByVal aContainer As Container)

		''' <summary>
		''' Focuses the Component after the current focus owner.
		''' </summary>
		Public Sub focusNextComponent()
			Dim focusOwner_Renamed As Component = focusOwner
			If focusOwner_Renamed IsNot Nothing Then focusNextComponent(focusOwner_Renamed)
		End Sub

		''' <summary>
		''' Focuses the Component before the current focus owner.
		''' </summary>
		Public Sub focusPreviousComponent()
			Dim focusOwner_Renamed As Component = focusOwner
			If focusOwner_Renamed IsNot Nothing Then focusPreviousComponent(focusOwner_Renamed)
		End Sub

		''' <summary>
		''' Moves the focus up one focus traversal cycle from the current focus
		''' owner. Typically, the new focus owner is set to the current focus
		''' owner's focus cycle root, and the current focus cycle root is set to the
		''' new focus owner's focus cycle root. If, however, the current focus
		''' owner's focus cycle root is a Window, then typically the focus owner is
		''' set to the focus cycle root's default Component to focus, and the
		''' current focus cycle root is unchanged.
		''' </summary>
		Public Sub upFocusCycle()
			Dim focusOwner_Renamed As Component = focusOwner
			If focusOwner_Renamed IsNot Nothing Then upFocusCycle(focusOwner_Renamed)
		End Sub

		''' <summary>
		''' Moves the focus down one focus traversal cycle from the current focus
		''' owner, if and only if the current focus owner is a Container that is a
		''' focus cycle root. Typically, the focus owner is set to the current focus
		''' owner's default Component to focus, and the current focus cycle root is
		''' set to the current focus owner. If the current focus owner is not a
		''' Container that is a focus cycle root, then no focus traversal operation
		''' occurs.
		''' </summary>
		Public Sub downFocusCycle()
			Dim focusOwner_Renamed As Component = focusOwner
			If TypeOf focusOwner_Renamed Is Container Then downFocusCycle(CType(focusOwner_Renamed, Container))
		End Sub

		''' <summary>
		''' Dumps the list of focus requests to stderr
		''' </summary>
		Friend Overridable Sub dumpRequests()
			Console.Error.WriteLine(">>> Requests dump, time: " & System.currentTimeMillis())
			SyncLock heavyweightRequests
				For Each req As HeavyweightFocusRequest In heavyweightRequests
					Console.Error.WriteLine(">>> Req: " & req)
				Next req
			End SyncLock
			Console.Error.WriteLine("")
		End Sub

		Private NotInheritable Class LightweightFocusRequest
			Friend ReadOnly component_Renamed As Component
			Friend ReadOnly temporary As Boolean
			Friend ReadOnly cause As sun.awt.CausedFocusEvent.Cause

			Friend Sub New(ByVal component_Renamed As Component, ByVal temporary As Boolean, ByVal cause As sun.awt.CausedFocusEvent.Cause)
				Me.component_Renamed = component_Renamed
				Me.temporary = temporary
				Me.cause = cause
			End Sub
			Public Overrides Function ToString() As String
				Return "LightweightFocusRequest[component=" & component_Renamed & ",temporary=" & temporary & ", cause=" & cause & "]"
			End Function
		End Class

		Private NotInheritable Class HeavyweightFocusRequest
			Friend ReadOnly heavyweight As Component
			Friend ReadOnly lightweightRequests As LinkedList(Of LightweightFocusRequest)

			Friend Shared ReadOnly CLEAR_GLOBAL_FOCUS_OWNER As New HeavyweightFocusRequest

			Private Sub New()
				heavyweight = Nothing
				lightweightRequests = Nothing
			End Sub

			Friend Sub New(ByVal heavyweight As Component, ByVal descendant As Component, ByVal temporary As Boolean, ByVal cause As sun.awt.CausedFocusEvent.Cause)
				If log.isLoggable(sun.util.logging.PlatformLogger.Level.FINE) Then
					If heavyweight Is Nothing Then log.fine("Assertion (heavyweight != null) failed")
				End If

				Me.heavyweight = heavyweight
				Me.lightweightRequests = New LinkedList(Of LightweightFocusRequest)
				addLightweightRequest(descendant, temporary, cause)
			End Sub
			Friend Function addLightweightRequest(ByVal descendant As Component, ByVal temporary As Boolean, ByVal cause As sun.awt.CausedFocusEvent.Cause) As Boolean
				If log.isLoggable(sun.util.logging.PlatformLogger.Level.FINE) Then
					If Me Is HeavyweightFocusRequest.CLEAR_GLOBAL_FOCUS_OWNER Then log.fine("Assertion (this != HeavyweightFocusRequest.CLEAR_GLOBAL_FOCUS_OWNER) failed")
					If descendant Is Nothing Then log.fine("Assertion (descendant != null) failed")
				End If

				Dim lastDescendant As Component = (If(lightweightRequests.Count > 0, lightweightRequests.Last.Value.component, Nothing))

				If descendant IsNot lastDescendant Then
					' Not a duplicate request
					lightweightRequests.AddLast(New LightweightFocusRequest(descendant, temporary, cause))
					Return True
				Else
					Return False
				End If
			End Function

			Friend Property firstLightweightRequest As LightweightFocusRequest
				Get
					If Me Is CLEAR_GLOBAL_FOCUS_OWNER Then Return Nothing
					Return lightweightRequests.First.Value
				End Get
			End Property
			Public Overrides Function ToString() As String
				Dim first As Boolean = True
				Dim str As String = "HeavyweightFocusRequest[heavweight=" & heavyweight & ",lightweightRequests="
				If lightweightRequests Is Nothing Then
					str += Nothing
				Else
					str &= "["

					For Each lwRequest As LightweightFocusRequest In lightweightRequests
						If first Then
							first = False
						Else
							str &= ","
						End If
						str += lwRequest
					Next lwRequest
					str &= "]"
				End If
				str &= "]"
				Return str
			End Function
		End Class

	'    
	'     * heavyweightRequests is used as a monitor for synchronized changes of
	'     * currentLightweightRequests, clearingCurrentLightweightRequests and
	'     * newFocusOwner.
	'     
		Private Shared heavyweightRequests As New LinkedList(Of HeavyweightFocusRequest)
		Private Shared currentLightweightRequests As LinkedList(Of LightweightFocusRequest)
		Private Shared clearingCurrentLightweightRequests As Boolean
		Private Shared allowSyncFocusRequests As Boolean = True
		Private Shared newFocusOwner As Component = Nothing
'JAVA TO VB CONVERTER TODO TASK: There is no VB equivalent to 'volatile':
		Private Shared disableRestoreFocus As Boolean

		Friend Const SNFH_FAILURE As Integer = 0
		Friend Const SNFH_SUCCESS_HANDLED As Integer = 1
		Friend Const SNFH_SUCCESS_PROCEED As Integer = 2

		Friend Shared Function processSynchronousLightweightTransfer(ByVal heavyweight As Component, ByVal descendant As Component, ByVal temporary As Boolean, ByVal focusedWindowChangeAllowed As Boolean, ByVal time As Long) As Boolean
			Dim parentWindow As Window = sun.awt.SunToolkit.getContainingWindow(heavyweight)
			If parentWindow Is Nothing OrElse (Not parentWindow.syncLWRequests) Then Return False
			If descendant Is Nothing Then descendant = heavyweight

			Dim manager As KeyboardFocusManager = getCurrentKeyboardFocusManager(sun.awt.SunToolkit.targetToAppContext(descendant))

			Dim currentFocusOwnerEvent As java.awt.event.FocusEvent = Nothing
			Dim newFocusOwnerEvent As java.awt.event.FocusEvent = Nothing
			Dim currentFocusOwner As Component = manager.globalFocusOwner

			SyncLock heavyweightRequests
				Dim hwFocusRequest As HeavyweightFocusRequest = lastHWRequest
				If hwFocusRequest Is Nothing AndAlso heavyweight Is manager.nativeFocusOwner AndAlso allowSyncFocusRequests Then

					If descendant Is currentFocusOwner Then Return True

					' 'heavyweight' owns the native focus and there are no pending
					' requests. 'heavyweight' must be a Container and
					' 'descendant' must not be the focus owner. Otherwise,
					' we would never have gotten this far.
					manager.enqueueKeyEvents(time, descendant)

					hwFocusRequest = New HeavyweightFocusRequest(heavyweight, descendant, temporary, sun.awt.CausedFocusEvent.Cause.UNKNOWN)
					heavyweightRequests.AddLast(hwFocusRequest)

					If currentFocusOwner IsNot Nothing Then currentFocusOwnerEvent = New java.awt.event.FocusEvent(currentFocusOwner, java.awt.event.FocusEvent.FOCUS_LOST, temporary, descendant)
					newFocusOwnerEvent = New java.awt.event.FocusEvent(descendant, java.awt.event.FocusEvent.FOCUS_GAINED, temporary, currentFocusOwner)
				End If
			End SyncLock
			Dim result As Boolean = False
			Dim clearing As Boolean = clearingCurrentLightweightRequests

			Dim caughtEx As Throwable = Nothing
			Try
				clearingCurrentLightweightRequests = False
				SyncLock Component.LOCK

					If currentFocusOwnerEvent IsNot Nothing AndAlso currentFocusOwner IsNot Nothing Then
						CType(currentFocusOwnerEvent, AWTEvent).isPosted = True
						caughtEx = dispatchAndCatchException(caughtEx, currentFocusOwner, currentFocusOwnerEvent)
						result = True
					End If

					If newFocusOwnerEvent IsNot Nothing AndAlso descendant IsNot Nothing Then
						CType(newFocusOwnerEvent, AWTEvent).isPosted = True
						caughtEx = dispatchAndCatchException(caughtEx, descendant, newFocusOwnerEvent)
						result = True
					End If
				End SyncLock
			Finally
				clearingCurrentLightweightRequests = clearing
			End Try
			If TypeOf caughtEx Is RuntimeException Then
				Throw CType(caughtEx, RuntimeException)
			ElseIf TypeOf caughtEx Is Error Then
				Throw CType(caughtEx, [Error])
			End If
			Return result
		End Function

		''' <summary>
		''' Indicates whether the native implementation should proceed with a
		''' pending, native focus request. Before changing the focus at the native
		''' level, the AWT implementation should always call this function for
		''' permission. This function will reject the request if a duplicate request
		''' preceded it, or if the specified heavyweight Component already owns the
		''' focus and no native focus changes are pending. Otherwise, the request
		''' will be approved and the focus request list will be updated so that,
		''' if necessary, the proper descendant will be focused when the
		''' corresponding FOCUS_GAINED event on the heavyweight is received.
		''' 
		''' An implementation must ensure that calls to this method and native
		''' focus changes are atomic. If this is not guaranteed, then the ordering
		''' of the focus request list may be incorrect, leading to errors in the
		''' type-ahead mechanism. Typically this is accomplished by only calling
		''' this function from the native event pumping thread, or by holding a
		''' global, native lock during invocation.
		''' </summary>
		Friend Shared Function shouldNativelyFocusHeavyweight(ByVal heavyweight As Component, ByVal descendant As Component, ByVal temporary As Boolean, ByVal focusedWindowChangeAllowed As Boolean, ByVal time As Long, ByVal cause As sun.awt.CausedFocusEvent.Cause) As Integer
			If log.isLoggable(sun.util.logging.PlatformLogger.Level.FINE) Then
				If heavyweight Is Nothing Then log.fine("Assertion (heavyweight != null) failed")
				If time = 0 Then log.fine("Assertion (time != 0) failed")
			End If

			If descendant Is Nothing Then descendant = heavyweight

			Dim manager As KeyboardFocusManager = getCurrentKeyboardFocusManager(sun.awt.SunToolkit.targetToAppContext(descendant))
			Dim thisManager As KeyboardFocusManager = currentKeyboardFocusManager
			Dim currentFocusOwner As Component = thisManager.globalFocusOwner
			Dim nativeFocusOwner_Renamed As Component = thisManager.nativeFocusOwner
			Dim nativeFocusedWindow_Renamed As Window = thisManager.nativeFocusedWindow
			If focusLog.isLoggable(sun.util.logging.PlatformLogger.Level.FINER) Then focusLog.finer("SNFH for {0} in {1}", Convert.ToString(descendant), Convert.ToString(heavyweight))
			If focusLog.isLoggable(sun.util.logging.PlatformLogger.Level.FINEST) Then
				focusLog.finest("0. Current focus owner {0}", Convert.ToString(currentFocusOwner))
				focusLog.finest("0. Native focus owner {0}", Convert.ToString(nativeFocusOwner_Renamed))
				focusLog.finest("0. Native focused window {0}", Convert.ToString(nativeFocusedWindow_Renamed))
			End If
			SyncLock heavyweightRequests
				Dim hwFocusRequest As HeavyweightFocusRequest = lastHWRequest
				If focusLog.isLoggable(sun.util.logging.PlatformLogger.Level.FINEST) Then focusLog.finest("Request {0}", Convert.ToString(hwFocusRequest))
				If hwFocusRequest Is Nothing AndAlso heavyweight Is nativeFocusOwner_Renamed AndAlso heavyweight.containingWindow Is nativeFocusedWindow_Renamed Then
					If descendant Is currentFocusOwner Then
						' Redundant request.
						If focusLog.isLoggable(sun.util.logging.PlatformLogger.Level.FINEST) Then focusLog.finest("1. SNFH_FAILURE for {0}", Convert.ToString(descendant))
						Return SNFH_FAILURE
					End If

					' 'heavyweight' owns the native focus and there are no pending
					' requests. 'heavyweight' must be a Container and
					' 'descendant' must not be the focus owner. Otherwise,
					' we would never have gotten this far.
					manager.enqueueKeyEvents(time, descendant)

					hwFocusRequest = New HeavyweightFocusRequest(heavyweight, descendant, temporary, cause)
					heavyweightRequests.AddLast(hwFocusRequest)

					If currentFocusOwner IsNot Nothing Then
						Dim currentFocusOwnerEvent As java.awt.event.FocusEvent = New sun.awt.CausedFocusEvent(currentFocusOwner, java.awt.event.FocusEvent.FOCUS_LOST, temporary, descendant, cause)
						' Fix 5028014. Rolled out.
						' SunToolkit.postPriorityEvent(currentFocusOwnerEvent);
						sun.awt.SunToolkit.postEvent(currentFocusOwner.appContext, currentFocusOwnerEvent)
					End If
					Dim newFocusOwnerEvent As java.awt.event.FocusEvent = New sun.awt.CausedFocusEvent(descendant, java.awt.event.FocusEvent.FOCUS_GAINED, temporary, currentFocusOwner, cause)
					' Fix 5028014. Rolled out.
					' SunToolkit.postPriorityEvent(newFocusOwnerEvent);
					sun.awt.SunToolkit.postEvent(descendant.appContext, newFocusOwnerEvent)

					If focusLog.isLoggable(sun.util.logging.PlatformLogger.Level.FINEST) Then focusLog.finest("2. SNFH_HANDLED for {0}", Convert.ToString(descendant))
					Return SNFH_SUCCESS_HANDLED
				ElseIf hwFocusRequest IsNot Nothing AndAlso hwFocusRequest.heavyweight Is heavyweight Then
					' 'heavyweight' doesn't have the native focus right now, but
					' if all pending requests were completed, it would. Add
					' descendant to the heavyweight's list of pending
					' lightweight focus transfers.
					If hwFocusRequest.addLightweightRequest(descendant, temporary, cause) Then manager.enqueueKeyEvents(time, descendant)

					If focusLog.isLoggable(sun.util.logging.PlatformLogger.Level.FINEST) Then focusLog.finest("3. SNFH_HANDLED for lightweight" & descendant & " in " & heavyweight)
					Return SNFH_SUCCESS_HANDLED
				Else
					If Not focusedWindowChangeAllowed Then
						' For purposes of computing oldFocusedWindow, we should look at
						' the second to last HeavyweightFocusRequest on the queue iff the
						' last HeavyweightFocusRequest is CLEAR_GLOBAL_FOCUS_OWNER. If
						' there is no second to last HeavyweightFocusRequest, null is an
						' acceptable value.
						If hwFocusRequest Is HeavyweightFocusRequest.CLEAR_GLOBAL_FOCUS_OWNER Then
							Dim size As Integer = heavyweightRequests.Count
							hwFocusRequest = CType(If(size >= 2, heavyweightRequests.get(size - 2), Nothing), HeavyweightFocusRequest)
						End If
						If focusedWindowChanged(heavyweight,If(hwFocusRequest IsNot Nothing, hwFocusRequest.heavyweight, nativeFocusedWindow_Renamed)) Then
							If focusLog.isLoggable(sun.util.logging.PlatformLogger.Level.FINEST) Then focusLog.finest("4. SNFH_FAILURE for " & descendant)
							Return SNFH_FAILURE
						End If
					End If

					manager.enqueueKeyEvents(time, descendant)
					heavyweightRequests.AddLast(New HeavyweightFocusRequest(heavyweight, descendant, temporary, cause))
					If focusLog.isLoggable(sun.util.logging.PlatformLogger.Level.FINEST) Then focusLog.finest("5. SNFH_PROCEED for " & descendant)
					Return SNFH_SUCCESS_PROCEED
				End If
			End SyncLock
		End Function

		''' <summary>
		''' Returns the Window which will be active after processing this request,
		''' or null if this is a duplicate request. The active Window is useful
		''' because some native platforms do not support setting the native focus
		''' owner to null. On these platforms, the obvious choice is to set the
		''' focus owner to the focus proxy of the active Window.
		''' </summary>
		Friend Shared Function markClearGlobalFocusOwner() As Window
			' need to call this out of synchronized block to avoid possible deadlock
			' see 6454631.
			Dim nativeFocusedWindow_Renamed As Component = currentKeyboardFocusManager.nativeFocusedWindow

			SyncLock heavyweightRequests
				Dim hwFocusRequest As HeavyweightFocusRequest = lastHWRequest
				If hwFocusRequest Is HeavyweightFocusRequest.CLEAR_GLOBAL_FOCUS_OWNER Then Return Nothing

				heavyweightRequests.AddLast(HeavyweightFocusRequest.CLEAR_GLOBAL_FOCUS_OWNER)

				Dim activeWindow_Renamed As Component = (If(hwFocusRequest IsNot Nothing, sun.awt.SunToolkit.getContainingWindow(hwFocusRequest.heavyweight), nativeFocusedWindow_Renamed))
				Do While activeWindow_Renamed IsNot Nothing AndAlso Not((TypeOf activeWindow_Renamed Is Frame) OrElse (TypeOf activeWindow_Renamed Is Dialog))
					activeWindow_Renamed = activeWindow_Renamed.parent_NoClientCode
				Loop

				Return CType(activeWindow_Renamed, Window)
			End SyncLock
		End Function
		Friend Overridable Function getCurrentWaitingRequest(ByVal parent As Component) As Component
			SyncLock heavyweightRequests
				Dim hwFocusRequest As HeavyweightFocusRequest = firstHWRequest
				If hwFocusRequest IsNot Nothing Then
					If hwFocusRequest.heavyweight Is parent Then
						Dim lwFocusRequest As LightweightFocusRequest = hwFocusRequest.lightweightRequests.First.Value
						If lwFocusRequest IsNot Nothing Then Return lwFocusRequest.component_Renamed
					End If
				End If
			End SyncLock
			Return Nothing
		End Function

		Friend Property Shared autoFocusTransferEnabled As Boolean
			Get
				SyncLock heavyweightRequests
					Return (heavyweightRequests.Count = 0) AndAlso (Not disableRestoreFocus) AndAlso (Nothing Is currentLightweightRequests)
				End SyncLock
			End Get
		End Property

		Friend Shared Function isAutoFocusTransferEnabledFor(ByVal comp As Component) As Boolean
			Return autoFocusTransferEnabled AndAlso comp.autoFocusTransferOnDisposal
		End Function

	'    
	'     * Used to process exceptions in dispatching focus event (in focusLost/focusGained callbacks).
	'     * @param ex previously caught exception that may be processed right here, or null
	'     * @param comp the component to dispatch the event to
	'     * @param event the event to dispatch to the component
	'     
		Private Shared Function dispatchAndCatchException(ByVal ex As Throwable, ByVal comp As Component, ByVal [event] As java.awt.event.FocusEvent) As Throwable
			Dim retEx As Throwable = Nothing
			Try
				comp.dispatchEvent(event_Renamed)
			Catch re As RuntimeException
				retEx = re
			Catch er As [Error]
				retEx = er
			End Try
			If retEx IsNot Nothing Then
				If ex IsNot Nothing Then handleException(ex)
				Return retEx
			End If
			Return ex
		End Function

		Private Shared Sub handleException(ByVal ex As Throwable)
			ex.printStackTrace()
		End Sub

		Friend Shared Sub processCurrentLightweightRequests()
			Dim manager As KeyboardFocusManager = currentKeyboardFocusManager
			Dim localLightweightRequests As LinkedList(Of LightweightFocusRequest) = Nothing

			Dim globalFocusOwner_Renamed As Component = manager.globalFocusOwner
			If (globalFocusOwner_Renamed IsNot Nothing) AndAlso (globalFocusOwner_Renamed.appContext IsNot sun.awt.AppContext.appContext) Then Return

			SyncLock heavyweightRequests
				If currentLightweightRequests IsNot Nothing Then
					clearingCurrentLightweightRequests = True
					disableRestoreFocus = True
					localLightweightRequests = currentLightweightRequests
					allowSyncFocusRequests = (localLightweightRequests.Count < 2)
					currentLightweightRequests = Nothing
				Else
					' do nothing
					Return
				End If
			End SyncLock

			Dim caughtEx As Throwable = Nothing
			Try
				If localLightweightRequests IsNot Nothing Then
					Dim lastFocusOwner As Component = Nothing
					Dim currentFocusOwner As Component = Nothing

					Dim iter As IEnumerator(Of KeyboardFocusManager.LightweightFocusRequest) = localLightweightRequests.GetEnumerator()
					Do While iter.MoveNext()

						currentFocusOwner = manager.globalFocusOwner
						Dim lwFocusRequest As LightweightFocusRequest = iter.Current

	'                    
	'                     * WARNING: This is based on DKFM's logic solely!
	'                     *
	'                     * We allow to trigger restoreFocus() in the dispatching process
	'                     * only if we have the last request to dispatch. If the last request
	'                     * fails, focus will be restored to either the component of the last
	'                     * previously succedded request, or to to the focus owner that was
	'                     * before this clearing process.
	'                     
'JAVA TO VB CONVERTER TODO TASK: Java iterators are only converted within the context of 'while' and 'for' loops:
						If Not iter.hasNext() Then disableRestoreFocus = False

						Dim currentFocusOwnerEvent As java.awt.event.FocusEvent = Nothing
	'                    
	'                     * We're not dispatching FOCUS_LOST while the current focus owner is null.
	'                     * But regardless of whether it's null or not, we're clearing ALL the local
	'                     * lw requests.
	'                     
						If currentFocusOwner IsNot Nothing Then currentFocusOwnerEvent = New sun.awt.CausedFocusEvent(currentFocusOwner, java.awt.event.FocusEvent.FOCUS_LOST, lwFocusRequest.temporary, lwFocusRequest.component_Renamed, lwFocusRequest.cause)
						Dim newFocusOwnerEvent As java.awt.event.FocusEvent = New sun.awt.CausedFocusEvent(lwFocusRequest.component_Renamed, java.awt.event.FocusEvent.FOCUS_GAINED, lwFocusRequest.temporary,If(currentFocusOwner Is Nothing, lastFocusOwner, currentFocusOwner), lwFocusRequest.cause)

						If currentFocusOwner IsNot Nothing Then
							CType(currentFocusOwnerEvent, AWTEvent).isPosted = True
							caughtEx = dispatchAndCatchException(caughtEx, currentFocusOwner, currentFocusOwnerEvent)
						End If

						CType(newFocusOwnerEvent, AWTEvent).isPosted = True
						caughtEx = dispatchAndCatchException(caughtEx, lwFocusRequest.component_Renamed, newFocusOwnerEvent)

						If manager.globalFocusOwner Is lwFocusRequest.component_Renamed Then lastFocusOwner = lwFocusRequest.component_Renamed
					Loop
				End If
			Finally
				clearingCurrentLightweightRequests = False
				disableRestoreFocus = False
				localLightweightRequests = Nothing
				allowSyncFocusRequests = True
			End Try
			If TypeOf caughtEx Is RuntimeException Then
				Throw CType(caughtEx, RuntimeException)
			ElseIf TypeOf caughtEx Is Error Then
				Throw CType(caughtEx, [Error])
			End If
		End Sub

		Friend Shared Function retargetUnexpectedFocusEvent(ByVal fe As java.awt.event.FocusEvent) As java.awt.event.FocusEvent
			SyncLock heavyweightRequests
				' Any other case represents a failure condition which we did
				' not expect. We need to clearFocusRequestList() and patch up
				' the event as best as possible.

				If removeFirstRequest() Then Return CType(retargetFocusEvent(fe), java.awt.event.FocusEvent)

				Dim source As Component = fe.component
				Dim opposite As Component = fe.oppositeComponent
				Dim temporary_Renamed As Boolean = False
				If fe.iD = java.awt.event.FocusEvent.FOCUS_LOST AndAlso (opposite Is Nothing OrElse isTemporary(opposite, source)) Then temporary_Renamed = True
				Return New sun.awt.CausedFocusEvent(source, fe.iD, temporary_Renamed, opposite, sun.awt.CausedFocusEvent.Cause.NATIVE_SYSTEM)
			End SyncLock
		End Function

		Friend Shared Function retargetFocusGained(ByVal fe As java.awt.event.FocusEvent) As java.awt.event.FocusEvent
			assert(fe.iD = java.awt.event.FocusEvent.FOCUS_GAINED)

			Dim currentFocusOwner As Component = currentKeyboardFocusManager.globalFocusOwner
			Dim source As Component = fe.component
			Dim opposite As Component = fe.oppositeComponent
			Dim nativeSource As Component = getHeavyweight(source)

			SyncLock heavyweightRequests
				Dim hwFocusRequest As HeavyweightFocusRequest = firstHWRequest

				If hwFocusRequest Is HeavyweightFocusRequest.CLEAR_GLOBAL_FOCUS_OWNER Then Return retargetUnexpectedFocusEvent(fe)

				If source IsNot Nothing AndAlso nativeSource Is Nothing AndAlso hwFocusRequest IsNot Nothing Then
					' if source w/o peer and
					' if source is equal to first lightweight
					' then we should correct source and nativeSource
					If source Is hwFocusRequest.firstLightweightRequest.component_Renamed Then
						source = hwFocusRequest.heavyweight
						nativeSource = source ' source is heavuweight itself
					End If
				End If
				If hwFocusRequest IsNot Nothing AndAlso nativeSource Is hwFocusRequest.heavyweight Then
					' Focus change as a result of a known call to requestFocus(),
					' or known click on a peer focusable heavyweight Component.

					heavyweightRequests.RemoveFirst()

					Dim lwFocusRequest As LightweightFocusRequest = hwFocusRequest.lightweightRequests.RemoveFirst()

					Dim newSource As Component = lwFocusRequest.component_Renamed
					If currentFocusOwner IsNot Nothing Then newFocusOwner = newSource

					Dim temporary_Renamed As Boolean = If(opposite Is Nothing OrElse isTemporary(newSource, opposite), False, lwFocusRequest.temporary)

					If hwFocusRequest.lightweightRequests.Count > 0 Then
						currentLightweightRequests = hwFocusRequest.lightweightRequests
						EventQueue.invokeLater(New RunnableAnonymousInnerClassHelper
					End If

					' 'opposite' will be fixed by
					' DefaultKeyboardFocusManager.realOppositeComponent
					Return New sun.awt.CausedFocusEvent(newSource, java.awt.event.FocusEvent.FOCUS_GAINED, temporary_Renamed, opposite, lwFocusRequest.cause)
				End If

				If currentFocusOwner IsNot Nothing AndAlso currentFocusOwner.containingWindow Is source AndAlso (hwFocusRequest Is Nothing OrElse source IsNot hwFocusRequest.heavyweight) Then Return New sun.awt.CausedFocusEvent(currentFocusOwner, java.awt.event.FocusEvent.FOCUS_GAINED, False, Nothing, sun.awt.CausedFocusEvent.Cause.ACTIVATION)

				Return retargetUnexpectedFocusEvent(fe)
			End SyncLock ' end synchronized(heavyweightRequests)
		End Function

		Private Class RunnableAnonymousInnerClassHelper
			Implements Runnable

			Public Overridable Sub run() Implements Runnable.run
				processCurrentLightweightRequests()
			End Sub
		End Class

		Friend Shared Function retargetFocusLost(ByVal fe As java.awt.event.FocusEvent) As java.awt.event.FocusEvent
			assert(fe.iD = java.awt.event.FocusEvent.FOCUS_LOST)

			Dim currentFocusOwner As Component = currentKeyboardFocusManager.globalFocusOwner
			Dim opposite As Component = fe.oppositeComponent
			Dim nativeOpposite As Component = getHeavyweight(opposite)

			SyncLock heavyweightRequests
				Dim hwFocusRequest As HeavyweightFocusRequest = firstHWRequest

				If hwFocusRequest Is HeavyweightFocusRequest.CLEAR_GLOBAL_FOCUS_OWNER Then
					If currentFocusOwner IsNot Nothing Then
						' Call to KeyboardFocusManager.clearGlobalFocusOwner()
						heavyweightRequests.RemoveFirst()
						Return New sun.awt.CausedFocusEvent(currentFocusOwner, java.awt.event.FocusEvent.FOCUS_LOST, False, Nothing, sun.awt.CausedFocusEvent.Cause.CLEAR_GLOBAL_FOCUS_OWNER)
					End If

					' Otherwise, fall through to failure case below

				ElseIf opposite Is Nothing Then
					' Focus leaving application
					If currentFocusOwner IsNot Nothing Then
						Return New sun.awt.CausedFocusEvent(currentFocusOwner, java.awt.event.FocusEvent.FOCUS_LOST, True, Nothing, sun.awt.CausedFocusEvent.Cause.ACTIVATION)
					Else
						Return fe
					End If
				ElseIf hwFocusRequest IsNot Nothing AndAlso (nativeOpposite Is hwFocusRequest.heavyweight OrElse nativeOpposite Is Nothing AndAlso opposite Is hwFocusRequest.firstLightweightRequest.component_Renamed) Then
					If currentFocusOwner Is Nothing Then Return fe
					' Focus change as a result of a known call to requestFocus(),
					' or click on a peer focusable heavyweight Component.
					' If a focus transfer is made across top-levels, then the
					' FOCUS_LOST event is always temporary, and the FOCUS_GAINED
					' event is always permanent. Otherwise, the stored temporary
					' value is honored.

					Dim lwFocusRequest As LightweightFocusRequest = hwFocusRequest.lightweightRequests.First.Value

					Dim temporary_Renamed As Boolean = If(isTemporary(opposite, currentFocusOwner), True, lwFocusRequest.temporary)

					Return New sun.awt.CausedFocusEvent(currentFocusOwner, java.awt.event.FocusEvent.FOCUS_LOST, temporary_Renamed, lwFocusRequest.component_Renamed, lwFocusRequest.cause)
				ElseIf focusedWindowChanged(opposite, currentFocusOwner) Then
					' If top-level changed there might be no focus request in a list
					' But we know the opposite, we now it is temporary - dispatch the event.
					If (Not fe.temporary) AndAlso currentFocusOwner IsNot Nothing Then fe = New sun.awt.CausedFocusEvent(currentFocusOwner, java.awt.event.FocusEvent.FOCUS_LOST, True, opposite, sun.awt.CausedFocusEvent.Cause.ACTIVATION)
					Return fe
				End If

				Return retargetUnexpectedFocusEvent(fe)
			End SyncLock ' end synchronized(heavyweightRequests)
		End Function

		Friend Shared Function retargetFocusEvent(ByVal [event] As AWTEvent) As AWTEvent
			If clearingCurrentLightweightRequests Then Return event_Renamed

			Dim manager As KeyboardFocusManager = currentKeyboardFocusManager
			If focusLog.isLoggable(sun.util.logging.PlatformLogger.Level.FINER) Then
				If TypeOf event_Renamed Is java.awt.event.FocusEvent OrElse TypeOf event_Renamed Is java.awt.event.WindowEvent Then focusLog.finer(">>> {0}", Convert.ToString(event_Renamed))
				If focusLog.isLoggable(sun.util.logging.PlatformLogger.Level.FINER) AndAlso TypeOf event_Renamed Is java.awt.event.KeyEvent Then
					focusLog.finer("    focus owner is {0}", Convert.ToString(manager.globalFocusOwner))
					focusLog.finer(">>> {0}", Convert.ToString(event_Renamed))
				End If
			End If

			SyncLock heavyweightRequests
	'            
	'             * This code handles FOCUS_LOST event which is generated by
	'             * DefaultKeyboardFocusManager for FOCUS_GAINED.
	'             *
	'             * This code based on knowledge of DefaultKeyboardFocusManager's
	'             * implementation and might be not applicable for another
	'             * KeyboardFocusManager.
	'             *
	'             * Fix for 4472032
	'             
				If newFocusOwner IsNot Nothing AndAlso event_Renamed.iD = java.awt.event.FocusEvent.FOCUS_LOST Then
					Dim fe As java.awt.event.FocusEvent = CType(event_Renamed, java.awt.event.FocusEvent)

					If manager.globalFocusOwner Is fe.component AndAlso fe.oppositeComponent Is newFocusOwner Then
						newFocusOwner = Nothing
						Return event_Renamed
					End If
				End If
			End SyncLock

			processCurrentLightweightRequests()

			Select Case event_Renamed.iD
				Case java.awt.event.FocusEvent.FOCUS_GAINED
					event_Renamed = retargetFocusGained(CType(event_Renamed, java.awt.event.FocusEvent))
					Exit Select
				Case java.awt.event.FocusEvent.FOCUS_LOST
					event_Renamed = retargetFocusLost(CType(event_Renamed, java.awt.event.FocusEvent))
					Exit Select
				Case Else
					' do nothing 
			End Select
			Return event_Renamed
		End Function

		''' <summary>
		''' Clears markers queue
		''' This method is not intended to be overridden by KFM's.
		''' Only DefaultKeyboardFocusManager can implement it.
		''' @since 1.5
		''' </summary>
		Friend Overridable Sub clearMarkers()
		End Sub

		Friend Shared Function removeFirstRequest() As Boolean
			Dim manager As KeyboardFocusManager = KeyboardFocusManager.currentKeyboardFocusManager

			SyncLock heavyweightRequests
				Dim hwFocusRequest As HeavyweightFocusRequest = firstHWRequest

				If hwFocusRequest IsNot Nothing Then
					heavyweightRequests.RemoveFirst()
					If hwFocusRequest.lightweightRequests IsNot Nothing Then
						Dim lwIter As IEnumerator(Of KeyboardFocusManager.LightweightFocusRequest) = hwFocusRequest.lightweightRequests.GetEnumerator()
						Do While lwIter.MoveNext()
							manager.dequeueKeyEvents(-1, lwIter.Current.component)
						Loop
					End If
				End If
				' Fix for 4799136 - clear type-ahead markers if requests queue is empty
				' We do it here because this method is called only when problems happen
				If heavyweightRequests.Count = 0 Then manager.clearMarkers()
				Return (heavyweightRequests.Count > 0)
			End SyncLock
		End Function
		Friend Shared Sub removeLastFocusRequest(ByVal heavyweight As Component)
			If log.isLoggable(sun.util.logging.PlatformLogger.Level.FINE) Then
				If heavyweight Is Nothing Then log.fine("Assertion (heavyweight != null) failed")
			End If

			Dim manager As KeyboardFocusManager = KeyboardFocusManager.currentKeyboardFocusManager
			SyncLock heavyweightRequests
				Dim hwFocusRequest As HeavyweightFocusRequest = lastHWRequest
				If hwFocusRequest IsNot Nothing AndAlso hwFocusRequest.heavyweight Is heavyweight Then heavyweightRequests.RemoveLast()
				' Fix for 4799136 - clear type-ahead markers if requests queue is empty
				' We do it here because this method is called only when problems happen
				If heavyweightRequests.Count = 0 Then manager.clearMarkers()
			End SyncLock
		End Sub

		Private Shared Function focusedWindowChanged(ByVal [to] As Component, ByVal [from] As Component) As Boolean
			Dim wto As Window = sun.awt.SunToolkit.getContainingWindow([to])
			Dim wfrom As Window = sun.awt.SunToolkit.getContainingWindow([from])
			If wto Is Nothing AndAlso wfrom Is Nothing Then Return True
			If wto Is Nothing Then Return True
			If wfrom Is Nothing Then Return True
			Return (wto IsNot wfrom)
		End Function

		Private Shared Function isTemporary(ByVal [to] As Component, ByVal [from] As Component) As Boolean
			Dim wto As Window = sun.awt.SunToolkit.getContainingWindow([to])
			Dim wfrom As Window = sun.awt.SunToolkit.getContainingWindow([from])
			If wto Is Nothing AndAlso wfrom Is Nothing Then Return False
			If wto Is Nothing Then Return True
			If wfrom Is Nothing Then Return False
			Return (wto IsNot wfrom)
		End Function

		Friend Shared Function getHeavyweight(ByVal comp As Component) As Component
			If comp Is Nothing OrElse comp.peer Is Nothing Then
				Return Nothing
			ElseIf TypeOf comp.peer Is java.awt.peer.LightweightPeer Then
				Return comp.nativeContainer
			Else
				Return comp
			End If
		End Function

		Friend Shared proxyActive As Field
		' Accessor to private field isProxyActive of KeyEvent
		Private Shared Function isProxyActiveImpl(ByVal e As java.awt.event.KeyEvent) As Boolean
			If proxyActive Is Nothing Then proxyActive = java.security.AccessController.doPrivileged(New PrivilegedActionAnonymousInnerClassHelper(Of T)

			Try
				Return proxyActive.getBoolean(e)
			Catch iae As IllegalAccessException
				assert(False)
			End Try
			Return False
		End Function

		Private Class PrivilegedActionAnonymousInnerClassHelper(Of T)
			Implements java.security.PrivilegedAction(Of T)

			Public Overridable Function run() As Field
				Dim field As Field = Nothing
				Try
					field = GetType(java.awt.event.KeyEvent).getDeclaredField("isProxyActive")
					If field IsNot Nothing Then field.accessible = True
				Catch nsf As NoSuchFieldException
					assert(False)
				End Try
				Return field
			End Function
		End Class

		' Returns the value of this KeyEvent's field isProxyActive
		Friend Shared Function isProxyActive(ByVal e As java.awt.event.KeyEvent) As Boolean
			If Not GraphicsEnvironment.headless Then
				Return isProxyActiveImpl(e)
			Else
				Return False
			End If
		End Function

		Private Property Shared lastHWRequest As HeavyweightFocusRequest
			Get
				SyncLock heavyweightRequests
					Return If(heavyweightRequests.Count > 0, heavyweightRequests.Last.Value, Nothing)
				End SyncLock
			End Get
		End Property

		Private Property Shared firstHWRequest As HeavyweightFocusRequest
			Get
				SyncLock heavyweightRequests
					Return If(heavyweightRequests.Count > 0, heavyweightRequests.First.Value, Nothing)
				End SyncLock
			End Get
		End Property

		Private Shared Sub checkReplaceKFMPermission()
			Dim security As SecurityManager = System.securityManager
			If security IsNot Nothing Then
				If replaceKeyboardFocusManagerPermission Is Nothing Then replaceKeyboardFocusManagerPermission = New AWTPermission("replaceKeyboardFocusManager")
				security.checkPermission(replaceKeyboardFocusManagerPermission)
			End If
		End Sub

		' Checks if this KeyboardFocusManager instance is the current KFM,
		' or otherwise checks if the calling thread has "replaceKeyboardFocusManager"
		' permission. Here's the reasoning to do so:
		'
		' A system KFM instance (which is the current KFM by default) may have no
		' "replaceKFM" permission when a client code is on the call stack beneath,
		' but still it should be able to execute the methods protected by this check
		' due to the system KFM is trusted (and so it does like "privileged").
		'
		' If this KFM instance is not the current KFM but the client code has all
		' permissions we can't throw SecurityException because it would contradict
		' the security concepts. In this case the trusted client code is responsible
		' for calling the secured methods from KFM instance which is not current.
		Private Sub checkKFMSecurity()
			If Me IsNot currentKeyboardFocusManager Then checkReplaceKFMPermission()
		End Sub
	End Class

End Namespace