Imports System.Runtime.CompilerServices
Imports System.Collections.Generic
Imports System.Threading

'
' * Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 

Namespace java.awt


	''' <summary>
	''' A mechanism for ensuring that a series of AWTEvents are executed in a
	''' precise order, even across multiple AppContexts. The nested events will be
	''' dispatched in the order in which their wrapping SequencedEvents were
	''' constructed. The only exception to this rule is if the peer of the target of
	''' the nested event was destroyed (with a call to Component.removeNotify)
	''' before the wrapping SequencedEvent was able to be dispatched. In this case,
	''' the nested event is never dispatched.
	''' 
	''' @author David Mendenhall
	''' </summary>
	Friend Class SequencedEvent
		Inherits AWTEvent
		Implements ActiveEvent

	'    
	'     * serialVersionUID
	'     
		Private Const serialVersionUID As Long = 547742659238625067L

		Private Shared ReadOnly ID As Integer = java.awt.event.FocusEvent.FOCUS_LAST + 1
		Private Shared ReadOnly list_Renamed As New LinkedList(Of SequencedEvent)

		Private ReadOnly nested As AWTEvent
		Private appContext As sun.awt.AppContext
		Private disposed As Boolean

		Shared Sub New()
'JAVA TO VB CONVERTER TODO TASK: Anonymous inner classes are not converted to VB if the base type is not defined in the code being converted:
'			sun.awt.AWTAccessor.setSequencedEventAccessor(New sun.awt.AWTAccessor.SequencedEventAccessor()
	'		{
	'			public AWTEvent getNested(AWTEvent sequencedEvent)
	'			{
	'				Return ((SequencedEvent)sequencedEvent).nested;
	'			}
	'			public boolean isSequencedEvent(AWTEvent event)
	'			{
	'				Return event instanceof SequencedEvent;
	'			}
	'		});
		End Sub

		''' <summary>
		''' Constructs a new SequencedEvent which will dispatch the specified
		''' nested event.
		''' </summary>
		''' <param name="nested"> the AWTEvent which this SequencedEvent's dispatch()
		'''        method will dispatch </param>
		Public Sub New(  nested As AWTEvent)
			MyBase.New(nested.source, ID)
			Me.nested = nested
			' All AWTEvents that are wrapped in SequencedEvents are (at
			' least currently) implicitly generated by the system
			sun.awt.SunToolkit.systemGenerated = nested
			SyncLock GetType(SequencedEvent)
				list_Renamed.AddLast(Me)
			End SyncLock
		End Sub

		''' <summary>
		''' Dispatches the nested event after all previous nested events have been
		''' dispatched or disposed. If this method is invoked before all previous nested events
		''' have been dispatched, then this method blocks until such a point is
		''' reached.
		''' While waiting disposes nested events to disposed AppContext
		''' 
		''' NOTE: Locking protocol.  Since dispose() can get EventQueue lock,
		''' dispatch() shall never call dispose() while holding the lock on the list,
		''' as EventQueue lock is held during dispatching.  The locks should be acquired
		''' in the same order.
		''' </summary>
		Public Sub dispatch() Implements ActiveEvent.dispatch
			Try
				appContext = sun.awt.AppContext.appContext

				If first IsNot Me Then
					If EventQueue.dispatchThread Then
						Dim edt As EventDispatchThread = CType(Thread.CurrentThread, EventDispatchThread)
						edt.pumpEvents(SentEvent.ID, New ConditionalAnonymousInnerClassHelper
					Else
						Do While Not firstOrDisposed
							SyncLock GetType(SequencedEvent)
								Try
									GetType(SequencedEvent).wait(1000)
								Catch e As InterruptedException
									Exit Do
								End Try
							End SyncLock
						Loop
					End If
				End If

				If Not disposed Then
					KeyboardFocusManager.currentKeyboardFocusManager.currentSequencedEvent = Me
					Toolkit.eventQueue.dispatchEvent(nested)
				End If
			Finally
				Dispose()
			End Try
		End Sub

		Private Class ConditionalAnonymousInnerClassHelper
			Implements Conditional

			Public Overridable Function evaluate() As Boolean Implements Conditional.evaluate
				Return Not outerInstance.firstOrDisposed
			End Function
		End Class

		''' <summary>
		''' true only if event exists and nested source appContext is disposed.
		''' </summary>
		Private Shared Function isOwnerAppContextDisposed(  se As SequencedEvent) As Boolean
			If se IsNot Nothing Then
				Dim target As Object = se.nested.source
				If TypeOf target Is Component Then Return CType(target, Component).appContext.disposed
			End If
			Return False
		End Function

		''' <summary>
		''' Sequenced events are dispatched in order, so we cannot dispatch
		''' until we are the first sequenced event in the queue (i.e. it's our
		''' turn).  But while we wait for our turn to dispatch, the event
		''' could have been disposed for a number of reasons.
		''' </summary>
		Public Property firstOrDisposed As Boolean
			Get
				If disposed Then Return True
				' getFirstWithContext can dispose this
				Return Me Is firstWithContext OrElse disposed
			End Get
		End Property

		<MethodImpl(MethodImplOptions.Synchronized)> _
		PrivateShared ReadOnly Propertyfirst As SequencedEvent
			Get
				Return CType(list_Renamed.First.Value, SequencedEvent)
			End Get
		End Property

	'     Disposes all events from disposed AppContext
	'     * return first valid event
	'     
		PrivateShared ReadOnly PropertyfirstWithContext As SequencedEvent
			Get
				Dim first_Renamed As SequencedEvent = first
				Do While isOwnerAppContextDisposed(first_Renamed)
					first_Renamed.Dispose()
					first_Renamed = first
				Loop
				Return first_Renamed
			End Get
		End Property

		''' <summary>
		''' Disposes of this instance. This method is invoked once the nested event
		''' has been dispatched and handled, or when the peer of the target of the
		''' nested event has been disposed with a call to Component.removeNotify.
		''' 
		''' NOTE: Locking protocol.  Since SunToolkit.postEvent can get EventQueue lock,
		''' it shall never be called while holding the lock on the list,
		''' as EventQueue lock is held during dispatching and dispatch() will get
		''' lock on the list. The locks should be acquired in the same order.
		''' </summary>
		Friend Sub dispose()
		  SyncLock GetType(SequencedEvent)
				If disposed Then Return
				If KeyboardFocusManager.currentKeyboardFocusManager.currentSequencedEvent Is Me Then KeyboardFocusManager.currentKeyboardFocusManager.currentSequencedEvent = Nothing
				disposed = True
		  End SyncLock
			' Wake myself up
			If appContext IsNot Nothing Then sun.awt.SunToolkit.postEvent(appContext, New SentEvent)

			Dim [next] As SequencedEvent = Nothing

			SyncLock GetType(SequencedEvent)
			  GetType(SequencedEvent).notifyAll()

			  If list_Renamed.First.Value Is Me Then
				  list_Renamed.RemoveFirst()

				  If list_Renamed.Count > 0 Then [next] = CType(list_Renamed.First.Value, SequencedEvent)
			  Else
'JAVA TO VB CONVERTER TODO TASK: There is no .NET LinkedList equivalent to the Java 'remove' method:
				  list_Renamed.remove(Me)
			  End If
			End SyncLock
			' Wake up waiting threads
			If [next] IsNot Nothing AndAlso [next].appContext IsNot Nothing Then sun.awt.SunToolkit.postEvent([next].appContext, New SentEvent)
		End Sub
	End Class

End Namespace