Imports System

'
' * Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 
Namespace java.rmi.server


	''' <summary>
	''' Used for exporting a remote object with JRMP and obtaining a stub
	''' that communicates to the remote object. Stubs are either generated
	''' at runtime using dynamic proxy objects, or they are generated statically
	''' at build time, typically using the {@code rmic} tool.
	''' 
	''' <p><strong>Deprecated: Static Stubs.</strong> <em>Support for statically
	''' generated stubs is deprecated. This includes the API in this class that
	''' requires the use of static stubs, as well as the runtime support for
	''' loading static stubs.  Generating stubs dynamically is preferred, using one
	''' of the five non-deprecated ways of exporting objects as listed below. Do
	''' not run {@code rmic} to generate static stub classes. It is unnecessary, and
	''' it is also deprecated.</em>
	''' 
	''' <p>There are six ways to export remote objects:
	''' 
	''' <ol>
	''' 
	''' <li>Subclassing {@code UnicastRemoteObject} and calling the
	''' <seealso cref="#UnicastRemoteObject()"/> constructor.
	''' 
	''' <li>Subclassing {@code UnicastRemoteObject} and calling the
	''' <seealso cref="#UnicastRemoteObject(int) UnicastRemoteObject(port)"/> constructor.
	''' 
	''' <li>Subclassing {@code UnicastRemoteObject} and calling the
	''' {@link #UnicastRemoteObject(int, RMIClientSocketFactory, RMIServerSocketFactory)
	''' UnicastRemoteObject(port, csf, ssf)} constructor.
	''' 
	''' <li>Calling the
	''' <seealso cref="#exportObject(Remote) exportObject(Remote)"/> method.
	''' <strong>Deprecated.</strong>
	''' 
	''' <li>Calling the
	''' <seealso cref="#exportObject(Remote, int) exportObject(Remote, port)"/> method.
	''' 
	''' <li>Calling the
	''' {@link #exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory)
	''' exportObject(Remote, port, csf, ssf)} method.
	''' 
	''' </ol>
	''' 
	''' <p>The fourth technique, <seealso cref="#exportObject(Remote)"/>,
	''' always uses statically generated stubs and is deprecated.
	''' 
	''' <p>The other five techniques all use the following approach: if the
	''' {@code java.rmi.server.ignoreStubClasses} property is {@code true}
	''' (case insensitive) or if a static stub cannot be found, stubs are generated
	''' dynamically using <seealso cref="java.lang.reflect.Proxy Proxy"/> objects. Otherwise,
	''' static stubs are used.
	''' 
	''' <p>The default value of the
	''' {@code java.rmi.server.ignoreStubClasses} property is {@code false}.
	''' 
	''' <p>Statically generated stubs are typically pregenerated from the
	''' remote object's class using the {@code rmic} tool. A static stub is
	''' loaded and an instance of that stub class is constructed as described
	''' below.
	''' 
	''' <ul>
	''' 
	''' <li>A "root class" is determined as follows: if the remote object's
	''' class directly implements an interface that extends <seealso cref="Remote"/>, then
	''' the remote object's class is the root class; otherwise, the root class is
	''' the most derived superclass of the remote object's class that directly
	''' implements an interface that extends {@code Remote}.
	''' 
	''' <li>The name of the stub class to load is determined by concatenating
	''' the binary name of the root class with the suffix {@code _Stub}.
	''' 
	''' <li>The stub class is loaded by name using the class loader of the root
	''' class. The stub class must extend <seealso cref="RemoteStub"/> and must have a
	''' public constructor that has one parameter of type <seealso cref="RemoteRef"/>.
	''' 
	''' <li>Finally, an instance of the stub class is constructed with a
	''' <seealso cref="RemoteRef"/>.
	''' 
	''' <li>If the appropriate stub class could not be found, or if the stub class
	''' could not be loaded, or if a problem occurs creating the stub instance, a
	''' <seealso cref="StubNotFoundException"/> is thrown.
	''' 
	''' </ul>
	''' 
	''' <p>Stubs are dynamically generated by constructing an instance of
	''' a <seealso cref="java.lang.reflect.Proxy Proxy"/> with the following characteristics:
	''' 
	''' <ul>
	''' 
	''' <li>The proxy's class is defined by the class loader of the remote
	''' object's class.
	''' 
	''' <li>The proxy implements all the remote interfaces implemented by the
	''' remote object's class.
	''' 
	''' <li>The proxy's invocation handler is a {@link
	''' RemoteObjectInvocationHandler} instance constructed with a
	''' <seealso cref="RemoteRef"/>.
	''' 
	''' <li>If the proxy could not be created, a <seealso cref="StubNotFoundException"/>
	''' will be thrown.
	''' 
	''' </ul>
	''' 
	''' @implNote
	''' Depending upon which constructor or static method is used for exporting an
	''' object, <seealso cref="RMISocketFactory"/> may be used for creating sockets.
	''' By default, server sockets created by <seealso cref="RMISocketFactory"/>
	''' listen on all network interfaces. See the
	''' <seealso cref="RMISocketFactory"/> class and the section
	''' <a href="{@docRoot}/../platform/rmi/spec/rmi-server29.html">RMI Socket Factories</a>
	''' in the
	''' <a href="{@docRoot}/../platform/rmi/spec/rmiTOC.html">Java RMI Specification</a>.
	''' 
	''' @author  Ann Wollrath
	''' @author  Peter Jones
	''' @since   JDK1.1
	''' 
	''' </summary>
	Public Class UnicastRemoteObject
		Inherits RemoteServer

		''' <summary>
		''' @serial port number on which to export object
		''' </summary>
		Private port As Integer = 0

		''' <summary>
		''' @serial client-side socket factory (if any)
		''' </summary>
		Private csf As RMIClientSocketFactory = Nothing

		''' <summary>
		''' @serial server-side socket factory (if any) to use when
		''' exporting object
		''' </summary>
		Private ssf As RMIServerSocketFactory = Nothing

		' indicate compatibility with JDK 1.1.x version of class 
		Private Const serialVersionUID As Long = 4974527148936298033L

		''' <summary>
		''' Creates and exports a new UnicastRemoteObject object using an
		''' anonymous port.
		''' 
		''' <p>The object is exported with a server socket
		''' created using the <seealso cref="RMISocketFactory"/> class.
		''' </summary>
		''' <exception cref="RemoteException"> if failed to export object
		''' @since JDK1.1 </exception>
		Protected Friend Sub New()
			Me.New(0)
		End Sub

		''' <summary>
		''' Creates and exports a new UnicastRemoteObject object using the
		''' particular supplied port.
		''' 
		''' <p>The object is exported with a server socket
		''' created using the <seealso cref="RMISocketFactory"/> class.
		''' </summary>
		''' <param name="port"> the port number on which the remote object receives calls
		''' (if <code>port</code> is zero, an anonymous port is chosen) </param>
		''' <exception cref="RemoteException"> if failed to export object
		''' @since 1.2 </exception>
		Protected Friend Sub New(  port As Integer)
			Me.port = port
			exportObject(CType(Me, Remote), port)
		End Sub

		''' <summary>
		''' Creates and exports a new UnicastRemoteObject object using the
		''' particular supplied port and socket factories.
		''' 
		''' <p>Either socket factory may be {@code null}, in which case
		''' the corresponding client or server socket creation method of
		''' <seealso cref="RMISocketFactory"/> is used instead.
		''' </summary>
		''' <param name="port"> the port number on which the remote object receives calls
		''' (if <code>port</code> is zero, an anonymous port is chosen) </param>
		''' <param name="csf"> the client-side socket factory for making calls to the
		''' remote object </param>
		''' <param name="ssf"> the server-side socket factory for receiving remote calls </param>
		''' <exception cref="RemoteException"> if failed to export object
		''' @since 1.2 </exception>
		Protected Friend Sub New(  port As Integer,   csf As RMIClientSocketFactory,   ssf As RMIServerSocketFactory)
			Me.port = port
			Me.csf = csf
			Me.ssf = ssf
			exportObject(CType(Me, Remote), port, csf, ssf)
		End Sub

		''' <summary>
		''' Re-export the remote object when it is deserialized.
		''' </summary>
		Private Sub readObject(  [in] As java.io.ObjectInputStream)
			[in].defaultReadObject()
			reexport()
		End Sub

		''' <summary>
		''' Returns a clone of the remote object that is distinct from
		''' the original.
		''' </summary>
		''' <exception cref="CloneNotSupportedException"> if clone failed due to
		''' a RemoteException. </exception>
		''' <returns> the new remote object
		''' @since JDK1.1 </returns>
		Public Overridable Function clone() As Object
			Try
				Dim cloned As UnicastRemoteObject = CType(MyBase.clone(), UnicastRemoteObject)
				cloned.reexport()
				Return cloned
			Catch e As RemoteException
				Throw New ServerCloneException("Clone failed", e)
			End Try
		End Function

	'    
	'     * Exports this UnicastRemoteObject using its initialized fields because
	'     * its creation bypassed running its constructors (via deserialization
	'     * or cloning, for example).
	'     
		Private Sub reexport()
			If csf Is Nothing AndAlso ssf Is Nothing Then
				exportObject(CType(Me, Remote), port)
			Else
				exportObject(CType(Me, Remote), port, csf, ssf)
			End If
		End Sub

		''' <summary>
		''' Exports the remote object to make it available to receive incoming
		''' calls using an anonymous port. This method will always return a
		''' statically generated stub.
		''' 
		''' <p>The object is exported with a server socket
		''' created using the <seealso cref="RMISocketFactory"/> class.
		''' </summary>
		''' <param name="obj"> the remote object to be exported </param>
		''' <returns> remote object stub </returns>
		''' <exception cref="RemoteException"> if export fails
		''' @since JDK1.1 </exception>
		''' @deprecated This method is deprecated because it supports only static stubs.
		''' Use <seealso cref="#exportObject(Remote, int) exportObject(Remote, port)"/> or
		''' {@link #exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory)
		''' exportObject(Remote, port, csf, ssf)}
		''' instead. 
		<Obsolete("This method is deprecated because it supports only static stubs.")> _
		Public Shared Function exportObject(  obj As Remote) As RemoteStub
	'        
	'         * Use UnicastServerRef constructor passing the boolean value true
	'         * to indicate that only a generated stub class should be used.  A
	'         * generated stub class must be used instead of a dynamic proxy
	'         * because the return value of this method is RemoteStub which a
	'         * dynamic proxy class cannot extend.
	'         
			Return CType(exportObject(obj, New sun.rmi.server.UnicastServerRef(True)), RemoteStub)
		End Function

		''' <summary>
		''' Exports the remote object to make it available to receive incoming
		''' calls, using the particular supplied port.
		''' 
		''' <p>The object is exported with a server socket
		''' created using the <seealso cref="RMISocketFactory"/> class.
		''' </summary>
		''' <param name="obj"> the remote object to be exported </param>
		''' <param name="port"> the port to export the object on </param>
		''' <returns> remote object stub </returns>
		''' <exception cref="RemoteException"> if export fails
		''' @since 1.2 </exception>
		Public Shared Function exportObject(  obj As Remote,   port As Integer) As Remote
			Return exportObject(obj, New sun.rmi.server.UnicastServerRef(port))
		End Function

		''' <summary>
		''' Exports the remote object to make it available to receive incoming
		''' calls, using a transport specified by the given socket factory.
		''' 
		''' <p>Either socket factory may be {@code null}, in which case
		''' the corresponding client or server socket creation method of
		''' <seealso cref="RMISocketFactory"/> is used instead.
		''' </summary>
		''' <param name="obj"> the remote object to be exported </param>
		''' <param name="port"> the port to export the object on </param>
		''' <param name="csf"> the client-side socket factory for making calls to the
		''' remote object </param>
		''' <param name="ssf"> the server-side socket factory for receiving remote calls </param>
		''' <returns> remote object stub </returns>
		''' <exception cref="RemoteException"> if export fails
		''' @since 1.2 </exception>
		Public Shared Function exportObject(  obj As Remote,   port As Integer,   csf As RMIClientSocketFactory,   ssf As RMIServerSocketFactory) As Remote

			Return exportObject(obj, New sun.rmi.server.UnicastServerRef2(port, csf, ssf))
		End Function

		''' <summary>
		''' Removes the remote object, obj, from the RMI runtime. If
		''' successful, the object can no longer accept incoming RMI calls.
		''' If the force parameter is true, the object is forcibly unexported
		''' even if there are pending calls to the remote object or the
		''' remote object still has calls in progress.  If the force
		''' parameter is false, the object is only unexported if there are
		''' no pending or in progress calls to the object.
		''' </summary>
		''' <param name="obj"> the remote object to be unexported </param>
		''' <param name="force"> if true, unexports the object even if there are
		''' pending or in-progress calls; if false, only unexports the object
		''' if there are no pending or in-progress calls </param>
		''' <returns> true if operation is successful, false otherwise </returns>
		''' <exception cref="NoSuchObjectException"> if the remote object is not
		''' currently exported
		''' @since 1.2 </exception>
		Public Shared Function unexportObject(  obj As Remote,   force As Boolean) As Boolean
			Return sun.rmi.transport.ObjectTable.unexportObject(obj, force)
		End Function

		''' <summary>
		''' Exports the specified object using the specified server ref.
		''' </summary>
		Private Shared Function exportObject(  obj As Remote,   sref As sun.rmi.server.UnicastServerRef) As Remote
			' if obj extends UnicastRemoteObject, set its ref.
			If TypeOf obj Is UnicastRemoteObject Then CType(obj, UnicastRemoteObject).ref = sref
			Return sref.exportObject(obj, Nothing, False)
		End Function
	End Class

End Namespace