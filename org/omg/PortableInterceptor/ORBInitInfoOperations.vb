Namespace org.omg.PortableInterceptor


	''' <summary>
	''' org/omg/PortableInterceptor/ORBInitInfoOperations.java .
	''' Generated by the IDL-to-Java compiler (portable), version "3.2"
	''' from d:/re/puppet/workspace/8-2-build-windows-amd64-cygwin/jdk8u73/6086/corba/src/share/classes/org/omg/PortableInterceptor/Interceptors.idl
	''' Friday, January 29, 2016 5:40:18 PM PST
	''' </summary>


	''' <summary>
	''' Passed to each <code>ORBInitializer</code>, allowing it to
	''' to register interceptors and perform other duties while the ORB is 
	''' initializing.
	''' <p>
	''' The <code>ORBInitInfo</code> object is only valid during 
	''' <code>ORB.init</code>.  If a service keeps a reference to its 
	''' <code>ORBInitInfo</code> object and tries to use it after 
	''' <code>ORB.init</code> returns, the object no longer exists and an 
	''' <code>OBJECT_NOT_EXIST</code> exception shall be thrown.
	''' </summary>
	''' <seealso cref= ORBInitializer </seealso>
	Public Interface ORBInitInfoOperations

	  ''' <summary>
	  ''' Returns the arguments passed to <code>ORB.init</code>.  They may or
	  ''' may not contain the ORB's arguments.
	  ''' </summary>
	  Function arguments() As String()

	  ''' <summary>
	  ''' Returns the ID of the ORB being initialized.
	  ''' </summary>
	  Function orb_id() As String

	  ''' <summary>
	  ''' Returns the <code>IOP.CodecFactory</code>. The 
	  ''' <code>CodecFactory</code> is normally obtained via a call to 
	  ''' <code>ORB.resolve_initial_references( "CodecFactory" )</code>, but 
	  ''' since the ORB is not yet available and Interceptors, particularly when 
	  ''' processing service contexts, will require a <code>Codec</code>, a 
	  ''' means of obtaining a <code>Codec</code> is necessary during ORB 
	  ''' initialization.
	  ''' </summary>
	  Function codec_factory() As org.omg.IOP.CodecFactory

	  ''' <summary>
	  ''' Identical to <code>ORB.register_initial_reference</code>. This same 
	  ''' functionality exists here because the ORB, not yet fully initialized, 
	  ''' is not yet available but initial references may need to be 
	  ''' registered as part of Interceptor registration. The only difference 
	  ''' is that the version of this operation on the ORB uses PIDL 
	  ''' (<code>CORBA.ORB.ObjectId</code>) and 
	  ''' (<code>CORBA.ORB.InvalidName</code>) whereas the version in this 
	  ''' interface uses IDL defined in this interface; the semantics are 
	  ''' identical.
	  ''' </summary>
	  Sub register_initial_reference(ByVal id As String, ByVal obj As org.omg.CORBA.Object)

	  ''' <summary>
	  ''' Identical to <code>ORB.resolve_initial_references</code>. This same 
	  ''' functionality exists here because the ORB, not yet fully initialized, 
	  ''' is not yet available but initial references may be required from the 
	  ''' ORB as part of Interceptor registration. The only difference is that 
	  ''' the version of this operation on the ORB uses PIDL 
	  ''' (<code>CORBA::ORB::ObjectId</code> and 
	  ''' <code>CORBA::ORB::InvalidName</code>) whereas the version in this 
	  ''' interface uses IDL defined in this interface; the semantics 
	  ''' are identical.
	  ''' <p>
	  ''' This operation is only valid during post_init.
	  ''' </summary>
	  Function resolve_initial_references(ByVal id As String) As org.omg.CORBA.Object

	  ''' <summary>
	  ''' Used to add a client-side request Interceptor to the list of 
	  ''' client-side request Interceptors.  
	  ''' </summary>
	  ''' <param name="interceptor"> The <code>ClientRequestInterceptor</code> to be 
	  '''     added. </param>
	  ''' <exception cref="DuplicateName"> thrown if a client-side request Interceptor 
	  '''     has already been registered with this Interceptor's name. </exception>
	  Sub add_client_request_interceptor(ByVal interceptor As org.omg.PortableInterceptor.ClientRequestInterceptor)

	  ''' <summary>
	  ''' Used to add a server-side request Interceptor to the list of 
	  ''' server-side request Interceptors.
	  ''' </summary>
	  ''' <param name="interceptor"> The ServerRequestInterceptor to be added. </param>
	  ''' <exception cref="DuplicateName"> thrown if a server-side request Interceptor 
	  '''     has already been registered with this Interceptor's name </exception>
	  Sub add_server_request_interceptor(ByVal interceptor As org.omg.PortableInterceptor.ServerRequestInterceptor)

	  ''' <summary>
	  ''' Used to add an IOR Interceptor to the list of IOR Interceptors. 
	  ''' </summary>
	  ''' <param name="interceptor"> The IORInterceptor to be added. </param>
	  ''' <exception cref="DuplicateName"> thrown if an IOR Interceptor has already 
	  '''     been registered with this Interceptor's name.  </exception>
	  Sub add_ior_interceptor(ByVal interceptor As org.omg.PortableInterceptor.IORInterceptor)

	  ''' <summary>
	  ''' Called to allocate a slot on <code>PortableInterceptor.Current</code>. 
	  ''' <p>
	  ''' Note that while slot id's can be allocated within an ORB initializer, 
	  ''' the slots themselves cannot be initialized. 
	  ''' </summary>
	  ''' <returns> The index to the slot which has been allocated. </returns>
	  ''' <exception cref="BAD_INV_ORDER"> thrown, with a standard minor code of 14, if 
	  '''     <code>set_slot</code> or <code>get_slot</code> is called on the 
	  '''     <code>PICurrent</code> within an ORB initializer. </exception>
	  ''' <seealso cref= Current </seealso>
	  Function allocate_slot_id() As Integer

	  ''' <summary>
	  ''' Registers a <code>PolicyFactory</code> for the given 
	  ''' <code>PolicyType</code>. 
	  ''' </summary>
	  ''' <param name="type"> The policy type that the given <code>PolicyFactory</code> 
	  '''     serves. </param>
	  ''' <param name="policy_factory"> The factory for the given policy type. </param>
	  ''' <exception cref="BAD_INV_ORDER"> thrown, with a standard minor code of 16, if 
	  '''     a <code>PolicyFactory</code> already exists for the given 
	  '''     <code>PolicyType</code>. </exception>
	  Sub register_policy_factory(ByVal type As Integer, ByVal policy_factory As org.omg.PortableInterceptor.PolicyFactory)
	End Interface ' interface ORBInitInfoOperations

End Namespace