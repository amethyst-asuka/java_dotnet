Imports System

Namespace org.omg.PortableServer


	''' <summary>
	''' org/omg/PortableServer/_ServantLocatorStub.java .
	''' Generated by the IDL-to-Java compiler (portable), version "3.2"
	''' from d:/re/puppet/workspace/8-2-build-windows-amd64-cygwin/jdk8u73/6086/corba/src/share/classes/org/omg/PortableServer/poa.idl
	''' Friday, January 29, 2016 5:40:18 PM PST
	''' </summary>


	''' <summary>
	''' When the POA has the NON_RETAIN policy it uses servant 
	''' managers that are ServantLocators. Because the POA 
	''' knows that the servant returned by this servant 
	''' manager will be used only for a single request, 
	''' it can supply extra information to the servant 
	''' manager's operations and the servant manager's pair 
	''' of operations may be able to cooperate to do 
	''' something different than a ServantActivator. 
	''' When the POA uses the ServantLocator interface, 
	''' immediately after performing the operation invocation 
	''' on the servant returned by preinvoke, the POA will 
	''' invoke postinvoke on the servant manager, passing the 
	''' ObjectId value and the Servant value as parameters 
	''' (among others). This feature may be used to force 
	''' every request for objects associated with a POA to 
	''' be mediated by the servant manager.
	''' </summary>
	Public Class _ServantLocatorStub
		Inherits org.omg.CORBA.portable.ObjectImpl
		Implements org.omg.PortableServer.ServantLocator

	  Public Shared ReadOnly _opsClass As Type = GetType(ServantLocatorOperations)



	  ''' <summary>
	  ''' This operations is used to get a servant that will be
	  ''' used to process the request that caused preinvoke to
	  ''' be called. </summary>
	  ''' <param name="oid"> the object id associated with object on
	  '''            which the request was made. </param>
	  ''' <param name="adapter"> the reference for POA in which the
	  '''                object is being activated. </param>
	  ''' <param name="operation"> the operation name. </param>
	  ''' <param name="the_cookie">  an opaque value that can be set
	  '''                    by the servant manager to be used
	  '''                    during postinvoke. </param>
	  ''' <returns> Servant used to process incoming request. </returns>
	  ''' <exception cref="ForwardRequest"> to indicate to the ORB 
	  '''            that it is responsible for delivering 
	  '''            the current request and subsequent 
	  '''            requests to the object denoted in the 
	  '''            forward_reference member of the exception. </exception>
	  Public Overridable Function preinvoke(ByVal oid As SByte(), ByVal adapter As org.omg.PortableServer.POA, ByVal operation As String, ByVal the_cookie As org.omg.PortableServer.ServantLocatorPackage.CookieHolder) As org.omg.PortableServer.Servant
		  Dim $so As org.omg.CORBA.portable.ServantObject = _servant_preinvoke("preinvoke", _opsClass)
		  Dim $self As ServantLocatorOperations = CType($so.servant, ServantLocatorOperations)

		  Try
			 Return $self.preinvoke(oid, adapter, operation, the_cookie)
		  Finally
			  _servant_postinvoke($so)
		  End Try
	  End Function ' preinvoke


	  ''' <summary>
	  ''' This operation is invoked whenener a servant completes
	  ''' a request. </summary>
	  ''' <param name="oid"> the object id ssociated with object on which
	  '''            the request was made. </param>
	  ''' <param name="adapter"> the reference for POA in which the
	  '''                object was active. </param>
	  ''' <param name="the_cookie">  an opaque value that contains
	  '''                    the data set by preinvoke. </param>
	  ''' <param name="the_servant"> reference to the servant that is
	  '''                    associated with the object. </param>
	  Public Overridable Sub postinvoke(ByVal oid As SByte(), ByVal adapter As org.omg.PortableServer.POA, ByVal operation As String, ByVal the_cookie As Object, ByVal the_servant As org.omg.PortableServer.Servant)
		  Dim $so As org.omg.CORBA.portable.ServantObject = _servant_preinvoke("postinvoke", _opsClass)
		  Dim $self As ServantLocatorOperations = CType($so.servant, ServantLocatorOperations)

		  Try
			 $self.postinvoke(oid, adapter, operation, the_cookie, the_servant)
		  Finally
			  _servant_postinvoke($so)
		  End Try
	  End Sub ' postinvoke

	  ' Type-specific CORBA::Object operations
	  Private Shared __ids As String() = { "IDL:omg.org/PortableServer/ServantLocator:1.0", "IDL:omg.org/PortableServer/ServantManager:1.0"}

	  Public Overrides Function _ids() As String()
		Return CType(__ids.clone(), String())
	  End Function

	  Private Sub readObject(ByVal s As java.io.ObjectInputStream)
		 Dim str As String = s.readUTF()
		 Dim args As String() = Nothing
		 Dim props As java.util.Properties = Nothing
		 Dim orb As org.omg.CORBA.ORB = org.omg.CORBA.ORB.init(args, props)
	   Try
		 Dim obj As org.omg.CORBA.Object = orb.string_to_object(str)
		 Dim [delegate] As org.omg.CORBA.portable.Delegate = CType(obj, org.omg.CORBA.portable.ObjectImpl)._get_delegate()
		 _set_delegate([delegate])
	   Finally
		 orb.destroy()
	   End Try
	  End Sub

	  Private Sub writeObject(ByVal s As java.io.ObjectOutputStream)
		 Dim args As String() = Nothing
		 Dim props As java.util.Properties = Nothing
		 Dim orb As org.omg.CORBA.ORB = org.omg.CORBA.ORB.init(args, props)
	   Try
		 Dim str As String = orb.object_to_string(Me)
		 s.writeUTF(str)
	   Finally
		 orb.destroy()
	   End Try
	  End Sub
	End Class ' class _ServantLocatorStub

End Namespace