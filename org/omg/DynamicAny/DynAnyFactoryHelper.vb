Imports System.Runtime.CompilerServices

Namespace org.omg.DynamicAny


	''' <summary>
	''' org/omg/DynamicAny/DynAnyFactoryHelper.java .
	''' Generated by the IDL-to-Java compiler (portable), version "3.2"
	''' from d:/re/puppet/workspace/8-2-build-windows-amd64-cygwin/jdk8u73/6086/corba/src/share/classes/org/omg/DynamicAny/DynamicAny.idl
	''' Friday, January 29, 2016 5:40:18 PM PST
	''' </summary>


	''' <summary>
	''' DynAny objects can be created by invoking operations on the DynAnyFactory object.
	''' Generally there are only two ways to create a DynAny object:
	''' <UL>
	''' <LI>invoking an operation on an existing DynAny object
	''' <LI>invoking an operation on a DynAnyFactory object
	''' </UL>
	''' A constructed DynAny object supports operations that enable the creation of new DynAny
	''' objects encapsulating access to the value of some constituent.
	''' DynAny objects also support the copy operation for creating new DynAny objects.
	''' A reference to the DynAnyFactory object is obtained by calling ORB.resolve_initial_references()
	''' with the identifier parameter set to the string constant "DynAnyFactory".
	''' <P>Dynamic interpretation of an any usually involves creating a DynAny object using create_dyn_any()
	''' as the first step. Depending on the type of the any, the resulting DynAny object reference can be narrowed
	''' to a DynFixed, DynStruct, DynSequence, DynArray, DynUnion, DynEnum, or DynValue object reference.
	''' <P>Dynamic creation of an any involves creating a DynAny object using create_dyn_any_from_type_code(),
	''' passing the TypeCode associated with the value to be created. The returned reference is narrowed to one of
	''' the complex types, such as DynStruct, if appropriate. Then, the value can be initialized by means of
	''' invoking operations on the resulting object. Finally, the to_any operation can be invoked
	''' to create an any value from the constructed DynAny.
	''' </summary>
	Public MustInherit Class DynAnyFactoryHelper
	  Private Shared _id As String = "IDL:omg.org/DynamicAny/DynAnyFactory:1.0"

	  Public Shared Sub insert(ByVal a As org.omg.CORBA.Any, ByVal that As org.omg.DynamicAny.DynAnyFactory)
		Dim out As org.omg.CORBA.portable.OutputStream = a.create_output_stream()
		a.type(type())
		write(out, that)
		a.read_value(out.create_input_stream(), type())
	  End Sub

	  Public Shared Function extract(ByVal a As org.omg.CORBA.Any) As org.omg.DynamicAny.DynAnyFactory
		Return read(a.create_input_stream())
	  End Function

	  Private Shared __typeCode As org.omg.CORBA.TypeCode = Nothing
	  <MethodImpl(MethodImplOptions.Synchronized)> _
	  Public Shared Function type() As org.omg.CORBA.TypeCode
		If __typeCode Is Nothing Then __typeCode = org.omg.CORBA.ORB.init().create_interface_tc(org.omg.DynamicAny.DynAnyFactoryHelper.id(), "DynAnyFactory")
		Return __typeCode
	  End Function

	  Public Shared Function id() As String
		Return _id
	  End Function

	  Public Shared Function read(ByVal istream As org.omg.CORBA.portable.InputStream) As org.omg.DynamicAny.DynAnyFactory
		  Throw New org.omg.CORBA.MARSHAL
	  End Function

	  Public Shared Sub write(ByVal ostream As org.omg.CORBA.portable.OutputStream, ByVal value As org.omg.DynamicAny.DynAnyFactory)
		  Throw New org.omg.CORBA.MARSHAL
	  End Sub

	  Public Shared Function narrow(ByVal obj As org.omg.CORBA.Object) As org.omg.DynamicAny.DynAnyFactory
		If obj Is Nothing Then
		  Return Nothing
		ElseIf TypeOf obj Is org.omg.DynamicAny.DynAnyFactory Then
		  Return CType(obj, org.omg.DynamicAny.DynAnyFactory)
		ElseIf Not obj._is_a(id()) Then
		  Throw New org.omg.CORBA.BAD_PARAM
		Else
		  Dim [delegate] As org.omg.CORBA.portable.Delegate = CType(obj, org.omg.CORBA.portable.ObjectImpl)._get_delegate()
		  Dim stub As New org.omg.DynamicAny._DynAnyFactoryStub
		  stub._set_delegate([delegate])
		  Return stub
		End If
	  End Function

	  Public Shared Function unchecked_narrow(ByVal obj As org.omg.CORBA.Object) As org.omg.DynamicAny.DynAnyFactory
		If obj Is Nothing Then
		  Return Nothing
		ElseIf TypeOf obj Is org.omg.DynamicAny.DynAnyFactory Then
		  Return CType(obj, org.omg.DynamicAny.DynAnyFactory)
		Else
		  Dim [delegate] As org.omg.CORBA.portable.Delegate = CType(obj, org.omg.CORBA.portable.ObjectImpl)._get_delegate()
		  Dim stub As New org.omg.DynamicAny._DynAnyFactoryStub
		  stub._set_delegate([delegate])
		  Return stub
		End If
	  End Function

	End Class

End Namespace