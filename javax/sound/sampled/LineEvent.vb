Imports System

'
' * Copyright (c) 1999, 2003, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 

Namespace javax.sound.sampled

	''' <summary>
	''' The <code>LineEvent</code> class encapsulates information that a line
	''' sends its listeners whenever the line opens, closes, starts, or stops.
	''' Each of these four state changes is represented by a corresponding
	''' type of event.  A listener receives the event as a parameter to its
	''' <seealso cref="LineListener#update update"/> method.  By querying the event,
	''' the listener can learn the type of event, the line responsible for
	''' the event, and how much data the line had processed when the event occurred.
	''' 
	''' <p>Although this class implements Serializable, attempts to
	''' serialize a <code>LineEvent</code> object will fail.
	''' 
	''' @author Kara Kytle
	''' </summary>
	''' <seealso cref= Line </seealso>
	''' <seealso cref= LineListener#update
	''' @since 1.3
	''' 
	''' @serial exclude </seealso>
	Public Class LineEvent
		Inherits java.util.EventObject

		' INSTANCE VARIABLES

		''' <summary>
		''' The kind of line event (<code>OPEN</code>, <code>CLOSE</code>,
		''' <code>START</code>, or <code>STOP</code>). </summary>
		''' <seealso cref= #getType
		''' @serial </seealso>
		Private ReadOnly type As Type

		''' <summary>
		''' The media position when the event occurred, expressed in sample frames.
		''' Note that this field is only relevant to certain events generated by
		''' data lines, such as <code>START</code> and <code>STOP</code>.  For
		''' events generated by lines that do not count sample frames, and for any
		''' other events for which this value is not known, the position value
		''' should be <seealso cref="AudioSystem#NOT_SPECIFIED"/>.
		''' @serial </summary>
		''' <seealso cref= #getFramePosition </seealso>
		Private ReadOnly position As Long


		''' <summary>
		''' Constructs a new event of the specified type, originating from the specified line. </summary>
		''' <param name="line"> the source of this event </param>
		''' <param name="type"> the event type (<code>OPEN</code>, <code>CLOSE</code>, <code>START</code>, or <code>STOP</code>) </param>
		''' <param name="position"> the number of sample frames that the line had already processed when the event occurred,
		''' or <seealso cref="AudioSystem#NOT_SPECIFIED"/>
		''' </param>
		''' <exception cref="IllegalArgumentException"> if <code>line</code> is
		''' <code>null</code>. </exception>
		Public Sub New(ByVal line As Line, ByVal ___type As Type, ByVal position As Long)

			MyBase.New(line)
			Me.type = ___type
			Me.position = position
		End Sub

		''' <summary>
		''' Obtains the audio line that is the source of this event. </summary>
		''' <returns> the line responsible for this event </returns>
		Public Property line As Line
			Get
    
				Return CType(source, Line)
			End Get
		End Property


		''' <summary>
		''' Obtains the event's type. </summary>
		''' <returns> this event's type (<seealso cref="Type#OPEN"/>, <seealso cref="Type#CLOSE"/>,
		''' <seealso cref="Type#START"/>, or <seealso cref="Type#STOP"/>) </returns>
		Public Property type As Type
			Get
    
				Return type
			End Get
		End Property

		''' <summary>
		''' Obtains the position in the line's audio data when the event occurred, expressed in sample frames.
		''' For example, if a source line had already played back 14 sample frames at the time it was
		''' paused, the pause event would report the line's position as 14.  The next frame to be processed
		''' would be frame number 14 using zero-based numbering, or 15 using one-based numbering.
		''' <p>
		''' Note that this field is relevant only to certain events generated by
		''' data lines, such as <code>START</code> and <code>STOP</code>.  For
		''' events generated by lines that do not count sample frames, and for any
		''' other events for which this value is not known, the position value
		''' should be <seealso cref="AudioSystem#NOT_SPECIFIED"/>.
		''' </summary>
		''' <returns> the line's position as a sample frame number </returns>
	'    
	'     * $$kk: 04.20.99: note to myself: should make sure our implementation is consistent with this.
	'     * which is a reasonable definition....
	'     
		Public Property framePosition As Long
			Get
    
				Return position
			End Get
		End Property

		''' <summary>
		''' Obtains a string representation of the event.  The contents of the string may vary
		''' between implementations of Java Sound. </summary>
		''' <returns> a string describing the event. </returns>
		Public Overrides Function ToString() As String
			Dim sType As String = ""
			If type IsNot Nothing Then sType = type.ToString() & " "
			Dim sLine As String
			If line Is Nothing Then
				sLine = "null"
			Else
				sLine = line.ToString()
			End If
			Return New String(sType & "event from line " & sLine)
		End Function


		''' <summary>
		''' The LineEvent.Type inner class identifies what kind of event occurred on a line.
		''' Static instances are provided for the common types (OPEN, CLOSE, START, and STOP).
		''' </summary>
		''' <seealso cref= LineEvent#getType() </seealso>
		Public Class Type


			''' <summary>
			''' Type name.
			''' </summary>
			' $$kk: 03.25.99: why can't this be final??
			Private name As String 'final

			''' <summary>
			''' Constructs a new event type. </summary>
			''' <param name="name"> name of the type </param>
			Protected Friend Sub New(ByVal name As String)
				Me.name = name
			End Sub


			'$$fb 2002-11-26: fix for 4695001: SPEC: description of equals() method contains typo
			''' <summary>
			''' Indicates whether the specified object is equal to this event type,
			''' returning <code>true</code> if the objects are identical. </summary>
			''' <param name="obj"> the reference object with which to compare </param>
			''' <returns> <code>true</code> if this event type is the same as
			''' <code>obj</code>; <code>false</code> otherwise </returns>
			Public NotOverridable Overrides Function Equals(ByVal obj As Object) As Boolean
				Return MyBase.Equals(obj)
			End Function


			''' <summary>
			''' Finalizes the hashcode method.
			''' </summary>
			Public NotOverridable Overrides Function GetHashCode() As Integer
				Return MyBase.GetHashCode()
			End Function


			''' <summary>
			''' Returns the type name as the string representation.
			''' </summary>
			Public Overrides Function ToString() As String
				Return name
			End Function


			' LINE EVENT TYPE DEFINES

			''' <summary>
			''' A type of event that is sent when a line opens, reserving system
			''' resources for itself. </summary>
			''' <seealso cref= #CLOSE </seealso>
			''' <seealso cref= Line#open </seealso>
			Public Shared ReadOnly OPEN As New Type("Open")


			''' <summary>
			''' A type of event that is sent when a line closes, freeing the system
			''' resources it had obtained when it was opened. </summary>
			''' <seealso cref= #OPEN </seealso>
			''' <seealso cref= Line#close </seealso>
			Public Shared ReadOnly CLOSE As New Type("Close")


			''' <summary>
			''' A type of event that is sent when a line begins to engage in active
			''' input or output of audio data in response to a
			''' <seealso cref="DataLine#start start"/> request. </summary>
			''' <seealso cref= #STOP </seealso>
			''' <seealso cref= DataLine#start </seealso>
			Public Shared ReadOnly START As New Type("Start")


			''' <summary>
			''' A type of event that is sent when a line ceases active input or output
			''' of audio data in response to a <seealso cref="DataLine#stop stop"/> request,
			''' or because the end of media has been reached. </summary>
			''' <seealso cref= #START </seealso>
			''' <seealso cref= DataLine#stop </seealso>
			Public Shared ReadOnly [STOP] As New Type("Stop")


			''' <summary>
			''' A type of event that is sent when a line ceases to engage in active
			''' input or output of audio data because the end of media has been reached.
			''' </summary>
	'        
	'         * ISSUE: we may want to get rid of this.  Is JavaSound
	'         * responsible for reporting this??
	'         *
	'         * [If it's decided to keep this API, the docs will need to be updated to include mention
	'         * of EOM events elsewhere.]
	'         
			'public static final Type EOM  = new Type("EOM");


			''' <summary>
			''' A type of event that is sent when a line begins to engage in active
			''' input or output of audio data.  Examples of when this happens are
			''' when a source line begins or resumes writing data to its mixer, and
			''' when a target line begins or resumes reading data from its mixer. </summary>
			''' <seealso cref= #STOP </seealso>
			''' <seealso cref= SourceDataLine#write </seealso>
			''' <seealso cref= TargetDataLine#read </seealso>
			''' <seealso cref= DataLine#start </seealso>
			'public static final Type ACTIVE       = new Type("ACTIVE");


			''' <summary>
			''' A type of event that is sent when a line ceases active input or output
			''' of audio data. </summary>
			''' <seealso cref= #START </seealso>
			''' <seealso cref= DataLine#stop </seealso>
			'public static final Type INACTIVE     = new Type("INACTIVE");

		End Class ' class Type

	End Class ' class LineEvent

End Namespace