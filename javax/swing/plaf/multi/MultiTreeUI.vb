Imports System.Collections

'
' * Copyright (c) 1997, 2001, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 
Namespace javax.swing.plaf.multi


	''' <summary>
	''' A multiplexing UI used to combine <code>TreeUI</code>s.
	''' 
	''' <p>This file was automatically generated by AutoMulti.
	''' 
	''' @author  Otto Multey
	''' </summary>
	Public Class MultiTreeUI
		Inherits javax.swing.plaf.TreeUI

		''' <summary>
		''' The vector containing the real UIs.  This is populated
		''' in the call to <code>createUI</code>, and can be obtained by calling
		''' the <code>getUIs</code> method.  The first element is guaranteed to be the real UI
		''' obtained from the default look and feel.
		''' </summary>
		Protected Friend uis As New ArrayList

	'//////////////////
	' Common UI methods
	'//////////////////

		''' <summary>
		''' Returns the list of UIs associated with this multiplexing UI.  This
		''' allows processing of the UIs by an application aware of multiplexing
		''' UIs on components.
		''' </summary>
		Public Overridable Property uIs As javax.swing.plaf.ComponentUI()
			Get
				Return MultiLookAndFeel.uisToArray(uis)
			End Get
		End Property

	'//////////////////
	' TreeUI methods
	'//////////////////

		''' <summary>
		''' Invokes the <code>getPathBounds</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getPathBounds(ByVal a As javax.swing.JTree, ByVal b As javax.swing.tree.TreePath) As java.awt.Rectangle
			Dim returnValue As java.awt.Rectangle = CType(uis(0), javax.swing.plaf.TreeUI).getPathBounds(a,b)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TreeUI).getPathBounds(a,b)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getPathForRow</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getPathForRow(ByVal a As javax.swing.JTree, ByVal b As Integer) As javax.swing.tree.TreePath
			Dim returnValue As javax.swing.tree.TreePath = CType(uis(0), javax.swing.plaf.TreeUI).getPathForRow(a,b)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TreeUI).getPathForRow(a,b)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getRowForPath</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getRowForPath(ByVal a As javax.swing.JTree, ByVal b As javax.swing.tree.TreePath) As Integer
			Dim returnValue As Integer = CType(uis(0), javax.swing.plaf.TreeUI).getRowForPath(a,b)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TreeUI).getRowForPath(a,b)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getRowCount</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getRowCount(ByVal a As javax.swing.JTree) As Integer
			Dim returnValue As Integer = CType(uis(0), javax.swing.plaf.TreeUI).getRowCount(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TreeUI).getRowCount(a)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getClosestPathForLocation</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getClosestPathForLocation(ByVal a As javax.swing.JTree, ByVal b As Integer, ByVal c As Integer) As javax.swing.tree.TreePath
			Dim returnValue As javax.swing.tree.TreePath = CType(uis(0), javax.swing.plaf.TreeUI).getClosestPathForLocation(a,b,c)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TreeUI).getClosestPathForLocation(a,b,c)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>isEditing</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function isEditing(ByVal a As javax.swing.JTree) As Boolean
			Dim returnValue As Boolean = CType(uis(0), javax.swing.plaf.TreeUI).isEditing(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TreeUI).isEditing(a)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>stopEditing</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function stopEditing(ByVal a As javax.swing.JTree) As Boolean
			Dim returnValue As Boolean = CType(uis(0), javax.swing.plaf.TreeUI).stopEditing(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TreeUI).stopEditing(a)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>cancelEditing</code> method on each UI handled by this object.
		''' </summary>
		Public Overrides Sub cancelEditing(ByVal a As javax.swing.JTree)
			For i As Integer = 0 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TreeUI).cancelEditing(a)
			Next i
		End Sub

		''' <summary>
		''' Invokes the <code>startEditingAtPath</code> method on each UI handled by this object.
		''' </summary>
		Public Overrides Sub startEditingAtPath(ByVal a As javax.swing.JTree, ByVal b As javax.swing.tree.TreePath)
			For i As Integer = 0 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TreeUI).startEditingAtPath(a,b)
			Next i
		End Sub

		''' <summary>
		''' Invokes the <code>getEditingPath</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getEditingPath(ByVal a As javax.swing.JTree) As javax.swing.tree.TreePath
			Dim returnValue As javax.swing.tree.TreePath = CType(uis(0), javax.swing.plaf.TreeUI).getEditingPath(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TreeUI).getEditingPath(a)
			Next i
			Return returnValue
		End Function

	'//////////////////
	' ComponentUI methods
	'//////////////////

		''' <summary>
		''' Invokes the <code>contains</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function contains(ByVal a As javax.swing.JComponent, ByVal b As Integer, ByVal c As Integer) As Boolean
			Dim returnValue As Boolean = CType(uis(0), javax.swing.plaf.ComponentUI).contains(a,b,c)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).contains(a,b,c)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>update</code> method on each UI handled by this object.
		''' </summary>
		Public Overrides Sub update(ByVal a As java.awt.Graphics, ByVal b As javax.swing.JComponent)
			For i As Integer = 0 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).update(a,b)
			Next i
		End Sub

		''' <summary>
		''' Returns a multiplexing UI instance if any of the auxiliary
		''' <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the
		''' UI object obtained from the default <code>LookAndFeel</code>.
		''' </summary>
		Public Shared Function createUI(ByVal a As javax.swing.JComponent) As javax.swing.plaf.ComponentUI
			Dim mui As javax.swing.plaf.ComponentUI = New MultiTreeUI
			Return MultiLookAndFeel.createUIs(mui, CType(mui, MultiTreeUI).uis, a)
		End Function

		''' <summary>
		''' Invokes the <code>installUI</code> method on each UI handled by this object.
		''' </summary>
		Public Overrides Sub installUI(ByVal a As javax.swing.JComponent)
			For i As Integer = 0 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).installUI(a)
			Next i
		End Sub

		''' <summary>
		''' Invokes the <code>uninstallUI</code> method on each UI handled by this object.
		''' </summary>
		Public Overrides Sub uninstallUI(ByVal a As javax.swing.JComponent)
			For i As Integer = 0 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).uninstallUI(a)
			Next i
		End Sub

		''' <summary>
		''' Invokes the <code>paint</code> method on each UI handled by this object.
		''' </summary>
		Public Overrides Sub paint(ByVal a As java.awt.Graphics, ByVal b As javax.swing.JComponent)
			For i As Integer = 0 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).paint(a,b)
			Next i
		End Sub

		''' <summary>
		''' Invokes the <code>getPreferredSize</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getPreferredSize(ByVal a As javax.swing.JComponent) As java.awt.Dimension
			Dim returnValue As java.awt.Dimension = CType(uis(0), javax.swing.plaf.ComponentUI).getPreferredSize(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).getPreferredSize(a)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getMinimumSize</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getMinimumSize(ByVal a As javax.swing.JComponent) As java.awt.Dimension
			Dim returnValue As java.awt.Dimension = CType(uis(0), javax.swing.plaf.ComponentUI).getMinimumSize(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).getMinimumSize(a)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getMaximumSize</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getMaximumSize(ByVal a As javax.swing.JComponent) As java.awt.Dimension
			Dim returnValue As java.awt.Dimension = CType(uis(0), javax.swing.plaf.ComponentUI).getMaximumSize(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).getMaximumSize(a)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getAccessibleChildrenCount(ByVal a As javax.swing.JComponent) As Integer
			Dim returnValue As Integer = CType(uis(0), javax.swing.plaf.ComponentUI).getAccessibleChildrenCount(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).getAccessibleChildrenCount(a)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getAccessibleChild(ByVal a As javax.swing.JComponent, ByVal b As Integer) As javax.accessibility.Accessible
			Dim returnValue As javax.accessibility.Accessible = CType(uis(0), javax.swing.plaf.ComponentUI).getAccessibleChild(a,b)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).getAccessibleChild(a,b)
			Next i
			Return returnValue
		End Function
	End Class

End Namespace