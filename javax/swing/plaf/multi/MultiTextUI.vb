Imports System.Collections

'
' * Copyright (c) 1997, 2006, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 
Namespace javax.swing.plaf.multi


	''' <summary>
	''' A multiplexing UI used to combine <code>TextUI</code>s.
	''' 
	''' <p>This file was automatically generated by AutoMulti.
	''' 
	''' @author  Otto Multey
	''' </summary>
	Public Class MultiTextUI
		Inherits javax.swing.plaf.TextUI

		''' <summary>
		''' The vector containing the real UIs.  This is populated
		''' in the call to <code>createUI</code>, and can be obtained by calling
		''' the <code>getUIs</code> method.  The first element is guaranteed to be the real UI
		''' obtained from the default look and feel.
		''' </summary>
		Protected Friend uis As New ArrayList

	'//////////////////
	' Common UI methods
	'//////////////////

		''' <summary>
		''' Returns the list of UIs associated with this multiplexing UI.  This
		''' allows processing of the UIs by an application aware of multiplexing
		''' UIs on components.
		''' </summary>
		Public Overridable Property uIs As javax.swing.plaf.ComponentUI()
			Get
				Return MultiLookAndFeel.uisToArray(uis)
			End Get
		End Property

	'//////////////////
	' TextUI methods
	'//////////////////

		''' <summary>
		''' Invokes the <code>getToolTipText</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code>
		''' @since 1.4 </returns>
		Public Overridable Function getToolTipText(ByVal a As javax.swing.text.JTextComponent, ByVal b As java.awt.Point) As String
			Dim returnValue As String = CType(uis(0), javax.swing.plaf.TextUI).getToolTipText(a,b)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TextUI).getToolTipText(a,b)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>modelToView</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overridable Function modelToView(ByVal a As javax.swing.text.JTextComponent, ByVal b As Integer) As java.awt.Rectangle
			Dim returnValue As java.awt.Rectangle = CType(uis(0), javax.swing.plaf.TextUI).modelToView(a,b)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TextUI).modelToView(a,b)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>modelToView</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overridable Function modelToView(ByVal a As javax.swing.text.JTextComponent, ByVal b As Integer, ByVal c As javax.swing.text.Position.Bias) As java.awt.Rectangle
			Dim returnValue As java.awt.Rectangle = CType(uis(0), javax.swing.plaf.TextUI).modelToView(a,b,c)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TextUI).modelToView(a,b,c)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>viewToModel</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overridable Function viewToModel(ByVal a As javax.swing.text.JTextComponent, ByVal b As java.awt.Point) As Integer
			Dim returnValue As Integer = CType(uis(0), javax.swing.plaf.TextUI).viewToModel(a,b)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TextUI).viewToModel(a,b)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>viewToModel</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overridable Function viewToModel(ByVal a As javax.swing.text.JTextComponent, ByVal b As java.awt.Point, ByVal c As javax.swing.text.Position.Bias()) As Integer
			Dim returnValue As Integer = CType(uis(0), javax.swing.plaf.TextUI).viewToModel(a,b,c)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TextUI).viewToModel(a,b,c)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getNextVisualPositionFrom</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overridable Function getNextVisualPositionFrom(ByVal a As javax.swing.text.JTextComponent, ByVal b As Integer, ByVal c As javax.swing.text.Position.Bias, ByVal d As Integer, ByVal e As javax.swing.text.Position.Bias()) As Integer
			Dim returnValue As Integer = CType(uis(0), javax.swing.plaf.TextUI).getNextVisualPositionFrom(a,b,c,d,e)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TextUI).getNextVisualPositionFrom(a,b,c,d,e)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>damageRange</code> method on each UI handled by this object.
		''' </summary>
		Public Overridable Sub damageRange(ByVal a As javax.swing.text.JTextComponent, ByVal b As Integer, ByVal c As Integer)
			For i As Integer = 0 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TextUI).damageRange(a,b,c)
			Next i
		End Sub

		''' <summary>
		''' Invokes the <code>damageRange</code> method on each UI handled by this object.
		''' </summary>
		Public Overridable Sub damageRange(ByVal a As javax.swing.text.JTextComponent, ByVal b As Integer, ByVal c As Integer, ByVal d As javax.swing.text.Position.Bias, ByVal e As javax.swing.text.Position.Bias)
			For i As Integer = 0 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TextUI).damageRange(a,b,c,d,e)
			Next i
		End Sub

		''' <summary>
		''' Invokes the <code>getEditorKit</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overridable Function getEditorKit(ByVal a As javax.swing.text.JTextComponent) As javax.swing.text.EditorKit
			Dim returnValue As javax.swing.text.EditorKit = CType(uis(0), javax.swing.plaf.TextUI).getEditorKit(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TextUI).getEditorKit(a)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getRootView</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overridable Function getRootView(ByVal a As javax.swing.text.JTextComponent) As javax.swing.text.View
			Dim returnValue As javax.swing.text.View = CType(uis(0), javax.swing.plaf.TextUI).getRootView(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.TextUI).getRootView(a)
			Next i
			Return returnValue
		End Function

	'//////////////////
	' ComponentUI methods
	'//////////////////

		''' <summary>
		''' Invokes the <code>contains</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function contains(ByVal a As javax.swing.JComponent, ByVal b As Integer, ByVal c As Integer) As Boolean
			Dim returnValue As Boolean = CType(uis(0), javax.swing.plaf.ComponentUI).contains(a,b,c)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).contains(a,b,c)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>update</code> method on each UI handled by this object.
		''' </summary>
		Public Overrides Sub update(ByVal a As java.awt.Graphics, ByVal b As javax.swing.JComponent)
			For i As Integer = 0 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).update(a,b)
			Next i
		End Sub

		''' <summary>
		''' Returns a multiplexing UI instance if any of the auxiliary
		''' <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the
		''' UI object obtained from the default <code>LookAndFeel</code>.
		''' </summary>
		Public Shared Function createUI(ByVal a As javax.swing.JComponent) As javax.swing.plaf.ComponentUI
			Dim mui As javax.swing.plaf.ComponentUI = New MultiTextUI
			Return MultiLookAndFeel.createUIs(mui, CType(mui, MultiTextUI).uis, a)
		End Function

		''' <summary>
		''' Invokes the <code>installUI</code> method on each UI handled by this object.
		''' </summary>
		Public Overrides Sub installUI(ByVal a As javax.swing.JComponent)
			For i As Integer = 0 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).installUI(a)
			Next i
		End Sub

		''' <summary>
		''' Invokes the <code>uninstallUI</code> method on each UI handled by this object.
		''' </summary>
		Public Overrides Sub uninstallUI(ByVal a As javax.swing.JComponent)
			For i As Integer = 0 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).uninstallUI(a)
			Next i
		End Sub

		''' <summary>
		''' Invokes the <code>paint</code> method on each UI handled by this object.
		''' </summary>
		Public Overrides Sub paint(ByVal a As java.awt.Graphics, ByVal b As javax.swing.JComponent)
			For i As Integer = 0 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).paint(a,b)
			Next i
		End Sub

		''' <summary>
		''' Invokes the <code>getPreferredSize</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getPreferredSize(ByVal a As javax.swing.JComponent) As java.awt.Dimension
			Dim returnValue As java.awt.Dimension = CType(uis(0), javax.swing.plaf.ComponentUI).getPreferredSize(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).getPreferredSize(a)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getMinimumSize</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getMinimumSize(ByVal a As javax.swing.JComponent) As java.awt.Dimension
			Dim returnValue As java.awt.Dimension = CType(uis(0), javax.swing.plaf.ComponentUI).getMinimumSize(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).getMinimumSize(a)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getMaximumSize</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getMaximumSize(ByVal a As javax.swing.JComponent) As java.awt.Dimension
			Dim returnValue As java.awt.Dimension = CType(uis(0), javax.swing.plaf.ComponentUI).getMaximumSize(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).getMaximumSize(a)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getAccessibleChildrenCount(ByVal a As javax.swing.JComponent) As Integer
			Dim returnValue As Integer = CType(uis(0), javax.swing.plaf.ComponentUI).getAccessibleChildrenCount(a)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).getAccessibleChildrenCount(a)
			Next i
			Return returnValue
		End Function

		''' <summary>
		''' Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.
		''' </summary>
		''' <returns> the value obtained from the first UI, which is
		''' the UI obtained from the default <code>LookAndFeel</code> </returns>
		Public Overrides Function getAccessibleChild(ByVal a As javax.swing.JComponent, ByVal b As Integer) As javax.accessibility.Accessible
			Dim returnValue As javax.accessibility.Accessible = CType(uis(0), javax.swing.plaf.ComponentUI).getAccessibleChild(a,b)
			For i As Integer = 1 To uis.Count - 1
				CType(uis(i), javax.swing.plaf.ComponentUI).getAccessibleChild(a,b)
			Next i
			Return returnValue
		End Function
	End Class

End Namespace