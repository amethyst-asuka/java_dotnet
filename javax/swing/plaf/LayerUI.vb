Imports System
Imports javax.swing

'
' * Copyright (c) 2009, 2013, Oracle and/or its affiliates. All rights reserved.
' * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' *
' 

Namespace javax.swing.plaf


	''' <summary>
	''' The base class for all <seealso cref="javax.swing.JLayer"/>'s UI delegates.
	''' <p>
	''' <seealso cref="#paint(java.awt.Graphics, javax.swing.JComponent)"/> method performs the
	''' painting of the {@code JLayer}
	''' and <seealso cref="#eventDispatched(AWTEvent, JLayer)"/> method is notified
	''' about any {@code AWTEvent}s which have been generated by a {@code JLayer}
	''' or any of its subcomponents.
	''' <p>
	''' The {@code LayerUI} differs from the UI delegates of the other components,
	''' because it is LookAndFeel independent and is not updated by default when
	''' the system LookAndFeel is changed.
	''' <p>
	''' The subclasses of {@code LayerUI} can either be stateless and shareable
	''' by multiple {@code JLayer}s or not shareable.
	''' </summary>
	''' @param <V> one of the super types of {@code JLayer}'s view component
	''' </param>
	''' <seealso cref= JLayer#setUI(LayerUI) </seealso>
	''' <seealso cref= JLayer#setView(Component) </seealso>
	''' <seealso cref= JLayer#getView()
	''' @since 1.7
	''' 
	''' @author Alexander Potochkin </seealso>
	<Serializable> _
	Public Class LayerUI(Of V As Component)
		Inherits ComponentUI

		Private ReadOnly propertyChangeSupport As New java.beans.PropertyChangeSupport(Me)

		''' <summary>
		''' Paints the specified component.
		''' Subclasses should override this method and use
		''' the specified {@code Graphics} object to
		''' render the content of the component.
		''' <p>
		''' The default implementation paints the passed component as is.
		''' </summary>
		''' <param name="g"> the {@code Graphics} context in which to paint </param>
		''' <param name="c"> the component being painted </param>
		Public Overridable Sub paint(ByVal g As Graphics, ByVal c As JComponent)
			c.paint(g)
		End Sub

		''' <summary>
		''' Processes {@code AWTEvent}s for {@code JLayer}
		''' and <b>all its descendants</b> to this {@code LayerUI} instance.
		''' <p>
		''' To enable the {@code AWTEvent}s of a particular type,
		''' you call <seealso cref="JLayer#setLayerEventMask"/>
		''' in <seealso cref="#installUI(javax.swing.JComponent)"/>
		''' and set the layer event mask to {@code 0}
		''' in <seealso cref="#uninstallUI(javax.swing.JComponent)"/> after that.
		''' By default this  method calls the appropriate
		''' {@code process&lt;event&nbsp;type&gt;Event}
		''' method for the given class of event.
		''' <p>
		''' <b>Note:</b> Events are processed only for displayable {@code JLayer}s.
		''' </summary>
		''' <param name="e"> the event to be dispatched </param>
		''' <param name="l"> the layer this LayerUI is set to
		''' </param>
		''' <seealso cref= JLayer#setLayerEventMask(long) </seealso>
		''' <seealso cref= Component#isDisplayable() </seealso>
		''' <seealso cref= #processComponentEvent </seealso>
		''' <seealso cref= #processFocusEvent </seealso>
		''' <seealso cref= #processKeyEvent </seealso>
		''' <seealso cref= #processMouseEvent </seealso>
		''' <seealso cref= #processMouseMotionEvent </seealso>
		''' <seealso cref= #processInputMethodEvent </seealso>
		''' <seealso cref= #processHierarchyEvent </seealso>
		''' <seealso cref= #processMouseWheelEvent </seealso>
		Public Overridable Sub eventDispatched(Of T1 As V)(ByVal e As AWTEvent, ByVal l As JLayer(Of T1))
			If TypeOf e Is FocusEvent Then
				processFocusEvent(CType(e, FocusEvent), l)

			ElseIf TypeOf e Is MouseEvent Then
				Select Case e.iD
				  Case MouseEvent.MOUSE_PRESSED, MouseEvent.MOUSE_RELEASED, MouseEvent.MOUSE_CLICKED, MouseEvent.MOUSE_ENTERED, MouseEvent.MOUSE_EXITED
					  processMouseEvent(CType(e, MouseEvent), l)
				  Case MouseEvent.MOUSE_MOVED, MouseEvent.MOUSE_DRAGGED
					  processMouseMotionEvent(CType(e, MouseEvent), l)
				  Case MouseEvent.MOUSE_WHEEL
					  processMouseWheelEvent(CType(e, MouseWheelEvent), l)
				End Select
			ElseIf TypeOf e Is KeyEvent Then
				processKeyEvent(CType(e, KeyEvent), l)
			ElseIf TypeOf e Is ComponentEvent Then
				processComponentEvent(CType(e, ComponentEvent), l)
			ElseIf TypeOf e Is InputMethodEvent Then
				processInputMethodEvent(CType(e, InputMethodEvent), l)
			ElseIf TypeOf e Is HierarchyEvent Then
				Select Case e.iD
				  Case HierarchyEvent.HIERARCHY_CHANGED
					  processHierarchyEvent(CType(e, HierarchyEvent), l)
				  Case HierarchyEvent.ANCESTOR_MOVED, HierarchyEvent.ANCESTOR_RESIZED
					  processHierarchyBoundsEvent(CType(e, HierarchyEvent), l)
				End Select
			End If
		End Sub

		''' <summary>
		''' Processes component events occurring on the <seealso cref="JLayer"/>
		''' or any of its subcomponents.
		''' <p>
		''' This method is not called unless component events are
		''' enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
		''' Component events are enabled in the overridden <seealso cref="#installUI"/> method
		''' and should be disabled in the <seealso cref="#uninstallUI"/> method after that.
		''' <pre>
		''' public void installUI(JComponent c) {
		'''    super.installUI(c);
		'''    JLayer l = (JLayer) c;
		'''    l.setLayerEventMask(AWTEvent.COMPONENT_EVENT_MASK);
		''' }
		''' 
		''' public void uninstallUI(JComponent c) {
		'''     super.uninstallUI(c);
		'''     JLayer l = (JLayer) c;
		'''     l.setLayerEventMask(0);
		''' }
		''' </pre>
		''' </summary>
		''' <param name="e"> the {@code ComponentEvent} to be processed </param>
		''' <param name="l"> the layer this {@code LayerUI} instance is set to
		''' </param>
		''' <seealso cref= JLayer#setLayerEventMask(long) </seealso>
		''' <seealso cref= #installUI(javax.swing.JComponent) </seealso>
		''' <seealso cref= #uninstallUI(javax.swing.JComponent) </seealso>
		Protected Friend Overridable Sub processComponentEvent(Of T1 As V)(ByVal e As ComponentEvent, ByVal l As JLayer(Of T1))
		End Sub

		''' <summary>
		''' Processes focus events occurring on the <seealso cref="JLayer"/>
		''' or any of its subcomponents.
		''' <p>
		''' This method is not called unless focus events are
		''' enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
		''' Focus events are enabled in the overridden <seealso cref="#installUI"/> method
		''' and should be disabled in the <seealso cref="#uninstallUI"/> method after that.
		''' <pre>
		''' public void installUI(JComponent c) {
		'''    super.installUI(c);
		'''    JLayer l = (JLayer) c;
		'''    l.setLayerEventMask(AWTEvent.FOCUS_EVENT_MASK);
		''' }
		''' 
		''' public void uninstallUI(JComponent c) {
		'''     super.uninstallUI(c);
		'''     JLayer l = (JLayer) c;
		'''     l.setLayerEventMask(0);
		''' }
		''' </pre>
		''' </summary>
		''' <param name="e"> the {@code FocusEvent} to be processed </param>
		''' <param name="l"> the layer this {@code LayerUI} instance is set to
		''' </param>
		''' <seealso cref= JLayer#setLayerEventMask(long) </seealso>
		''' <seealso cref= #installUI(javax.swing.JComponent) </seealso>
		''' <seealso cref= #uninstallUI(javax.swing.JComponent) </seealso>
		Protected Friend Overridable Sub processFocusEvent(Of T1 As V)(ByVal e As FocusEvent, ByVal l As JLayer(Of T1))
		End Sub

		''' <summary>
		''' Processes key events occurring on the <seealso cref="JLayer"/>
		''' or any of its subcomponents.
		''' <p>
		''' This method is not called unless key events are
		''' enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
		''' Key events are enabled in the overridden <seealso cref="#installUI"/> method
		''' and should be disabled in the <seealso cref="#uninstallUI"/> method after that.
		''' <pre>
		''' public void installUI(JComponent c) {
		'''    super.installUI(c);
		'''    JLayer l = (JLayer) c;
		'''    l.setLayerEventMask(AWTEvent.KEY_EVENT_MASK);
		''' }
		''' 
		''' public void uninstallUI(JComponent c) {
		'''     super.uninstallUI(c);
		'''     JLayer l = (JLayer) c;
		'''     l.setLayerEventMask(0);
		''' }
		''' </pre>
		''' </summary>
		''' <param name="e"> the {@code KeyEvent} to be processed </param>
		''' <param name="l"> the layer this {@code LayerUI} instance is set to
		''' </param>
		''' <seealso cref= JLayer#setLayerEventMask(long) </seealso>
		''' <seealso cref= #installUI(javax.swing.JComponent) </seealso>
		''' <seealso cref= #uninstallUI(javax.swing.JComponent) </seealso>
		Protected Friend Overridable Sub processKeyEvent(Of T1 As V)(ByVal e As KeyEvent, ByVal l As JLayer(Of T1))
		End Sub

		''' <summary>
		''' Processes mouse events occurring on the <seealso cref="JLayer"/>
		''' or any of its subcomponents.
		''' <p>
		''' This method is not called unless mouse events are
		''' enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
		''' Mouse events are enabled in the overridden <seealso cref="#installUI"/> method
		''' and should be disabled in the <seealso cref="#uninstallUI"/> method after that.
		''' <pre>
		''' public void installUI(JComponent c) {
		'''    super.installUI(c);
		'''    JLayer l = (JLayer) c;
		'''    l.setLayerEventMask(AWTEvent.MOUSE_EVENT_MASK);
		''' }
		''' 
		''' public void uninstallUI(JComponent c) {
		'''     super.uninstallUI(c);
		'''     JLayer l = (JLayer) c;
		'''     l.setLayerEventMask(0);
		''' }
		''' </pre>
		''' </summary>
		''' <param name="e"> the {@code MouseEvent} to be processed </param>
		''' <param name="l"> the layer this {@code LayerUI} instance is set to
		''' </param>
		''' <seealso cref= JLayer#setLayerEventMask(long) </seealso>
		''' <seealso cref= #installUI(javax.swing.JComponent) </seealso>
		''' <seealso cref= #uninstallUI(javax.swing.JComponent) </seealso>
		Protected Friend Overridable Sub processMouseEvent(Of T1 As V)(ByVal e As MouseEvent, ByVal l As JLayer(Of T1))
		End Sub

		''' <summary>
		''' Processes mouse motion event occurring on the <seealso cref="JLayer"/>
		''' or any of its subcomponents.
		''' <p>
		''' This method is not called unless mouse motion events are
		''' enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
		''' Mouse motion events are enabled in the overridden <seealso cref="#installUI"/> method
		''' and should be disabled in the <seealso cref="#uninstallUI"/> method after that.
		''' <pre>
		''' public void installUI(JComponent c) {
		'''    super.installUI(c);
		'''    JLayer l = (JLayer) c;
		'''    l.setLayerEventMask(AWTEvent.MOUSE_MOTION_EVENT_MASK);
		''' }
		''' 
		''' public void uninstallUI(JComponent c) {
		'''     super.uninstallUI(c);
		'''     JLayer l = (JLayer) c;
		'''     l.setLayerEventMask(0);
		''' }
		''' </pre>
		''' </summary>
		''' <param name="e"> the {@code MouseEvent} to be processed </param>
		''' <param name="l"> the layer this {@code LayerUI} instance is set to
		''' </param>
		''' <seealso cref= JLayer#setLayerEventMask(long) </seealso>
		''' <seealso cref= #installUI(javax.swing.JComponent) </seealso>
		''' <seealso cref= #uninstallUI(javax.swing.JComponent) </seealso>
		Protected Friend Overridable Sub processMouseMotionEvent(Of T1 As V)(ByVal e As MouseEvent, ByVal l As JLayer(Of T1))
		End Sub

		''' <summary>
		''' Processes mouse wheel event occurring on the <seealso cref="JLayer"/>
		''' or any of its subcomponents.
		''' <p>
		''' This method is not called unless mouse wheel events are
		''' enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
		''' Mouse wheel events are enabled in the overridden <seealso cref="#installUI"/> method
		''' and should be disabled in the <seealso cref="#uninstallUI"/> method after that.
		''' <pre>
		''' public void installUI(JComponent c) {
		'''    super.installUI(c);
		'''    JLayer l = (JLayer) c;
		'''    l.setLayerEventMask(AWTEvent.MOUSE_WHEEL_EVENT_MASK);
		''' }
		''' 
		''' public void uninstallUI(JComponent c) {
		'''     super.uninstallUI(c);
		'''     JLayer l = (JLayer) c;
		'''     l.setLayerEventMask(0);
		''' }
		''' </pre>
		''' </summary>
		''' <param name="e"> the {@code MouseEvent} to be processed </param>
		''' <param name="l"> the layer this {@code LayerUI} instance is set to
		''' </param>
		''' <seealso cref= JLayer#setLayerEventMask(long) </seealso>
		''' <seealso cref= #installUI(javax.swing.JComponent) </seealso>
		''' <seealso cref= #uninstallUI(javax.swing.JComponent) </seealso>
		Protected Friend Overridable Sub processMouseWheelEvent(Of T1 As V)(ByVal e As MouseWheelEvent, ByVal l As JLayer(Of T1))
		End Sub

		''' <summary>
		''' Processes input event occurring on the <seealso cref="JLayer"/>
		''' or any of its subcomponents.
		''' <p>
		''' This method is not called unless input events are
		''' enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
		''' Input events are enabled in the overridden <seealso cref="#installUI"/> method
		''' and should be disabled in the <seealso cref="#uninstallUI"/> method after that.
		''' <pre>
		''' public void installUI(JComponent c) {
		'''    super.installUI(c);
		'''    JLayer l = (JLayer) c;
		'''    l.setLayerEventMask(AWTEvent.INPUT_METHOD_EVENT_MASK);
		''' }
		''' 
		''' public void uninstallUI(JComponent c) {
		'''     super.uninstallUI(c);
		'''     JLayer l = (JLayer) c;
		'''     l.setLayerEventMask(0);
		''' }
		''' </pre>
		''' </summary>
		''' <param name="e"> the {@code InputMethodEvent} to be processed </param>
		''' <param name="l"> the layer this {@code LayerUI} instance is set to
		''' </param>
		''' <seealso cref= JLayer#setLayerEventMask(long) </seealso>
		''' <seealso cref= #installUI(javax.swing.JComponent) </seealso>
		''' <seealso cref= #uninstallUI(javax.swing.JComponent) </seealso>
		Protected Friend Overridable Sub processInputMethodEvent(Of T1 As V)(ByVal e As InputMethodEvent, ByVal l As JLayer(Of T1))
		End Sub

		''' <summary>
		''' Processes hierarchy event occurring on the <seealso cref="JLayer"/>
		''' or any of its subcomponents.
		''' <p>
		''' This method is not called unless hierarchy events are
		''' enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
		''' Hierarchy events are enabled in the overridden <seealso cref="#installUI"/> method
		''' and should be disabled in the <seealso cref="#uninstallUI"/> method after that.
		''' <pre>
		''' public void installUI(JComponent c) {
		'''    super.installUI(c);
		'''    JLayer l = (JLayer) c;
		'''    l.setLayerEventMask(AWTEvent.HIERARCHY_EVENT_MASK);
		''' }
		''' 
		''' public void uninstallUI(JComponent c) {
		'''     super.uninstallUI(c);
		'''     JLayer l = (JLayer) c;
		'''     l.setLayerEventMask(0);
		''' }
		''' </pre>
		''' </summary>
		''' <param name="e"> the {@code HierarchyEvent} to be processed </param>
		''' <param name="l"> the layer this {@code LayerUI} instance is set to
		''' </param>
		''' <seealso cref= JLayer#setLayerEventMask(long) </seealso>
		''' <seealso cref= #installUI(javax.swing.JComponent) </seealso>
		''' <seealso cref= #uninstallUI(javax.swing.JComponent) </seealso>
		Protected Friend Overridable Sub processHierarchyEvent(Of T1 As V)(ByVal e As HierarchyEvent, ByVal l As JLayer(Of T1))
		End Sub

		''' <summary>
		''' Processes hierarchy bounds event occurring on the <seealso cref="JLayer"/>
		''' or any of its subcomponents.
		''' <p>
		''' This method is not called unless hierarchy bounds events are
		''' enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
		''' Hierarchy bounds events are enabled in the overridden <seealso cref="#installUI"/>
		''' method and should be disabled in the <seealso cref="#uninstallUI"/> method after that.
		''' <pre>
		''' public void installUI(JComponent c) {
		'''    super.installUI(c);
		'''    JLayer l = (JLayer) c;
		'''    l.setLayerEventMask(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);
		''' }
		''' 
		''' public void uninstallUI(JComponent c) {
		'''     super.uninstallUI(c);
		'''     JLayer l = (JLayer) c;
		'''     l.setLayerEventMask(0);
		''' }
		''' </pre>
		''' </summary>
		''' <param name="e"> the {@code HierarchyEvent} to be processed </param>
		''' <param name="l"> the layer this {@code LayerUI} instance is set to
		''' </param>
		''' <seealso cref= JLayer#setLayerEventMask(long) </seealso>
		''' <seealso cref= #installUI(javax.swing.JComponent) </seealso>
		''' <seealso cref= #uninstallUI(javax.swing.JComponent) </seealso>
		Protected Friend Overridable Sub processHierarchyBoundsEvent(Of T1 As V)(ByVal e As HierarchyEvent, ByVal l As JLayer(Of T1))
		End Sub

		''' <summary>
		''' Invoked when <seealso cref="javax.swing.JLayer#updateUI()"/> is called
		''' by the {@code JLayer} this {@code LayerUI} is set to.
		''' </summary>
		''' <param name="l"> the {@code JLayer} which UI is updated </param>
		Public Overridable Sub updateUI(Of T1 As V)(ByVal l As JLayer(Of T1))
		End Sub

		''' <summary>
		''' Configures the {@code JLayer} this {@code LayerUI} is set to.
		''' The default implementation registers the passed {@code JLayer} component
		''' as a {@code PropertyChangeListener} for the property changes of this {@code LayerUI}.
		''' </summary>
		''' <param name="c"> the {@code JLayer} component where this UI delegate is being installed </param>
		Public Overridable Sub installUI(ByVal c As JComponent)
			addPropertyChangeListener(CType(c, JLayer))
		End Sub

		''' <summary>
		''' Reverses the configuration which was previously set
		''' in the <seealso cref="#installUI(JComponent)"/> method.
		''' The default implementation unregisters the passed {@code JLayer} component
		''' as a {@code PropertyChangeListener} for the property changes of this {@code LayerUI}.
		''' </summary>
		''' <param name="c"> the component from which this UI delegate is being removed. </param>
		Public Overridable Sub uninstallUI(ByVal c As JComponent)
			removePropertyChangeListener(CType(c, JLayer))
		End Sub

		''' <summary>
		''' Adds a PropertyChangeListener to the listener list. The listener is
		''' registered for all bound properties of this class.
		''' <p>
		''' If {@code listener} is {@code null},
		''' no exception is thrown and no action is performed.
		''' </summary>
		''' <param name="listener"> the property change listener to be added </param>
		''' <seealso cref= #removePropertyChangeListener </seealso>
		''' <seealso cref= #getPropertyChangeListeners </seealso>
		''' <seealso cref= #addPropertyChangeListener(String, java.beans.PropertyChangeListener) </seealso>
		Public Overridable Sub addPropertyChangeListener(ByVal listener As java.beans.PropertyChangeListener)
			propertyChangeSupport.addPropertyChangeListener(listener)
		End Sub

		''' <summary>
		''' Removes a PropertyChangeListener from the listener list. This method
		''' should be used to remove PropertyChangeListeners that were registered
		''' for all bound properties of this class.
		''' <p>
		''' If {@code listener} is {@code null},
		''' no exception is thrown and no action is performed.
		''' </summary>
		''' <param name="listener"> the PropertyChangeListener to be removed </param>
		''' <seealso cref= #addPropertyChangeListener </seealso>
		''' <seealso cref= #getPropertyChangeListeners </seealso>
		''' <seealso cref= #removePropertyChangeListener(String, PropertyChangeListener) </seealso>
		Public Overridable Sub removePropertyChangeListener(ByVal listener As java.beans.PropertyChangeListener)
			propertyChangeSupport.removePropertyChangeListener(listener)
		End Sub

		''' <summary>
		''' Returns an array of all the property change listeners
		''' registered on this component.
		''' </summary>
		''' <returns> all of this ui's {@code PropertyChangeListener}s
		'''         or an empty array if no property change
		'''         listeners are currently registered </returns>
		''' <seealso cref= #addPropertyChangeListener </seealso>
		''' <seealso cref= #removePropertyChangeListener </seealso>
		''' <seealso cref= #getPropertyChangeListeners(String) </seealso>
		Public Overridable Property propertyChangeListeners As java.beans.PropertyChangeListener()
			Get
				Return propertyChangeSupport.propertyChangeListeners
			End Get
		End Property

		''' <summary>
		''' Adds a PropertyChangeListener to the listener list for a specific
		''' property.
		''' <p>
		''' If {@code propertyName} or {@code listener} is {@code null},
		''' no exception is thrown and no action is taken.
		''' </summary>
		''' <param name="propertyName"> one of the property names listed above </param>
		''' <param name="listener">     the property change listener to be added </param>
		''' <seealso cref= #removePropertyChangeListener(String, PropertyChangeListener) </seealso>
		''' <seealso cref= #getPropertyChangeListeners(String) </seealso>
		''' <seealso cref= #addPropertyChangeListener(String, PropertyChangeListener) </seealso>
		Public Overridable Sub addPropertyChangeListener(ByVal propertyName As String, ByVal listener As java.beans.PropertyChangeListener)
			propertyChangeSupport.addPropertyChangeListener(propertyName, listener)
		End Sub

		''' <summary>
		''' Removes a {@code PropertyChangeListener} from the listener
		''' list for a specific property. This method should be used to remove
		''' {@code PropertyChangeListener}s
		''' that were registered for a specific bound property.
		''' <p>
		''' If {@code propertyName} or {@code listener} is {@code null},
		''' no exception is thrown and no action is taken.
		''' </summary>
		''' <param name="propertyName"> a valid property name </param>
		''' <param name="listener">     the PropertyChangeListener to be removed </param>
		''' <seealso cref= #addPropertyChangeListener(String, PropertyChangeListener) </seealso>
		''' <seealso cref= #getPropertyChangeListeners(String) </seealso>
		''' <seealso cref= #removePropertyChangeListener(PropertyChangeListener) </seealso>
		Public Overridable Sub removePropertyChangeListener(ByVal propertyName As String, ByVal listener As java.beans.PropertyChangeListener)
			propertyChangeSupport.removePropertyChangeListener(propertyName, listener)
		End Sub

		''' <summary>
		''' Returns an array of all the listeners which have been associated
		''' with the named property.
		''' </summary>
		''' <param name="propertyName">  The name of the property being listened to </param>
		''' <returns> all of the {@code PropertyChangeListener}s associated with
		'''         the named property; if no such listeners have been added or
		'''         if {@code propertyName} is {@code null}, an empty
		'''         array is returned </returns>
		''' <seealso cref= #addPropertyChangeListener(String, PropertyChangeListener) </seealso>
		''' <seealso cref= #removePropertyChangeListener(String, PropertyChangeListener) </seealso>
		''' <seealso cref= #getPropertyChangeListeners </seealso>
		Public Overridable Function getPropertyChangeListeners(ByVal propertyName As String) As java.beans.PropertyChangeListener()
			Return propertyChangeSupport.getPropertyChangeListeners(propertyName)
		End Function

		''' <summary>
		''' Support for reporting bound property changes for Object properties.
		''' This method can be called when a bound property has changed and it will
		''' send the appropriate PropertyChangeEvent to any registered
		''' PropertyChangeListeners.
		''' </summary>
		''' <param name="propertyName"> the property whose value has changed </param>
		''' <param name="oldValue">     the property's previous value </param>
		''' <param name="newValue">     the property's new value </param>
		Protected Friend Overridable Sub firePropertyChange(ByVal propertyName As String, ByVal oldValue As Object, ByVal newValue As Object)
			propertyChangeSupport.firePropertyChange(propertyName, oldValue, newValue)
		End Sub

		''' <summary>
		''' Notifies the {@code LayerUI} when any of its property are changed
		''' and enables updating every {@code JLayer}
		''' this {@code LayerUI} instance is set to.
		''' </summary>
		''' <param name="evt"> the PropertyChangeEvent generated by this {@code LayerUI} </param>
		''' <param name="l"> the {@code JLayer} this LayerUI is set to </param>
		Public Overridable Sub applyPropertyChange(Of T1 As V)(ByVal evt As java.beans.PropertyChangeEvent, ByVal l As JLayer(Of T1))
		End Sub

		''' <summary>
		''' If the {@code JLayer}'s view component is not {@code null},
		''' this calls the view's {@code getBaseline()} method.
		''' Otherwise, the default implementation is called.
		''' </summary>
		''' <param name="c"> {@code JLayer} to return baseline resize behavior for </param>
		''' <param name="width"> the width to get the baseline for </param>
		''' <param name="height"> the height to get the baseline for </param>
		''' <returns> baseline or a value &lt; 0 indicating there is no reasonable
		'''                  baseline </returns>
		Public Overridable Function getBaseline(ByVal c As JComponent, ByVal width As Integer, ByVal height As Integer) As Integer
			Dim l As JLayer = CType(c, JLayer)
			If l.view IsNot Nothing Then Return l.view.getBaseline(width, height)
			Return MyBase.getBaseline(c, width, height)
		End Function

		''' <summary>
		''' If the {@code JLayer}'s view component is not {@code null},
		''' this returns the result of the view's {@code getBaselineResizeBehavior()} method.
		''' Otherwise, the default implementation is called.
		''' </summary>
		''' <param name="c"> {@code JLayer} to return baseline resize behavior for </param>
		''' <returns> an enum indicating how the baseline changes as the component
		'''         size changes </returns>
		Public Overridable Function getBaselineResizeBehavior(ByVal c As JComponent) As Component.BaselineResizeBehavior
			Dim l As JLayer = CType(c, JLayer)
			If l.view IsNot Nothing Then Return l.view.baselineResizeBehavior
			Return MyBase.getBaselineResizeBehavior(c)
		End Function

		''' <summary>
		''' Causes the passed instance of {@code JLayer} to lay out its components.
		''' </summary>
		''' <param name="l"> the {@code JLayer} component where this UI delegate is being installed </param>
		Public Overridable Sub doLayout(Of T1 As V)(ByVal l As JLayer(Of T1))
			Dim view As Component = l.view
			If view IsNot Nothing Then view.boundsnds(0, 0, l.width, l.height)
			Dim glassPane As Component = l.glassPane
			If glassPane IsNot Nothing Then glassPane.boundsnds(0, 0, l.width, l.height)
		End Sub

		''' <summary>
		''' If the {@code JLayer}'s view component is not {@code null},
		''' this returns the result of  the view's {@code getPreferredSize()} method.
		''' Otherwise, the default implementation is used.
		''' </summary>
		''' <param name="c"> {@code JLayer} to return preferred size for </param>
		''' <returns> preferred size for the passed {@code JLayer} </returns>
		Public Overridable Function getPreferredSize(ByVal c As JComponent) As Dimension
			Dim l As JLayer = CType(c, JLayer)
			Dim view As Component = l.view
			If view IsNot Nothing Then Return view.preferredSize
			Return MyBase.getPreferredSize(c)
		End Function

		''' <summary>
		''' If the {@code JLayer}'s view component is not {@code null},
		''' this returns the result of  the view's {@code getMinimalSize()} method.
		''' Otherwise, the default implementation is used.
		''' </summary>
		''' <param name="c"> {@code JLayer} to return preferred size for </param>
		''' <returns> minimal size for the passed {@code JLayer} </returns>
		Public Overridable Function getMinimumSize(ByVal c As JComponent) As Dimension
			Dim l As JLayer = CType(c, JLayer)
			Dim view As Component = l.view
			If view IsNot Nothing Then Return view.minimumSize
			Return MyBase.getMinimumSize(c)
		End Function

		''' <summary>
		''' If the {@code JLayer}'s view component is not {@code null},
		''' this returns the result of  the view's {@code getMaximumSize()} method.
		''' Otherwise, the default implementation is used.
		''' </summary>
		''' <param name="c"> {@code JLayer} to return preferred size for </param>
		''' <returns> maximum size for the passed {@code JLayer} </returns>
		Public Overridable Function getMaximumSize(ByVal c As JComponent) As Dimension
			Dim l As JLayer = CType(c, JLayer)
			Dim view As Component = l.view
			If view IsNot Nothing Then Return view.maximumSize
			Return MyBase.getMaximumSize(c)
		End Function

		''' <summary>
		''' Paints the specified region in the {@code JLayer} this {@code LayerUI} is set to, immediately.
		''' <p>
		''' This method is to be overridden when the dirty region needs to be changed.
		''' The default implementation delegates its functionality to <seealso cref="JComponent#paintImmediately(int, int, int, int)"/>.
		''' </summary>
		''' <param name="x">  the x value of the region to be painted </param>
		''' <param name="y">  the y value of the region to be painted </param>
		''' <param name="width">  the width of the region to be painted </param>
		''' <param name="height">  the height of the region to be painted
		''' </param>
		''' <seealso cref= JComponent#paintImmediately(int, int, int, int) </seealso>
		Public Overridable Sub paintImmediately(Of T1 As V)(ByVal x As Integer, ByVal y As Integer, ByVal width As Integer, ByVal height As Integer, ByVal l As JLayer(Of T1))
			l.paintImmediately(x, y, width, height)
		End Sub
	End Class

End Namespace